{"version":3,"file":"6419-2b0a993c613ed4279236.js","mappings":"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","sources":["webpack://ic-design-system/./node_modules/@ukic/web-components/dist/esm/ic-tab-context.entry.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, g as getElement } from './index-90721b3c.js';\nimport { I as IcThemeForegroundEnum } from './types-dd515332.js';\nconst TabContext = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.tabSelect = createEvent(this, \"tabSelect\", 7);\n    this.icTabSelect = createEvent(this, \"icTabSelect\", 7);\n    this.newTabs = [];\n    this.newTabPanels = [];\n    // Sets attributes to link tab-group, tabs and tab-panels\n    this.linkTabs = () => {\n      this.tabs.forEach((tab, index) => {\n        const tabId = \"ic-tab-\".concat(index, \"-context-\").concat(this.contextId);\n        const tabPanelId = \"ic-tab-panel-\".concat(index, \"-context-\").concat(this.contextId);\n        const shared = \"ic-tab--\".concat(index, \"-context-\").concat(this.contextId);\n        tab.setAttribute(\"id\", tabId);\n        tab.tabId = shared;\n        tab.tabPosition = index;\n        tab.setAttribute(\"aria-controls\", tabPanelId);\n        tab.setAttribute(\"context-id\", this.contextId);\n        this.tabGroup.setAttribute(\"context-id\", this.contextId);\n        this.tabPanels[index].setAttribute(\"id\", tabPanelId);\n        this.tabPanels[index].panelId = shared;\n        this.tabPanels[index].tabPosition = index;\n        this.tabPanels[index].setAttribute(\"aria-labelledby\", tabId);\n        this.tabPanels[index].setAttribute(\"context-id\", this.contextId);\n        if (this.appearance === IcThemeForegroundEnum.Light) {\n          tab.appearance = this.appearance;\n          this.tabPanels[index].appearance = this.appearance;\n        }\n      });\n      if (this.appearance === IcThemeForegroundEnum.Light) {\n        this.tabGroup.appearance = this.appearance;\n      }\n    };\n    // Gets tabs and tabpanels with the same context ID\n    // Using querySelector to selector the children in relation to the host\n    this.getChildren = () => {\n      this.tabGroup = this.host.querySelector(\"ic-tab-group\");\n      this.tabs = Array.from(this.tabGroup.querySelectorAll(\"ic-tab\"));\n      this.tabPanels = Array.from(this.host.children).filter(child => child.tagName === \"IC-TAB-PANEL\");\n      this.enabledTabs = this.getEnabledTabs();\n    };\n    // Determines how keyboard navigation is to be handled based on the activation type\n    this.attatchEventListeners = () => {\n      if (this.activationType === \"automatic\") {\n        this.tabGroup.addEventListener(\"keydown\", event => {\n          this.handleKeyBoardNavAutomatic(event);\n        });\n      } else {\n        this.tabGroup.addEventListener(\"keydown\", event => {\n          this.handleKeyBoardNavManual(event);\n        });\n      }\n    };\n    // Determines whether the selected tab is being controlled within the component\n    // or by the user (via selectedTabIndex and onIcTabSelect)\n    this.setControlledMode = () => {\n      if (this.selectedTabIndex !== undefined) {\n        this.controlledMode = true;\n        this.selectedTab = this.selectedTabIndex;\n      }\n    };\n    // Sets the tab that is selected on initial render\n    this.setInitialTab = () => {\n      if (this.controlledMode) {\n        this.selectedTab = this.selectedTabIndex;\n        this.focusedTabIndex = this.selectedTabIndex;\n      } else {\n        const firstEnabledTabIndex = this.tabs.findIndex(tab => tab.tabId === this.enabledTabs[0].tabId);\n        this.selectedTab = firstEnabledTabIndex;\n        this.focusedTabIndex = firstEnabledTabIndex;\n      }\n    };\n    // Passes the selected tab to the tab and tab panel components\n    this.configureTabs = () => {\n      this.enabledTabs.forEach(tab => {\n        tab.selected = tab.tabPosition === this.selectedTab;\n      });\n      this.tabPanels.forEach(tabPanel => {\n        tabPanel.selectedTab = this.tabs[this.selectedTab].tabId;\n      });\n    };\n    this.getEnabledTabs = () => {\n      return Array.from(this.tabs).filter(child => !child.disabled);\n    };\n    this.getIndexOfEnabledTab = allTabsIndex => {\n      return this.enabledTabs.findIndex(tab => tab.tabId === this.tabs[allTabsIndex].tabId);\n    };\n    // Sets focus on tab and selects it\n    this.keyboardSelectTab = enabledTabIndex => {\n      const newIndex = this.tabs.findIndex(tab => tab.tabId === this.enabledTabs[enabledTabIndex].tabId);\n      this.enabledTabs[enabledTabIndex].focus();\n      if (!this.controlledMode) {\n        this.selectedTab = newIndex;\n      } else {\n        this.icTabSelect.emit({\n          tabIndex: newIndex\n        });\n        this.tabSelect.emit({\n          tabIndex: newIndex\n        });\n      }\n    };\n    // Sets focus on tab without selecting it (for manual activation)\n    this.keyboardFocusTab = enabledTabIndex => {\n      const newIndex = this.tabs.findIndex(tab => tab.tabId === this.enabledTabs[enabledTabIndex].tabId);\n      this.enabledTabs[enabledTabIndex].focus();\n      this.focusedTabIndex = newIndex;\n    };\n    this.handleKeyBoardNavAutomatic = event => {\n      const key = event.key;\n      const enabledTabIndex = this.getIndexOfEnabledTab(this.selectedTab);\n      let preventDefault = true;\n      switch (key) {\n        case \"Home\":\n          this.keyboardSelectTab(0);\n          break;\n        case \"End\":\n          this.keyboardSelectTab(this.enabledTabs.length - 1);\n          break;\n        case \"ArrowRight\":\n          if (enabledTabIndex < this.enabledTabs.length - 1) {\n            this.keyboardSelectTab(enabledTabIndex + 1);\n          } else {\n            this.keyboardSelectTab(0);\n          }\n          break;\n        case \"ArrowLeft\":\n          if (enabledTabIndex > 0) {\n            this.keyboardSelectTab(enabledTabIndex - 1);\n          } else {\n            this.keyboardSelectTab(this.enabledTabs.length - 1);\n          }\n          break;\n        default:\n          preventDefault = false;\n      }\n      if (preventDefault) event.preventDefault();\n    };\n    this.handleKeyBoardNavManual = event => {\n      const key = event.key;\n      const enabledTabIndex = this.getIndexOfEnabledTab(this.focusedTabIndex);\n      let preventDefault = true;\n      switch (key) {\n        case \"Home\":\n          this.keyboardFocusTab(0);\n          break;\n        case \"End\":\n          this.keyboardFocusTab(this.enabledTabs.length - 1);\n          break;\n        case \"ArrowRight\":\n          if (enabledTabIndex < this.enabledTabs.length - 1) {\n            this.keyboardFocusTab(enabledTabIndex + 1);\n          } else {\n            this.keyboardFocusTab(0);\n          }\n          break;\n        case \"ArrowLeft\":\n          if (enabledTabIndex > 0) {\n            this.keyboardFocusTab(enabledTabIndex - 1);\n          } else {\n            this.keyboardFocusTab(this.enabledTabs.length - 1);\n          }\n          break;\n        case \"Enter\":\n          this.keyboardSelectTab(this.focusedTabIndex);\n          break;\n        case \" \":\n          this.keyboardSelectTab(this.focusedTabIndex);\n          break;\n        default:\n          preventDefault = false;\n      }\n      if (preventDefault) event.preventDefault();\n    };\n    this.contextId = \"default\";\n    this.activationType = \"automatic\";\n    this.selectedTabIndex = undefined;\n    this.appearance = \"dark\";\n    this.selectedTab = undefined;\n  }\n  updateSelectedTab(newValue) {\n    this.selectedTab = newValue;\n  }\n  tabClickHandler(event) {\n    if (this.selectedTabIndex === undefined && event.detail.contextId === this.contextId) {\n      this.selectedTab = event.detail.position;\n    }\n    this.icTabSelect.emit({\n      tabIndex: event.detail.position\n    });\n    this.tabSelect.emit({\n      tabIndex: event.detail.position\n    });\n  }\n  tabCreatedHandler(ev) {\n    if (this.tabs && this.tabPanels) {\n      (ev.detail.setFocus ? this.newTabs : this.newTabPanels).push(ev.detail);\n      if (this.newTabs.length === this.newTabPanels.length) {\n        this.tabs.push(...this.newTabs);\n        this.tabPanels.push(...this.newTabPanels);\n        this.enabledTabs = this.getEnabledTabs();\n        this.linkTabs();\n        this.newTabs = [];\n        this.newTabPanels = [];\n      }\n    }\n  }\n  /**\n   * @internal Used to set tab/tab panel IDs when a tab/tab panel has been removed\n   */\n  async tabRemovedHandler(hadFocus) {\n    this.getChildren();\n    this.enabledTabs = this.getEnabledTabs();\n    this.linkTabs();\n    if (this.tabs[this.selectedTab] && this.tabPanels[this.selectedTab]) {\n      this.tabs[this.selectedTab].selected = true;\n      this.tabPanels[this.selectedTab].selectedTab = this.tabs[this.selectedTab].tabId;\n    } else {\n      this.setInitialTab();\n    }\n    if (hadFocus) {\n      this.tabs[this.selectedTab].setFocus();\n    }\n  }\n  componentDidLoad() {\n    this.setControlledMode();\n    this.getChildren();\n    this.linkTabs();\n    this.attatchEventListeners();\n    this.setInitialTab();\n    this.configureTabs();\n  }\n  componentWillUpdate() {\n    this.configureTabs();\n  }\n  disconnectedCallback() {\n    if (this.activationType === \"manual\") {\n      this.tabGroup.removeEventListener(\"keydown\", event => this.handleKeyBoardNavManual(event));\n    } else {\n      this.tabGroup.removeEventListener(\"keydown\", event => this.handleKeyBoardNavAutomatic(event));\n    }\n  }\n  render() {\n    return h(\"slot\", null);\n  }\n  get host() {\n    return getElement(this);\n  }\n  static get watchers() {\n    return {\n      \"selectedTabIndex\": [\"updateSelectedTab\"]\n    };\n  }\n};\nexport { TabContext as ic_tab_context };"],"names":["TabContext","constructor","hostRef","r","this","tabSelect","c","icTabSelect","newTabs","newTabPanels","linkTabs","tabs","forEach","tab","index","tabId","concat","contextId","tabPanelId","shared","setAttribute","tabPosition","tabGroup","tabPanels","panelId","appearance","I","getChildren","host","querySelector","Array","from","querySelectorAll","children","filter","child","tagName","enabledTabs","getEnabledTabs","attatchEventListeners","activationType","addEventListener","event","handleKeyBoardNavAutomatic","handleKeyBoardNavManual","setControlledMode","undefined","selectedTabIndex","controlledMode","selectedTab","setInitialTab","focusedTabIndex","firstEnabledTabIndex","findIndex","configureTabs","selected","tabPanel","disabled","getIndexOfEnabledTab","allTabsIndex","keyboardSelectTab","enabledTabIndex","newIndex","focus","emit","tabIndex","keyboardFocusTab","key","preventDefault","length","updateSelectedTab","newValue","tabClickHandler","detail","position","tabCreatedHandler","ev","setFocus","push","async","hadFocus","componentDidLoad","componentWillUpdate","disconnectedCallback","removeEventListener","render","h","g","watchers"],"sourceRoot":""}