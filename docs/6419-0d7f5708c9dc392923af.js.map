{"version":3,"file":"6419-0d7f5708c9dc392923af.js","mappings":"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","sources":["webpack://ic-design-system/./node_modules/@ukic/web-components/dist/esm/ic-tab-context.entry.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, g as getElement } from './index-3b144b17.js';\nimport { I as IcThemeForegroundEnum } from './types-dd515332.js';\nconst TabContext = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.tabSelect = createEvent(this, \"tabSelect\", 3);\n    this.icTabSelect = createEvent(this, \"icTabSelect\", 3);\n    this.newTabs = [];\n    this.newTabPanels = [];\n    // Sets attributes to link tab-group, tabs and tab-panels\n    this.linkTabs = () => {\n      this.tabs.forEach((tab, index) => {\n        const tabId = \"ic-tab-\".concat(index, \"-context-\").concat(this.contextId);\n        const tabPanelId = \"ic-tab-panel-\".concat(index, \"-context-\").concat(this.contextId);\n        const shared = \"ic-tab--\".concat(index, \"-context-\").concat(this.contextId);\n        const contextIdAttr = \"context-id\";\n        tab.setAttribute(\"id\", tabId);\n        tab.tabId = shared;\n        tab.tabPosition = index;\n        tab.setAttribute(\"aria-controls\", tabPanelId);\n        tab.setAttribute(contextIdAttr, this.contextId);\n        this.tabGroup.setAttribute(contextIdAttr, this.contextId);\n        this.tabPanels[index].setAttribute(\"id\", tabPanelId);\n        this.tabPanels[index].panelId = shared;\n        this.tabPanels[index].tabPosition = index;\n        this.tabPanels[index].setAttribute(\"aria-labelledby\", tabId);\n        this.tabPanels[index].setAttribute(contextIdAttr, this.contextId);\n        if (this.appearance === IcThemeForegroundEnum.Light) {\n          tab.appearance = this.appearance;\n          this.tabPanels[index].appearance = this.appearance;\n        }\n      });\n      if (this.appearance === IcThemeForegroundEnum.Light) {\n        this.tabGroup.appearance = this.appearance;\n      }\n    };\n    // Gets tabs and tabpanels with the same context ID\n    // Using querySelector to selector the children in relation to the host\n    this.getChildren = () => {\n      this.tabGroup = this.host.querySelector(\"ic-tab-group\");\n      this.tabs = Array.from(this.tabGroup.querySelectorAll(\"ic-tab\"));\n      this.tabPanels = Array.from(this.host.children).filter(child => child.tagName === \"IC-TAB-PANEL\");\n      this.enabledTabs = this.getEnabledTabs();\n    };\n    // Determines how keyboard navigation is to be handled based on the activation type\n    this.attatchEventListeners = () => {\n      if (this.activationType === \"automatic\") {\n        this.tabGroup.addEventListener(\"keydown\", event => {\n          this.handleKeyBoardNavAutomatic(event);\n        });\n      } else {\n        this.tabGroup.addEventListener(\"keydown\", event => {\n          this.handleKeyBoardNavManual(event);\n        });\n      }\n    };\n    // Determines whether the selected tab is being controlled within the component\n    // or by the user (via selectedTabIndex and onIcTabSelect)\n    this.setControlledMode = () => {\n      if (this.selectedTabIndex !== undefined) {\n        this.controlledMode = true;\n        this.selectedTab = this.selectedTabIndex;\n      }\n    };\n    // Sets the tab that is selected on initial render\n    this.setInitialTab = () => {\n      if (this.controlledMode) {\n        this.selectedTab = this.selectedTabIndex;\n        this.focusedTabIndex = this.selectedTabIndex;\n      } else {\n        const firstEnabledTabIndex = this.tabs.findIndex(tab => tab.tabId === this.enabledTabs[0].tabId);\n        this.selectedTab = firstEnabledTabIndex;\n        this.focusedTabIndex = firstEnabledTabIndex;\n      }\n    };\n    // Passes the selected tab to the tab and tab panel components\n    this.configureTabs = () => {\n      this.enabledTabs.forEach(tab => {\n        tab.selected = tab.tabPosition === this.selectedTab;\n      });\n      this.tabPanels.forEach(tabPanel => {\n        tabPanel.selectedTab = this.tabs[this.selectedTab].tabId;\n      });\n    };\n    this.getEnabledTabs = () => {\n      return Array.from(this.tabs).filter(child => !child.disabled);\n    };\n    this.getIndexOfEnabledTab = allTabsIndex => {\n      return this.enabledTabs.findIndex(tab => tab.tabId === this.tabs[allTabsIndex].tabId);\n    };\n    // Sets focus on tab and selects it\n    this.keyboardSelectTab = enabledTabIndex => {\n      const newIndex = this.tabs.findIndex(tab => tab.tabId === this.enabledTabs[enabledTabIndex].tabId);\n      this.enabledTabs[enabledTabIndex].focus();\n      if (!this.controlledMode) {\n        this.selectedTab = newIndex;\n      } else {\n        this.icTabSelect.emit({\n          tabIndex: newIndex\n        });\n        this.tabSelect.emit({\n          tabIndex: newIndex\n        });\n      }\n    };\n    // Sets focus on tab without selecting it (for manual activation)\n    this.keyboardFocusTab = enabledTabIndex => {\n      const newIndex = this.tabs.findIndex(tab => tab.tabId === this.enabledTabs[enabledTabIndex].tabId);\n      this.enabledTabs[enabledTabIndex].focus();\n      this.focusedTabIndex = newIndex;\n    };\n    this.handleKeyBoardNavAutomatic = event => {\n      const key = event.key;\n      const enabledTabIndex = this.getIndexOfEnabledTab(this.selectedTab);\n      let preventDefault = true;\n      switch (key) {\n        case \"Home\":\n          this.keyboardSelectTab(0);\n          break;\n        case \"End\":\n          this.keyboardSelectTab(this.enabledTabs.length - 1);\n          break;\n        case \"ArrowRight\":\n          if (enabledTabIndex < this.enabledTabs.length - 1) {\n            this.keyboardSelectTab(enabledTabIndex + 1);\n          } else {\n            this.keyboardSelectTab(0);\n          }\n          break;\n        case \"ArrowLeft\":\n          if (enabledTabIndex > 0) {\n            this.keyboardSelectTab(enabledTabIndex - 1);\n          } else {\n            this.keyboardSelectTab(this.enabledTabs.length - 1);\n          }\n          break;\n        default:\n          preventDefault = false;\n      }\n      if (preventDefault) event.preventDefault();\n    };\n    this.handleKeyBoardNavManual = event => {\n      const key = event.key;\n      const enabledTabIndex = this.getIndexOfEnabledTab(this.focusedTabIndex);\n      let preventDefault = true;\n      switch (key) {\n        case \"Home\":\n          this.keyboardFocusTab(0);\n          break;\n        case \"End\":\n          this.keyboardFocusTab(this.enabledTabs.length - 1);\n          break;\n        case \"ArrowRight\":\n          if (enabledTabIndex < this.enabledTabs.length - 1) {\n            this.keyboardFocusTab(enabledTabIndex + 1);\n          } else {\n            this.keyboardFocusTab(0);\n          }\n          break;\n        case \"ArrowLeft\":\n          if (enabledTabIndex > 0) {\n            this.keyboardFocusTab(enabledTabIndex - 1);\n          } else {\n            this.keyboardFocusTab(this.enabledTabs.length - 1);\n          }\n          break;\n        case \"Enter\":\n          this.keyboardSelectTab(this.focusedTabIndex);\n          break;\n        case \" \":\n          this.keyboardSelectTab(this.focusedTabIndex);\n          break;\n        default:\n          preventDefault = false;\n      }\n      if (preventDefault) event.preventDefault();\n    };\n    this.contextId = \"default\";\n    this.activationType = \"automatic\";\n    this.selectedTabIndex = undefined;\n    this.appearance = \"dark\";\n    this.selectedTab = undefined;\n  }\n  updateSelectedTab(newValue) {\n    this.selectedTab = newValue;\n  }\n  tabClickHandler(event) {\n    if (this.selectedTabIndex === undefined && event.detail.contextId === this.contextId) {\n      this.selectedTab = event.detail.position;\n    }\n    this.icTabSelect.emit({\n      tabIndex: event.detail.position\n    });\n    this.tabSelect.emit({\n      tabIndex: event.detail.position\n    });\n    event.stopImmediatePropagation();\n  }\n  tabCreatedHandler(ev) {\n    if (this.tabs && this.tabPanels) {\n      (ev.detail.setFocus ? this.newTabs : this.newTabPanels).push(ev.detail);\n      if (this.newTabs.length === this.newTabPanels.length) {\n        this.tabs.push(...this.newTabs);\n        this.tabPanels.push(...this.newTabPanels);\n        this.enabledTabs = this.getEnabledTabs();\n        this.linkTabs();\n        this.newTabs = [];\n        this.newTabPanels = [];\n      }\n    }\n  }\n  /**\n   * @internal Used to set tab/tab panel IDs when a tab/tab panel has been removed\n   */\n  async tabRemovedHandler(hadFocus) {\n    this.getChildren();\n    this.enabledTabs = this.getEnabledTabs();\n    this.linkTabs();\n    if (this.tabs[this.selectedTab] && this.tabPanels[this.selectedTab]) {\n      this.tabs[this.selectedTab].selected = true;\n      this.tabPanels[this.selectedTab].selectedTab = this.tabs[this.selectedTab].tabId;\n    } else {\n      this.setInitialTab();\n    }\n    if (hadFocus) {\n      this.tabs[this.selectedTab].setFocus();\n    }\n  }\n  componentDidLoad() {\n    this.setControlledMode();\n    this.getChildren();\n    this.linkTabs();\n    this.attatchEventListeners();\n    this.setInitialTab();\n    this.configureTabs();\n  }\n  componentWillUpdate() {\n    this.configureTabs();\n  }\n  disconnectedCallback() {\n    if (this.activationType === \"manual\") {\n      this.tabGroup.removeEventListener(\"keydown\", event => this.handleKeyBoardNavManual(event));\n    } else {\n      this.tabGroup.removeEventListener(\"keydown\", event => this.handleKeyBoardNavAutomatic(event));\n    }\n  }\n  render() {\n    return h(\"slot\", null);\n  }\n  get host() {\n    return getElement(this);\n  }\n  static get watchers() {\n    return {\n      \"selectedTabIndex\": [\"updateSelectedTab\"]\n    };\n  }\n};\nexport { TabContext as ic_tab_context };"],"names":["TabContext","constructor","hostRef","r","this","tabSelect","c","icTabSelect","newTabs","newTabPanels","linkTabs","tabs","forEach","tab","index","tabId","concat","contextId","tabPanelId","shared","contextIdAttr","setAttribute","tabPosition","tabGroup","tabPanels","panelId","appearance","I","getChildren","host","querySelector","Array","from","querySelectorAll","children","filter","child","tagName","enabledTabs","getEnabledTabs","attatchEventListeners","activationType","addEventListener","event","handleKeyBoardNavAutomatic","handleKeyBoardNavManual","setControlledMode","undefined","selectedTabIndex","controlledMode","selectedTab","setInitialTab","focusedTabIndex","firstEnabledTabIndex","findIndex","configureTabs","selected","tabPanel","disabled","getIndexOfEnabledTab","allTabsIndex","keyboardSelectTab","enabledTabIndex","newIndex","focus","emit","tabIndex","keyboardFocusTab","key","preventDefault","length","updateSelectedTab","newValue","tabClickHandler","detail","position","stopImmediatePropagation","tabCreatedHandler","ev","setFocus","push","async","hadFocus","componentDidLoad","componentWillUpdate","disconnectedCallback","removeEventListener","render","h","g","watchers"],"sourceRoot":""}