{
  "app": {
    "config": "./mdx-to-json-settings.json",
    "cwd": "./",
    "deterministicOrder": false,
    "display": true,
    "dist": "public/icds-pages-data.json",
    "filePattern": "**/*.mdx",
    "ignore": "",
    "port": 3001,
    "server": false,
    "src": "./src/content/structured/",
    "name": "icds-guidance-pages",
    "metadata": true,
    "version": "1.6.1"
  },
  "data": [
    {
      "id": "accessibility__coding__alt-textx",
      "contents": "\n## Introduction\n\nUse alt text on images. The `alt` attribute provides alternative text to users who can't see the image.\n\nAlt text should concisely convey the meaning of the image within the context of the page.\n\nIf the image is only decorative or not needed because it will be repeated in adjacent text, include an empty `alt` attribute, `alt=\"\"`.\n\n```html\n<img src=\"logo.jpg\" alt=\"Design System logo\" />\n```\n\nUsing alt text benefits:\n\n- Those who rely on screen readers as it will read the alt text.\n- Those who have a slow connection; the alt text will be displayed in place of an image when it can't be loaded.\n\nThe `alt` attribute can be used on `area`, `img`, and `input` elements.\n\n## When it goes wrong\n\nA screen reader will announce the presence of the image along with any `alt` text.\n\nIf there is no `alt` attribute, the screen reader only announces the presence of the image, although some screen readers may try to add context by reading the file name.\n\nA screen reader will not announce images with an empty `alt` attribute.\n\n## Alternative images\n\nAlternatives to the `<img>` element are Scalable Vector Graphics (SVG) markup and the `<canvas>` element. They are often used for interactive images.\n\nFavour SVG over `<canvas>` because the `<canvas>` element is not accessible to assistive technologies. It's not rendered in the DOM and doesn't have internal accessibility semantics like SVG.\n\nSVG is also scalable for those who need magnification.\n\n## Best practice and WCAG\n\nAlt text is mentioned in most HTML best practice articles and will help meet WCAG success criteria [1.1.1 non-text content](https://www.w3.org/WAI/WCAG21/quickref/#non-text-content) in the sufficient techniques:\n\n- [H37: using alt attributes on img elements](https://www.w3.org/WAI/WCAG21/Techniques/html/H37.html).\n- [G196: using a text alternative on one item within a group of images that describes all items in the group](https://www.w3.org/WAI/WCAG21/Techniques/general/G196.html).\n",
      "path": "/accessibility/coding/alt-text",
      "navPriority": 3,
      "date": "2022-11-15",
      "title": "Alt text",
      "subTitle": "Follow our accessibility tips for alt text.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/coding/alt-text.mdx",
      "meta": {
        "relativePath": "accessibility/coding/alt-text.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 2259,
        "formattedSize": "2.2 KB"
      }
    },
    {
      "id": "accessibility__coding__ariax",
      "contents": "\n## Introduction\n\nFavour native HTML over ARIA.\n\nThe Web Accessibility Initiative's [accessible rich internet applications specification](https://www.w3.org/TR/wai-aria/) (WAI-ARIA, or just ARIA) is good for bridging areas with accessibility issues that can't be managed with native HTML.\n\nARIA does not affect how a page is visually presented. It only changes the information used by assistive technologies.\n\n### The first rule or ARIA\n\nThe first rule of [using ARIA](https://www.w3.org/TR/using-aria/) is to favour using native HTML instead of re-purposing an element by adding an ARIA role, state or property to make it accessible.\n\nBy using the semantic HTML you not only get an implicit ARIA role, so the browser knows how to interpret the element, but also other standard functionality such as focus, keyboard and mouse support.\n\n### Time to use ARIA\n\nThe main situation where ARIA can improve the usability even when semantic HTML has been used is with [live regions](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions).\n\nLive regions mean that any dynamic changes within it will be read out to assistive technologies useful to identify errors or of a status change, for example.\n\nTo make an element a live region, use the `aria-live` attribute or a specialised live region `role` such as `role=”alert”`.\n\nIf you have to do add ARIA to unsemantic HTML remember it’s not just about applying the right `role`, you also need to ensure all the other standard functionality is also applied including focus, keyboard and mouse support.\n\n### Learn more about ARIA\n\nTo learn more about ARIA:\n\n- Deque has an easily digestible 3 part blog post for the [ARIA spec for the uninitiated](https://www.deque.com/?s=ARIA%20Spec%20for%20the%20Uninitiated&post_type=post).\n- Mozilla also covers [ARIA](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) extensively with tutorials and a range of documentation.\n- Google's Web Fundamentals gives a thorough [introduction to ARIA](https://developers.google.com/web/fundamentals/accessibility/semantics-aria).\n- W3’s [using ARIA](https://www.w3.org/TR/using-aria/) gives more guidance on how to use ARIA properly including the all five rules of ARIA.\n\n## When it goes wrong\n\nUnderstanding when and how to use ARIA is key to improving the experience to assistive technology users. Even using ARIA where it’s not needed on semantic HTML can cause undesired effects on assistive technology.\n\nDeque’s [WAI-ARIA: Top 6 Mistakes to avoid](https://www.deque.com/blog/wai-aria-top-6-mistakes-to-avoid/) states that “misuse of ARIA creates a more inaccessible experience than one without ARIA”.\n\n## Best practice and WCAG\n\nIt's very common to see ARIA used extensively in libraries and frameworks. Don’t assume this is best practice or that they’ve been implemented correctly just because they use ARIA.\n\nThere are a number of [ARIA techniques](https://www.w3.org/WAI/WCAG21/Techniques/#aria) that could be used to help meet a range of different WCAG success criteria including [1.1.1 non-text content](https://www.w3.org/WAI/WCAG21/quickref/#non-text-content), [4.1.2 name, role, value](https://www.w3.org/WAI/WCAG21/quickref/#name-role-value) and [4.1.3 status messages](https://www.w3.org/WAI/WCAG21/quickref/#status-messages).\n",
      "path": "/accessibility/coding/aria",
      "navPriority": 10,
      "date": "2022-11-15",
      "title": "ARIA",
      "subTitle": "Follow our accessibility tips for ARIA.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/coding/aria.mdx",
      "meta": {
        "relativePath": "accessibility/coding/aria.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 3588,
        "formattedSize": "3.5 KB"
      }
    },
    {
      "id": "accessibility__coding__cssx",
      "contents": "\n## Introduction\n\nWrite CSS in a way that can be overridden by the user via their browser.\n\nDon't use inline styles; keep CSS separate to the HTML. This can be a separate CSS stylesheet or via other techniques like CSS-in-JS.\n\nDecoupling the styling will create more flexibility as the visual styling can be updated without touching the HTML.\n\nDon't use `!important` on a style declaration as this overrides any other declarations. You can read more information from Mozilla on [importance exception](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#The_!important_exception).\n\n## When it goes wrong\n\nBoth inline styles and `!important` will override user-defined styles that can be set using browsers and assistive technologies.\n\nAssistive technologies and users may change browser default styles to improve accessibility. For example users with visual impairments or dyslexia may increase the font size or override colours.\n\n## Best practice and WCAG\n\nInline styles is mentioned in half of the HMTL best practice articles and will help meet [guideline 4.1 – compatible](https://www.w3.org/WAI/WCAG21/quickref/#compatible).\n\nWhilst CSS is mentioned in a number of advisory techniques for a few success criteria, there are currently none relating specifically to ensuring CSS can be overridden by the user.\n",
      "path": "/accessibility/coding/css",
      "navPriority": 9,
      "date": "2022-11-15",
      "title": "CSS and inline styles",
      "subTitle": "Follow our accessibility tips for CSS.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/coding/css.mdx",
      "meta": {
        "relativePath": "accessibility/coding/css.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 1600,
        "formattedSize": "1.6 KB"
      }
    },
    {
      "id": "accessibility__coding__doctypex",
      "contents": "\n## Introduction\n\nAll HTML documents must start with a `<!DOCTYPE>` declaration above the `<html>` tag.\n\nThis tells the browser how to render the HTML, as in this example:\n\n```html\n<!DOCTYPE html>\n```\n\nThis is the HTML5 doctype but W3C provides information on [choosing the right doctype](https://www.w3.org/wiki/Doctypes_and_markup_styles).\n\n## When it goes wrong\n\nIf no valid `<!DOCTYPE>` is declared, the browser switches to [quirks mode](https://developer.mozilla.org/en-US/docs/Web/HTML/Quirks_Mode_and_Standards_Mode). This means it emulates non-standard behaviour of deprecated browsers.\n\nIn this case, elements from the HTML5 specification may not parse or render properly. This can cause issues for people who use assistive technologies.\n\n## Best practice and WCAG\n\nDeclaring a doctype is mentioned in most HMTL best practice articles and will help meet WCAG success criteria [4.1.1 parsing](https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0&showtechniques=411#parsing) in the sufficient technique [G134: validating web pages](https://www.w3.org/WAI/WCAG21/Techniques/general/G134.html).\n",
      "path": "/accessibility/coding/doctype",
      "navPriority": 1,
      "date": "2022-11-15",
      "title": "Doctypes",
      "subTitle": "Follow our accessibility tips for doctypes.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/documenting/index.mdx",
      "meta": {
        "relativePath": "accessibility/coding/doctype.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 1382,
        "formattedSize": "1.3 KB"
      }
    },
    {
      "id": "accessibility__coding__document-structurex",
      "contents": "\n## Introduction\n\nUse semantic HTML Elements for document structure. Three semantic elements are used to give overall document structure:\n\n- `<html>` is the root of an HTML document and contains all elements except the `<!DOCTYPE>` declaration.\n- `<head>` is the container for metadata such as document title, styles and scripts. The `<head>` element is the first element in the `<html>` element before the `<body>`.\n- `<body>` defines the body or content of the HTML document. There can only be one `<body>` in the document.\n\nThese elements ensure consistency for how a page is displayed on every browser.\n\nThe following example shows the semantic elements for document structure:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Example accurate and meaningful title</title>\n  </head>\n  <body>\n    <h1>Example content heading</h1>\n    <p>Example content paragraph</p>\n  </body>\n</html>\n```\n\n## When it goes wrong\n\nNot using the document structure elements accordingly may mean the page is not correctly rendered in every browser.\n\nOmitting the `<html>`, `<head>` and `<body>` is allowed under certain conditions in the [HTML spec](https://www.w3.org/TR/2011/WD-html5-20110525/syntax.html#optional-tags).\n\n## Best practice and WCAG\n\nDocument structure is explicitly mentioned in a some of HTML best practice articles and whilst it does not specifically help meet individual WCAG success criteria it's crucial to [4.1.1 parsing](https://www.w3.org/WAI/WCAG21/quickref/#parsing).\n\nAll relevant HTML code examples in the WCAG Techniques use the proper document structure.\n",
      "path": "/accessibility/coding/document-structure",
      "navPriority": 5,
      "date": "2022-11-15",
      "title": "Document structure",
      "subTitle": "Follow our accessibility tips for document structure.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/coding/document-structure.mdx",
      "meta": {
        "relativePath": "accessibility/coding/document-structure.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 1894,
        "formattedSize": "1.8 KB"
      }
    },
    {
      "id": "accessibility__coding__headingsx",
      "contents": "\n## Introduction\n\nUse HTML headings `<h1>`, `<h2>`, `<h3>`, `<h4>`, `<h5>` and `<h6>` properly.\n\nHeadings are hierarchical so `<h1>` is the most important then `<h2>` through to `<h6>` being the least important. Use one `<h1>` per page.\n\nHeadings at the same level or higher start a new section, whilst headings at a lower level start a subsection. Don't skip heading levels.\n\nIf the styling of a heading doesn't look right visually, for example too big or bold, style it with CSS but always use the correct semantic heading.\n\nThe text for a heading should be descriptive, meaningful and unique on the page.\n\n## When it goes wrong\n\nWhen semantic HTML elements for headings aren't used, the page has no structure or definition available to assistive technologies.\n\nHeadings provide navigation landmarks which assistive technologies can navigate over to find the area they want on the page.\n\nScreen readers can navigate and jump to a heading, in the same way as a sighted user would scan for the heading they need.\n\n## Best practice and WCAG\n\nHeadings are mentioned in half of the HMTL best practice articles and will help meet five different WCAG success criteria.\n\n[1.3.1 info and relationships](https://www.w3.org/WAI/WCAG21/quickref/#info-and-relationships) has the sufficient technique:\n\n- [H42 using h1-h6 to identify headings](https://www.w3.org/WAI/WCAG21/Techniques/html/H42).\n- [G141 organizing a page using headings](https://www.w3.org/WAI/WCAG21/Techniques/general/G141.html).\n- [G141](https://www.w3.org/WAI/WCAG21/Techniques/general/G141.html) is also a sufficient technique for the AAA success criteria [2.4.10 section headings](https://www.w3.org/WAI/WCAG21/quickref/#section-headings).\n\n[2.4.1 bypass blocks](https://www.w3.org/WAI/WCAG21/quickref/#bypass-blocks) has the sufficient technique:\n\n- [H69 providing heading elements at the beginning of each section of content](https://www.w3.org/WAI/WCAG21/Techniques/html/H69.html)\n\n[2.4.4 link purpose (in context)](https://www.w3.org/WAI/WCAG21/quickref/#link-purpose-in-context) has the advisory technique:\n\n- [H80 identifying the purpose of a link using link text combined with the preceding heading element](https://www.w3.org/WAI/WCAG21/Techniques/html/H80.html)\n\n[2.4.6 headings and labels](https://www.w3.org/WAI/WCAG21/quickref/#headings-and-labels) has the sufficient technique:\n\n- [G130 providing descriptive headings](https://www.w3.org/WAI/WCAG21/Techniques/general/G130.html).\n",
      "path": "/accessibility/coding/headings",
      "navPriority": 7,
      "date": "2022-11-15",
      "title": "Headings",
      "subTitle": "Follow our accessibility tips for headings.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/coding/headings.mdx",
      "meta": {
        "relativePath": "accessibility/coding/headings.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 2735,
        "formattedSize": "2.7 KB"
      }
    },
    {
      "id": "accessibility__coding__indexx",
      "contents": "\n## Introduction\n\nYou should always write and [test](/accessibility/testing/) accessible code, even in prototypes.\n\nFixing accessibility issues later on can be very costly in both time and effort. Not considering accessibility when coding will increase your technical debt, and make it harder for people to use your app or service.\n\n## Learn web fundamentals\n\nAll front-end developers should build a good foundation of web fundamentals. The most important language to get right is HTML.\n\nCSS and JavaScript should be learnt before composite libraries or frameworks like StencilJS and React.\n\nCommon accessibility issues are avoided by following HTML, CSS and JavaScript best practices.\n\n## Test whilst developing\n\nSpotting and fixing accessibility issues early saves time later in the development lifecycle.\n\nUse [automated browser testing tools](/accessibility/testing/automated-testing/#browser-testing) whilst developing, in code editors, linting and CI/CD workflows.\n\n[Keyboard-only testing](/accessibility/testing/manual-testing/#keyboard-only-testing) should be done as often as possible, especially on significant changes.\n\nPlanning for [full manual testing](/accessibility/testing/manual-testing/#full-manual-accessibility-testing) will help address any [limitations of automated accessibility testing](/accessibility/testing/automated-testing-limitation).\n\n## Using third-party libraries and frameworks\n\nThe Design System and its UI Kit includes automated, manual and user-led accessibility testing. We are confident our components and patterns exceed minimum accessibility standards.\n\nCheck whether other third-party external libraries you use have been tested. Consider if the vendor or community is performing enough accessibility testing.\n\n## References\n\nThe content in this section has been adapted from the following resources:\n\n- [HTML Style Guide and Coding Conventions](https://www.w3schools.com/html/html5_syntax.asp). W3Schools. Accessed 10 November 2021.\n- [20 HTML Best Practices You Should Follow](https://www.webfx.com/blog/web-design/20-html-best-practices-you-should-follow). WebFX. Accessed 10 November 2021.\n- [10 HTML best practices for beginners](https://blog.tbhcreative.com/2015/08/10-best-practices-in-html.html). TBH Creative. Accessed 10 November 2021.\n- [15 HTML Best Practices That Developers Should Know](https://medium.com/oceanize-geeks/15-html-best-practices-that-developers-should-know-cb02473d293f). Medium. Accessed 10 November 2021.\n- [10 Best Practices for HTML](https://medium.com/swlh/10-best-practices-for-html-542fb923b93). Medium. Accessed 10 November 2021.\n- [30 HTML Best Practices for Beginners](https://code.tutsplus.com/tutorials/30-html-best-practices-for-beginners--net-4957). Envato Tuts Plus. Accessed 10 November 2021.\n- [HTML Best Practices](https://github.com/hail2u/html-best-practices). GitHub. Accessed 10 November 2021.\n- [Writing Your Best Code, Learn to Code HTML & CSS](https://learn.shayhowe.com/html-css/writing-your-best-code). Shay Howe. Accessed 10 November 2021.\n- [30 Best HTML5 Practices](https://www.themelocation.com/best-html5-practices/), Themelocation. Accessed 10 November 2021.\n- [Best Practices in HTML that Web Developers Should Adopt](https://www.aspirationhosting.com/best-practices/). Aspiration Hosting. Accessed 10 November 2021.\n- [Allow end-user styling overrides](https://dev.to/alvaromontoro/allow-end-user-styling-overrides-2467). DEV.to. Accessed 10 November 2021.\n",
      "path": "/accessibility/coding",
      "navPriority": 4,
      "date": "2022-11-15",
      "title": "Coding for accessibility",
      "subTitle": "This section introduces some tips for making sure you code with accessibility best practice.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/coding/index.mdx",
      "meta": {
        "relativePath": "accessibility/coding/index.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 3797,
        "formattedSize": "3.7 KB"
      }
    },
    {
      "id": "accessibility__coding__semantic-htmlx",
      "contents": "\n## Introduction\n\nUse semantic HTML elements.\n\nMost elements are semantic such as `<form>` and `<table>` which clearly define its content. However, non-semantic elements such as `<div>` and `<span>` are often overused. These don't tell us about the meaning of the content.\n\nUsing correct semantic HTML elements to make web content more accessible.\n\nLearn more about [HTML elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element), particularly `<nav>`, `<section>` and `role`. They're mentioned in [Document structure](/accessibility/coding/document-structure) and [Semantic layout](/accessibility/coding/semantic-layout)\n\n## When it goes wrong\n\nWhen semantic elements aren't used, the page has no structure or definition available to assistive technologies.\n\nWithout structure or definition, to assistive technologies it's like viewing all the words on a page together in a single paragraph with the same styling, creating a wall of text.\n\nWith semantic elements assistive technologies can navigate over a page using these semantic elements, for example screen readers can jump through headings to find the section they want to read.\n\n## Best practice and WCAG\n\nSemantic elements are mentioned in some form in most of HTML best practice articles and will help meet many WCAG success criteria.\n\nFor [1.3.1 info and relationships](https://www.w3.org/WAI/WCAG21/quickref/#info-and-relationships), semantic elements and markup are referenced in many of the sufficient techniques including:\n\n- [G115: using semantic elements to mark up structure](https://www.w3.org/WAI/WCAG21/Techniques/general/G115.html).\n- [H49: using semantic markup to mark emphasized or special text](https://www.w3.org/WAI/WCAG21/Techniques/html/H49.html).\n\nIn most of the WCAG success criteria for [guideline 2.4 – navigable](https://www.w3.org/WAI/WCAG21/quickref/#navigable) semantic elements such as heading, button, link, label elements are referenced specifically or used in examples in sufficient techniques.\n\nThe sufficient technique [88: using HTML according to spec](https://www.w3.org/WAI/WCAG21/Techniques/html/H88) is referenced in [4.1.1 parsing](https://www.w3.org/WAI/WCAG21/quickref/#parsing) and [4.1.2 name, role, value](https://www.w3.org/WAI/WCAG21/quickref/#name-role-value).\n",
      "path": "/accessibility/coding/semantic-html",
      "navPriority": 4,
      "date": "2022-11-15",
      "title": "Semantic HTML",
      "subTitle": "Follow our accessibility tips for semantic HTML.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/coding/semantic-html.mdx",
      "meta": {
        "relativePath": "accessibility/coding/semantic-html.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 2582,
        "formattedSize": "2.5 KB"
      }
    },
    {
      "id": "accessibility__coding__semantic-layoutx",
      "contents": "\n## Introduction\n\nUse semantic HTML elements over non-semantic elements for layouts, such as `<header>` instead of `<div id=\"header\">`.\n\nHTML5 introduced [new elements](https://www.w3.org/TR/html5-diff/#new-elements) to improve structure, including:\n\n- `<main>` represents the main content of the body of a document or app.\n- `<header>` represents a group of introductory or navigational aids.\n- `<footer>` represents a footer for a section and can contain information about the author, copyright information, etc.\n- `<nav>` represents a section of the document intended for navigation.\n\n## When it goes wrong\n\nWhen semantic HTML elements for layout aren't used, the page has no structure or definition available to assistive technologies.\n\nThese layout elements provide navigation landmarks which assistive technologies can navigate over to find the area they want on the page. These elements also section content into their defined elements.\n\n## Best practice and WCAG\n\nSome HMTL best practice references continue to recommended the `<div>` tag for layout. Best practices evolve and when the appropriate newer semantic elements are adopted.\n\n[1.3.1 info and relationships](https://www.w3.org/WAI/WCAG21/quickref/#info-and-relationships) is about using the right semantic element at the right time has the sufficient technique [H97: grouping related links using the nav element](https://www.w3.org/WAI/WCAG21/Techniques/html/H97.html) and whilst it does not specifically help meet individual WCAG success criteria it's crucial to [4.1.1 parsing](https://www.w3.org/WAI/WCAG21/quickref/#parsing).\n\nAll relevant HTML code examples in the WCAG Techniques use the proper document structure.\n",
      "path": "/accessibility/coding/semantic-layout",
      "navPriority": 6,
      "date": "2022-11-15",
      "title": "Semantic layout",
      "subTitle": "Follow our accessibility tips for layout.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/coding/semantic-layout.mdx",
      "meta": {
        "relativePath": "accessibility/coding/semantic-layout.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 1988,
        "formattedSize": "1.9 KB"
      }
    },
    {
      "id": "accessibility__coding__tablesx",
      "contents": "\n## Introduction\n\nUse HTML table elements only for tabular data.\n\nFor ambiguous data or when there are multiple columns, the `scope` attribute can be included in the `<th>` and set to `row` or `col` to denote that a header applies to the entire row or column, respectively.\n\nUse a `<caption>` element to describe, in text, what the table shows. Some apps and services may auto-generate a summary description of data. You can hide this using CSS if you don't want it visible to sighted users.\n\nThe HTML example for a table with header cells in the top row and first column:\n\n```html\n<table>\n  <caption>\n    Example table with four columns and three rows\n  </caption>\n  <tr>\n    <th>Table</th>\n    <th scope=\"col\">Column Header A</th>\n    <th scope=\"col\">Column Header B</th>\n    <th scope=\"col\">Column Header C</th>\n  </tr>\n  <tr>\n    <th scope=\"row\">Row Header 1</th>\n    <td>data cell A1</td>\n    <td>data cell A2</td>\n    <td>data cell A3</td>\n  </tr>\n  <tr>\n    <th scope=\"row\">Row Header 2</th>\n    <td>data cell B1</td>\n    <td>data cell B2</td>\n    <td>data cell B3</td>\n  </tr>\n</table>\n```\n\n### Example\n\n<table>\n  <caption>Example table with four columns and three rows</caption>\n  <tr>\n    <th>Table</th>\n    <th scope=\"col\">Column Header A</th>\n    <th scope=\"col\">Column Header B</th>\n    <th scope=\"col\">Column Header C</th>\n  </tr>\n  <tr>\n    <th scope=\"row\">Row Header 1</th>\n    <td>data cell A1</td>\n    <td>data cell A2</td>\n    <td>data cell A3</td>\n  </tr>\n  <tr>\n    <th scope=\"row\">Row Header 2</th>\n    <td>data cell B1</td>\n    <td>data cell B2</td>\n    <td>data cell B3</td>\n  </tr>\n</table>\n\n## When it goes wrong\n\nIf no table HTML elements were used, then there would be no structure or definition of the table available to assistive technologies.\n\nEven missing table headers in a `<table>` means assistive technologies can't associate data cells with the headers. Visual cues aren't enough to make a table inclusive.\n\nHistorically tables were incorrectly used for layouts which would give assistive technology users a confusing experience. Don't use tables for any layout needs.\n\nMany screen readers will summarise the size of the table when it arrives at one, so our table example would say “Table with 4 columns and 3 rows”.\n\n## Best practice and WCAG\n\nFollow these WCAG criteria for tables:\n\n- [F46: failure of success criterion 1.3.1 due to using `th` elements, layout tables](https://www.w3.org/WAI/WCAG21/Techniques/failures/F46.html).\n\nTables are mentioned in a couple of the HMTL best practice articles:\n\n- [1.3.1 info and relationships](https://www.w3.org/WAI/WCAG21/quickref/#info-and-relationships).\n- [H51: using table markup to present tabular information](https://www.w3.org/WAI/WCAG21/Techniques/html/H51.html).\n- [H73: using the summary attribute of the table element to give an overview of data tables](https://www.w3.org/WAI/WCAG21/Techniques/html/H73.html).\n- [F90: failure of success criterion 1.3.1 for incorrectly associating table headers and content via the headers and id attributes](https://www.w3.org/WAI/WCAG21/Techniques/failures/F90.html).\n- [F91: failure of success criterion 1.3.1 for not correctly marking up table headers](https://www.w3.org/WAI/WCAG21/Techniques/failures/F91.html).\n- [F49: failure of success criterion 1.3.2 due to using an HTML layout table that does not make sense when linearised](https://www.w3.org/WAI/WCAG21/Techniques/failures/F49.html) - which covers using tables for layouts.\n",
      "path": "/accessibility/coding/tables",
      "navPriority": 8,
      "date": "2022-11-15",
      "title": "Tables",
      "subTitle": "Follow our accessibility tips for tables.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/coding/tables.mdx",
      "meta": {
        "relativePath": "accessibility/coding/tables.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 3742,
        "formattedSize": "3.7 KB"
      }
    },
    {
      "id": "accessibility__coding__titlex",
      "contents": "\nimport { IcAlert } from \"@ukic/react\";\n\n## Introduction\n\nEach page in a website should have a unique title. Make the `<title>` element as accurate and meaningful as possible.\n\nThe title appears in the browser toolbar, search-engine results and default bookmark/favourites name.\n\nThis example shows two different titles from different Design System pages:\n\n```html\n<!-- https://design.sis.gov.uk/accessibility/coding -->\n<title>Coding for accessibility - Intelligence Community Design System</title>\n\n<!-- https://design.sis.gov.uk/accessibility/coding/title -->\n<title>Titles - Intelligence Community Design System</title>\n```\n\n<IcAlert\n  heading=\"Single Page Apps (SPAs)\"\n  variant=\"warning\"\n  message=\"In single-page apps, make sure you dynamically update the page title.\"\n/>\n\n## When it goes wrong\n\nIf titles aren't unique and descriptive users must read the content to understand where they are. This makes your app less usable for those using assistive technologies like screen readers.\n\n## Best practice and WCAG\n\nUnique titles is mentioned in many HMTL best practice articles and will help meet WCAG success criteria [2.4.2 page titled](https://www.w3.org/WAI/WCAG21/quickref/?showtechniques=242#page-titled) in the sufficient technique [G88: providing descriptive titles for web pages](https://www.w3.org/WAI/WCAG21/Techniques/general/G88.html).\n",
      "path": "/accessibility/coding/title",
      "navPriority": 2,
      "date": "2022-11-15",
      "title": "Titles",
      "subTitle": "Follow our accessibility tips for titles.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/coding/title.mdx",
      "meta": {
        "relativePath": "accessibility/coding/title.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 1626,
        "formattedSize": "1.6 KB"
      }
    },
    {
      "id": "accessibility__definitionx",
      "contents": "\n## What accessibility means\n\nWe use the term ‘accessible’ to mean that someone isn’t excluded from something based on experiencing a disability, impairment or because they think differently.\n\nThe Design System is built around the [Social Model of Disability](https://www.scope.org.uk/about-us/social-model-of-disability/)<sup id=\"ref-1\"><a href=\"#fn-1\">1</a></sup>.\n\nIt states that people are disabled by barriers in society rather than being disabled by a medical definition, impairment or neurodiversity they experience.\n\nThis model recognises that, with sensible consideration, we can empower people to use our technology in a way that works for them.\n\n## There are a wide range of needs\n\nDon't consider those with 'accessibility needs’ as a defined group of people with 'disability and impairments'.\n\nWhen we talk about accessible apps and services, most people think initially of visually impaired or blind users who might use screen readers.\n\nIn fact, we need to consider a lot of needs people may have, like motor impairments and neurological diversity. Good (and accessible) design considers implications of the full spectrum of diversity.\n\n## Accessible is better for everyone\n\nAccessible apps are always more usable for people who don't have accessibility needs. If you become skilled at considering accessibility, you'll always end up with a better product.\n\nSometimes apps and services are designed for the 'perfect user'<sup id=\"ref-2\"><a href=\"#fn-2\">2</a></sup> or only the users we have access to. These might be usable, but that doesn't mean they're accessible.\n\nSomething can be accessible to some people while being inaccessible to others. An app with a real-time data table might work really well for sighted users and those who use a screen reader.\n\nHowever, if someone has a different reading comprehension or has anxiety from information overload, they may experience significant issues if table rows are rapidly changing or flashing.\n\n## References\n\n1. <a\n     href=\"https://www.scope.org.uk/about-us/social-model-of-disability/\"\n     id=\"fn-1\"\n   >\n     Social model of disability\n   </a>\n   .<i> Scope</i>. Accessed 5 November 2022. <a href=\"#ref-1\">\n     Back to content\n   </a>\n2. <a\n     href=\"https://accessibility.blog.gov.uk/2016/05/16/what-we-mean-when-we-talk-about-accessibility-2/\"\n     id=\"fn-2\"\n   >\n     Accessibility in government. What we mean when we talk about accessibility\n   </a>\n   .<i> Alistair Duggin, UK Government Digital Service</i>. 16 May 2016. Accessed\n   5 November 2022. <a href=\"#ref-2\">Back to content</a>\n",
      "path": "/accessibility/introduction/definition",
      "navPriority": 1,
      "date": "2022-11-15",
      "title": "Defining accessibility",
      "subTitle": "The word 'accessibility' can mean a lot of different things.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/definition.mdx",
      "meta": {
        "relativePath": "accessibility/definition.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 2889,
        "formattedSize": "2.8 KB"
      }
    },
    {
      "id": "accessibility__discussingx",
      "contents": "\n## Discussing user needs\n\nIf done in the right way, having a discussion upfront about people's needs can be very valuable.\n\nBeing proactive, in a positive manner, will build up a good relationship with your users and ensure you're delivering the best experience possible.\n\nIt can be hard to know who your users are. It's important not to disregard accessibility because you 'can't find anyone with accessibility needs'.\n\nOnly test your apps with real users [when you've completed your own accessibility testing](/accessibility/testing#testing-with-real-people). This means you don't waste people's time, and you can get more valuable usability insights.\n\n## Disclosure\n\nDisclosing a disability or impairment is an individual decision, and there is no obligation for anybody to do so. The point at which an individual discloses a disability or impairment (if at all) varies from case to case.\n\nThere are many reasons why someone may or may not choose to disclose. Reasons for non-disclosure include a fear that it will disadvantage them if disclosed. Some may have a disability or impairment they have not yet discovered and so wouldn't know there was a need for disclosure.\n\nThere are also many reasons why disclosing a disability is a positive action that will empower, protect and assist someone in the workplace.\n\nAwareness of someone's needs may mean that provision can be made for reasonable adjustments. The person and their colleagues may feel more comfortable to have open conversations about their requirements. This can lead to the person facing fewer barriers to employment and training opportunities.\n\nDiscussing someone's needs should be handled sensitively and on a one-to-one basis.\n",
      "path": "/accessibility/introduction/discussing",
      "navPriority": 2,
      "date": "2022-11-15",
      "title": "Talking about disability and needs",
      "subTitle": "How to talk about disability and needs.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/discussing.mdx",
      "meta": {
        "relativePath": "accessibility/discussing.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 2005,
        "formattedSize": "2.0 KB"
      }
    },
    {
      "id": "accessibility__documenting__accessibility-statements-guidancex",
      "contents": "\nimport { IcAlert } from \"@ukic/react\";\n\n## How to fill in an Accessibility Statement\n\nThis page tells you how to fill in an [Accessibility Statement](/accessibility/documenting/accessibility-statements) if you work for MI6, MI5, GCHQ, or one of our partners. [Templates are available](/accessibility/documenting/accessibility-statements#the-template).\n\nThe numbered headings correspond to the sections you will find within the Accessibility Statement.\n\nIt's based on the [sample accessibility statement](https://www.gov.uk/government/publications/sample-accessibility-statement/sample-accessibility-statement-for-a-fictional-public-sector-website) published by the Government Digital Service (GDS).\n\nMost of it's legally required and needs to be published to comply with the organisation's accessibility requirements. Don't change the order of sections or wording unless this guidance tells you to.\n\nDon't use the statement to justify why an app is inaccessible, other than in the \"Disproportionate Burden\" section.\n\nYou can also [download this guidance (DOCX)](/accessibility-statement-guidance.docx).\n\n### Where to publish\n\nThe [when to create and update](/accessibility/documenting/when-to-create-and-update) page explains where to publish the completed Accessibility Statement.\n\n### How to use the template\n\nYou may need to make minor changes such as changing between singular and plural or 'app to service' but don't re-order, change titles or remove anything unless this guidance tells you to.\n\nKeep the language simple. This statement needs to be understandable for everyone in the department, it shouldn't be technical.\n\nUpdate everything in square brackets (between '['and ']') - remove the square brackets.\n\nIt has examples and sample wording and guidance. Remove anything marked as 'EXAMPLE'.\n\n## 1. Overview\n\nThis section is used to highlight how accessible the app is. The sample bullet points aren't a checklist but will be true when the app is compliant to EN 301 549 or the Web Content Accessibility Guidelines (WCAG) Level A and AA criteria.\n\nIf the app doesn't have user guides, remove that statement.\n\nKeep this section up to date if part or most of the app doesn't comply and the statements in the bullet points aren't true.\n\nIf the app is fully or partly made up of third-party software, note this here. Reference the conformance level that the vendor provides. If the vendor doesn't provide accessibility documentation, request it from them.\n\n## 2. How accessible this app is\n\n<IcAlert\n  message=\"Delete the examples in the template before publishing\"\n  variant=\"info\"\n/>\n\nThis section is used to summarise any accessibility problems in the app. Document workarounds to inaccessible content or features.\nConsider that a user of the app and think about what issues they would want to know about.\n\nProvide full detail of the accessibility problem later under 'non-accessible content'.\n\nIf the app is compliant and there's no accessibility problems, include the sentence:\n_“We're confident that this app is accessible.”_\n\n## 3. What to do if you can't access parts of this app\n\nThis section is used to explain alternatives and workarounds for accessibility problems that you are aware of.\n\nIt's not possible to predict all possible needs someone might have when using your app. The app must have a process to deal with these requests even if the app is compliant to the relevant standard.\n\n**Don't** use this section to justify why something is not accessible.\n\nIf the app is corporately supported, it's likely that accessibility adjustments would be requested through a Service Desk. If the app is not corporately supported, the development team must be able to deal with these requests.\n\n## 4. Reporting accessibility problems with this app\n\nDon't remove this section. You always need to provide a way for users to report a problem with your app, even if it's public facing.\n\nIf this is a commercial app or part of it relies on a third-party vendor, be clear how this might impact the time it takes to fix accessibility problems.\n\n## 5. Enforcement procedure\n\nThis section is used to make clear how the accessibility of the app can be challenged.\n\nRemove the second paragraph if the statement will be published publicly online.\n\n## 6. Contacting us\n\nThis section is used to explain how people can contact the team that looks after the app. Change this section depending on your app and team.\n\nOnly reference the Service Desk if you've agreed that support route.\n\nWhere possible, the contact details you provide should point to a team or a group. This avoids a single point of failure if your point of contact were to leave their role.\n\n## 7. Technical information about this app's accessibility\n\nThis section is used to make a formal statement about how accessible the app is.\n\nThe form of words here are legally required, so **don't change it** except for adding in the name of Department.\n\n### 7(a). Compliance Status\n\nThere's a legally required way of expressing the compliance status of your app, so don't change any words. Delete the statements that don't apply.\n\n- If the app meets **all** Level A and Level AA success criteria of WCAG Level 2.1 then it's 'fully compliant'.\n- If the app meets **more than half** of the Level A and Level AA success criteria of WCAG Level 2.1 then it's 'partially compliant'.\n- If the app meets **less than half** of the Level A and Level AA success criteria of WCAG Level 2.1 then it's 'not compliant'.\n\nIf your app, service, or product needs to meet the EN 301 549 standard, then use the above thresholds and insert the following sentence:\n_“This [product/website/app/service] is [fully/partially/not] compliant to the EN 301 549 standards.”_\n\nIt's likely that the WCAG standards also apply to EN 301 549 products, so retain the appropriate WCAG statement.\n\n## 8. Non-accessible content\n\nThis section is used to fully explain accessibility problems in the app.\n\nIf no section applies, you can delete this section. This section must be added later if accessibility problems are found because overall compliance will have changed.\n\n**Don't change or remove** the headings in this section. You can add subheadings to better format the lists of problems if needed.\n\n### 8(a). Non-compliance with the accessibility regulations\n\n<IcAlert\n  message=\"Delete the example in the template before publishing\"\n  variant=\"info\"\n/>\n\nThis section is used to list accessibility problems in your apps that need to be fixed.\n\nFor each accessibility problem, list:\n\n- A description of the accessibility problem.\n- The EN 301 549 or WCAG 2.1 success criteria that are partially or not supported because of the accessibility problem.\n- When the problem will be fixed. You must fix accessibility problems **within a defined timeframe.**\n\nDon't mention problems covered by a Disproportionate Burden or Regulation exemption.\n\nIf there are no accessibility problems, include the following sentence, amending as appropriate:\n_“There are no non-compliances with the accessibility regulations other than those in “Disproportionate burden\"/\"Content that's not within the scope of the accessibility regulations\"\"_\n\n### 8(b). Disproportionate burden\n\n<IcAlert\n  message=\"Delete the example in the template before publishing\"\n  variant=\"info\"\n/>\n\nThis section is used if the app has an approved disproportionate burden assessment. Disproportionate burden assessments must always be approved by local accessibility owners.\n\nA disproportionate burden is a claim made when the Department can't reasonably fix or make the app accessible.\n\nIf the app does not need a disproportionate burden assessment, include the sentence:\n_“We're not claiming a disproportionate burden to making any part of [app name] compliant to the accessibility regulations.”_\n\n### 8(c). Content that's not within the scope of the accessibility regulations\n\n<IcAlert\n  message=\"Delete the example in the template before publishing\"\n  variant=\"info\"\n/>\n\nThis section is used to list which parts of the app will not be made accessible because they're explicitly excluded in the Regulations. Refer to the Department's accessibility requirements for what is explicitly excluded.\n\nIf the app does not have content that's not within the scope of the accessibility regulations, include the sentence:\n_“There is no content in the app that is outside the scope of the accessibility regulations.”_\n\n## 9. How we tested this app\n\nThis section is used to explain how the app was tested against the relevant standard (WCAG or EN 301 549).\nThis includes which version(s) of the app were tested, where they are hosted and how pages were chosen for testing.\n\nIf relevant, include information from third-party auditors and reports that they have provided.\n\nThere is no requirement to test an app with a specific approach, but a combination of [manual and automatic techniques](/accessibility/testing) is recommended.\n\n## 10. What we're doing to improve accessibility\n\nThis section is used to explain how you will make sure that the app remains accessible through its lifecycle. Linking to a product or accessibility roadmap is optional, but it will help users understand what improvements will be made in future.\n\nWhere the app has existing accessibility problems, explain the timeframe in which the problems will be fixed.\n\n## 11. Preparation of this Accessibility Statement\n\nThis section is used to say when the latest accessibility testing was done, when this statement was updated and to link to relevant reports.\n\nThe wording in the first sentence about when the statement was prepared is legally required. **Don't change it.**\n\nInclude multiple Accessibility Conformance Reports if appropriate. The reports must match the latest app and this Accessibility Statement.\n\nInstances where multiple Accessibility Conformance Reports should be referenced:\n\n- The app consists of multiple interacting user interfaces.\n- The app is based on third party software that has been configured. Provide the vendor's Accessibility Conformance Report (VPAT/ACR) and then a supplementary report that covers any user interface changes caused by your configuration or customisation of the app.\n",
      "path": "/accessibility/documenting/accessibility-statements-guidance",
      "navPriority": 1,
      "date": "2022-11-15",
      "title": "Accessibility Statement guidance",
      "subTitle": "How to fill out and maintain an Accessibility Statement.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/documenting/accessibility-statements-guidance.mdx",
      "meta": {
        "relativePath": "accessibility/documenting/accessibility-statements-guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 10559,
        "formattedSize": "10.3 KB"
      }
    },
    {
      "id": "accessibility__documenting__accessibility-statementsx",
      "contents": "\n## Introduction\n\nAll apps and services must publish an Accessibility Statement to comply with the Intelligence Community [Digital Accessibility Policy](/accessibility/requirement).\n\nAn Accessibility Statement is a clear overview of the accessibility compliance status and contact details for the team that looks after the app or service.\n\nClick here to [read the IC Design System's Accessibility Statement](/icds).\n\nThe statement includes how accessible an app or service is, known problems, who is responsible, and how the product was tested.\n\nThe statement will evolve as the app or service changes. As accessibility problems are found and fixed, and new features are added, the statement must reflect the [Accessibility Conformance Report](/accessibility/documenting/conformance-report) and all testing results.\n\nThe statement must also link to your Accessibility Conformance Report if one is required.\n\n## The template\n\nTo make the statement useful for everyone, follow the template and don't change the layout. Keep the existing language where applicable, write in plain English and avoid technical jargon.\n\n- [Guidance for completing accessibility statements](/accessibility/documenting/accessibility-statements-guidance)\n- [Blank accessibility statement (DOCX)](/accessibility-statement-template.docx)\n- [Blank accessibility statement (HTML)](https://github.com/mi6/ic-design-system/tree/main/static/accessibility-statement-html-blank.html)\n",
      "path": "/accessibility/documenting/accessibility-statements",
      "navPriority": 0,
      "date": "2022-11-15",
      "title": "Accessibility Statements",
      "subTitle": "Accessibility Statements are simple but important documents that are useful to everyone.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/documenting/accessibility-statements.mdx",
      "meta": {
        "relativePath": "accessibility/documenting/accessibility-statements.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 1833,
        "formattedSize": "1.8 KB"
      }
    },
    {
      "id": "accessibility__documenting__conformance-reportx",
      "contents": "\n## Introduction\n\nAll apps and services must publish and maintain an Accessibility Conformance Report that states current compliance in order to comply with the Intelligence Community [Digital Accessibility Policy](/accessibility/requirement).\n\nAn Accessibility Conformance Report is used for accurate and consistent reporting of accessibility status in apps and services.\n\nClick here to [download the IC Design System's Accessibility Conformance Report](/icds-accessibility-conformance-report-12-10-22.docx).\n\nThe standard Report checks that an app or service meets each applicable [WCAG](/accessibility/requirement/wcag) success criteria. A small number of apps or services might need to meet the EN 301 549 standard. If that's the case, use that version of the Report instead.\n\nUse the full range of [accessibility testing](/accessibility/testing) methods to make sure your app or service is accessible to everyone. Just filling in a Report as a checklist won't give a full picture of how accessible (to WCAG or EN 301 549) your app or service is.\n\nIf an accessibility problem is found in the app or service that doesn't fit into the Report, it must be recorded in the Accessibility Statement.\n\n## Update as you go\n\nUpdate the Report during the lifecycle of the app or service.\n\nAutomated and manual accessibility testing is needed to fill in the Reports. Whenever new features are added, tested and problems are found, they need to be reflected in the Report.\n\n## Which report template to use\n\nA common checklist for testing and reporting is the [Voluntary Product Accessibility Template® (VPAT®)](https://www.itic.org/policy/accessibility/vpat). When filled in, the VPAT® becomes the app or service's Accessibility Conformance Report.\n\nUse the correct VPAT® depending on the type of app or service:\n\n- Use the [WCAG (VPAT®) template](/blank-accessibility-conformance-report-vpat-wcag-24rev.docx) for apps and services with only a user interface (browser-based or otherwise).\n\n- Use the [EN 301 549 (VPAT®) template](/blank-accessibility-conformance-report-vpat-en301549-24rev.docx) for apps and services which includes hardware. It includes all the WCAG criteria, so only one Report is needed.\n\nIf a Report is produced or available from auditors or vendors, use their reports even if it's not called a 'VPAT®'. If configuration/customisation has been applied to the vendor's software, then a supplementary Report must be provided that covers any user experience changes caused by this modification.\n\nIf the app or service is modified from the original version - or does not fully represent conformance to the requirements - an updated Report version must be produced. Accessibility Conformance Reports must match the latest Accessibility Statement and app version.\n\nAll reports need to explain conformance to all WCAG or EN 301 549 success criteria or explain why it's not applicable.\n\n## How to fill in the report\n\nTo make the Report useful for everyone:\n\n- Update the Report as you do [manual](/accessibility/testing/manual-testing) and [automated accessibility testing](/accessibility/testing/automated-testing).\n- Write in plain English and avoid technical jargon so that everyone can understand it.\n- Ensure there is a Conformance Level and supporting comment in 'Remarks and Explanations' for each success criteria, even if it's 'not applicable'.\n- For any 'Supports' and 'Partially Supports' levels, explain why the app or service meets that specific success criteria.\n- For any 'Not Applicable' levels, explain why they aren't applicable to that specific success criteria.\n",
      "path": "/accessibility/documenting/conformance-report",
      "navPriority": 2,
      "date": "2023-02-03",
      "title": "Accessibility Conformance Report",
      "subTitle": "An Accessibility Conformance Report is used for accurate and consistent reporting of accessibility status in apps and services.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/documenting/conformance-reports.mdx",
      "meta": {
        "relativePath": "accessibility/documenting/conformance-report.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 4013,
        "formattedSize": "3.9 KB"
      }
    },
    {
      "id": "accessibility__documenting__indexx",
      "contents": "\n## Introduction\n\nAs well as thorough [accessibility testing](/accessibility/testing), comprehensive documentation is needed for an app or service to comply with the Intelligence Community [Digital Accessibility Policy](/accessibility/requirement).\n\nAll apps and services are required to regularly and transparently publish up to date versions of their documentation.\n\nDocumentation must be published internally to all potential users. For our external apps and services, documentation must be published publicly.\n\nWe use [Accessibility Statements](/accessibility/documenting/accessibility-statements) and [Accessibility Conformance Reports](/accessibility/documenting/conformance-report) to document how accessible our apps and services are.\n\n## Accessibility Statement\n\nAn Accessibility Statement is a clear overview of the accessibility compliance status and contact details for the team that looks after the app or service.\n\nThe statement includes how accessible an app or service is, known problems, who is responsible, and how the product was tested.\n\nThe statement needs to explain known accessibility issues, how people can work around the issues and when you plan to fix them.\n\n## Accessibility Conformance Report\n\nAn Accessibility Conformance Report is used for accurate and consistent reporting of accessibility status in apps and services.\n\nThis report checks that an app or service meets each applicable [WCAG](/accessibility/requirement/wcag) success criteria. Some apps or services might need to use a report which includes more criteria for the EN 301 549 standard.\n",
      "path": "/accessibility/documenting",
      "navPriority": 6,
      "date": "2022-11-15",
      "title": "Documenting accessibility",
      "subTitle": "This section tells you how to document how accessible your app or service is.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/documenting/index.mdx",
      "meta": {
        "relativePath": "accessibility/documenting/index.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 1912,
        "formattedSize": "1.9 KB"
      }
    },
    {
      "id": "accessibility__documenting__when-to-create-and-updatex",
      "contents": "\n## Introduction\n\nAll documentation needs to be kept up to date and represent the version of the app or service that users have, or will have, access to.\n\n## When to create\n\nCreate the [Accessibility Statement](/accessibility/documenting/accessibility-statements) and [Accessibility Conformance Report](/accessibility/documenting/conformance-report) as early as possible. It's best to create them at the start of the project (or development).\n\nAn Accessibility Statement must always be available to users, even in a pilot or minimum viable product (MVP).\n\n## When to update\n\nUpdate the documentation during the lifecycle of the app or service. Whenever new features are added, tested and problems are found, they need to be reflected in the documentation.\n\nPublish the documentation when it changes. The documentation must be reviewed at least every 12 months even if the app or service has not changed.\n\n## Where to publish\n\nPublish the Accessibility Statement for apps and services in the following places:\n\n- As an accessible page, preferably available in the footer or navigation.\n- In any substantive corporate records for each department where the app or service is available.\n\nDepartments may also require statements to be published on their Intranet.\n\nThe statement must reflect and link to the latest Accessibility Conformance Report.\n",
      "path": "/accessibility/documenting/when-to-create-and-update",
      "navPriority": 3,
      "date": "2022-11-15",
      "title": "When to create and update",
      "subTitle": "Keep your documentation current and transparent.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/documenting/when-to-create-and-update.mdx",
      "meta": {
        "relativePath": "accessibility/documenting/when-to-create-and-update.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 1691,
        "formattedSize": "1.7 KB"
      }
    },
    {
      "id": "accessibility__indexx",
      "contents": "\n## Our work on accessibility\n\nMI6, MI5, GCHQ and our partners work to provide accessible, inclusive, and equitable experiences for everyone who uses our apps and services.\n\nThis means making sure that what we build, buy or use empowers our teams.\n\nWe want our teams to consistently and effectively contribute to our mission, regardless of any impairments or accessibility needs they might experience.\n\n## Get started\n\nIf you create or manage apps or services for MI6, MI5, GCHQ and our partners, you have a responsibility to make sure they are inclusive and accessible.\n\nTo understand more about how we make our stuff accessible, read:\n\n- [Why accessibility is important](/accessibility/introduction) and how it can affect our teams.\n- [What our teams must do](/accessibility/requirement) to comply with our Policy and other public sector legislation.\n- The types of [disabilities, impairments and neurological diversity](/accessibility/needs) to consider when creating apps and services.\n- How to [code your apps and services](/accessibility/coding) so that they're accessible.\n- How and when to [test how accessible](/accessibility/testing) your apps and services are.\n- How and when to [document how accessible](/accessibility/documenting) your apps and services are.\n\n## Getting help\n\nFor internal teams, support is available from your local accessibility experts.\n\nThey can help you understand how to properly design, build and test your apps and services. Search your intranet to get in touch with them.\n\n## Feedback\n\nThe Design System aims to introduce disability, impairments and difference in an inclusive and accurate way. Please [check for an existing issue or let us know](https://github.com/mi6/ic-design-system/issues) if you can help us improve our language.\n",
      "path": "/accessibility",
      "navPriority": 0,
      "date": "2022-11-15",
      "title": "Accessibility",
      "subTitle": "This section introduces accessibility and how to design, build and test for accessible apps and services.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/index.mdx",
      "meta": {
        "relativePath": "accessibility/index.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 2097,
        "formattedSize": "2.0 KB"
      }
    },
    {
      "id": "accessibility__introductionx",
      "contents": "\n## Introduction\n\nAccessibility is not just about disability; it covers a wide range of needs from temporary motor impairments and blindness, to neurological diversity like dyslexia and anxiety.\n\nOne in five people in the UK have a disability<sup id=\"ref-1\"><a href=\"#fn-1\">1</a></sup> and up to 15% of people are neurodiverse<sup id=\"ref-2\"><a href=\"#fn-2\">2</a></sup>.\n\nThere are also many people who might have temporary accessibility needs and wouldn't identify as having them.\n\n## Permanent, temporary and situational\n\nImpairments can be permanent, temporary or situational. Anyone can have a different set of impairments at any time and those needs can change quickly.\n\nThere are no hard and fast rules about how a disability, impairment or neurological diversity affects someone.\n\nA person born with one arm, a person with a broken wrist and a person holding a baby all have a reduced ability to interact through their hands. Each will interact with things differently; arguably, someone with one arm may be better prepared than someone with a broken wrist.\n\nAccessibility and inclusive design isn't restricted to a small community with life-changing needs.\n\nRead more about examples of [disabilities, impairments and neurological diversity](/accessibility/needs).\n\n## References\n\n1. <a href=\"https://www.scope.org.uk/media/disability-facts-figures/\" id=\"fn-1\">\n     Disability facts and figures\n   </a>\n   .<i> Scope</i>. Accessed 5 November 2022. <a href=\"#ref-1\">\n     Back to content\n   </a>\n2. <a\n     href=\"https://adhdaware.org.uk/what-is-adhd/neurodiversity-and-other-conditions/\"\n     id=\"fn-2\"\n   >\n     Neurodiversity and other conditions\n   </a>\n   .<i> ADHD Aware</i>. Accessed 3 February 2023. <a href=\"#ref-2\">\n     Back to content\n   </a>\n",
      "path": "/accessibility/introduction",
      "navPriority": 0,
      "date": "2023-02-03",
      "title": "Introduction to accessibility",
      "subTitle": "Many people who work for us are directly impacted by the accessibility decisions we make.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/introduction.mdx",
      "meta": {
        "relativePath": "accessibility/introduction.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 2104,
        "formattedSize": "2.1 KB"
      }
    },
    {
      "id": "accessibility__needs__auditoryx",
      "contents": "\nimport { IcAlert } from \"@ukic/react\";\n\n## Introduction\n\nPeople will have different degrees of a hearing impairment. Profoundly or severely deaf people may rely on hearing aids and lip-reading/speaking, whilst others will struggle with noisy environments.\n\nA hearing impairment can include things like finding issues with background noise through to side effects of medicines.\n\n11 million people in the UK are d/Deaf or hard of hearing<sup id=\"ref-1\"><a href=\"#fn-1\">1</a></sup> and 70% state that their hearing loss sometimes prevented them from fulfilling their potential at work<sup id=\"ref-2\"><a href=\"#fn-2\">2</a></sup>.\n\n## Examples of hearing impairments\n\nThe following table lists examples of hearing impairments in three columns (permanent, temporary and situational).\n\n| Permanent                                     | Temporary                                                                | Situational                                       |\n| --------------------------------------------- | ------------------------------------------------------------------------ | ------------------------------------------------- |\n| Deaf (little to no hearing)                   | Ear infection                                                            | Background noise (noisy office)                   |\n| Hard of hearing (mild to severe hearing loss) | Medicine side effects (such as for neonatal infections, malaria, cancer) | Noise-cancelling headphones (to counteract noise) |\n|                                               | Exposure to loud noises                                                  | Poor quality audio                                |\n\n## Making things accessible\n\nMake sure any audio has little to no background noise.\n\n### Subtitles and transcripts\n\n<IcAlert\n  heading=\"Keep compliant\"\n  message=\"Due to the nature of some Intelligence Community apps and services, transcription,\n  subtitles and pre-processing might not be possible. This should always be\n  recorded in your Accessibility Statement with equitable alternatives offered where reasonably possible.\"\n  variant=\"warning\"\n/>\n\nMake sure any audio information is available in text.\n\nFor all audio content (including videos with audio) you must provide [subtitles and a transcript](/accessibility/requirement/subtitles-transcripts-captions). Subtitles must not be embedded (rendered) into the video as they need to be readable using assistive technologies.\n\nDon't rely on automated subtitling and transcription because it might be inaccurate. Always check any automated subtitles and transcripts for accuracy.\n\n## References\n\n1. <a\n     href=\"https://rnid.org.uk/about-us/research-and-policy/facts-and-figures/\"\n     id=\"fn-1\"\n   >\n     Facts and figures\n   </a>\n   .<i> RNID</i>. Accessed 5 November 2022. <a href=\"#ref-1\">Back to content</a>\n2. <a\n     href=\"https://www.england.nhs.uk/wp-content/uploads/2017/09/hearing-loss-what-works-guide-employment.pdf\"\n     id=\"fn-2\"\n   >\n     What works: Hearing Loss and Employment\n   </a>\n   .<i> NHS England</i>. Accessed 5 November 2022. <a href=\"#ref-2\">\n     Back to content\n   </a>\n",
      "path": "/accessibility/needs/auditory",
      "navPriority": 0,
      "date": "2022-11-15",
      "title": "Auditory needs",
      "subTitle": "Hearing impairment means a complete or partial loss of the ability to hear in one or both ears.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/needs/auditory.mdx",
      "meta": {
        "relativePath": "accessibility/needs/auditory.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 3459,
        "formattedSize": "3.4 KB"
      }
    },
    {
      "id": "accessibility__needs__indexx",
      "contents": "\n## Types of accessibility needs\n\nAccessibility needs can be permanent, temporary or situational. Remember to not consider those with 'accessibility needs’ as a defined group of people with 'disability and impairments'.\n\nAnyone can have a different set of needs at any time. We've curated some information to get you started, but this is by no means an exhaustive list of the types of experiences people can have.\n\n- [Auditory](/accessibility/needs/auditory)\n- [Invisible illness](/accessibility/needs/invisible)\n- [Motor](/accessibility/needs/motor)\n- [Neurodiversity](/accessibility/needs/neurodiversity)\n- [Visual](/accessibility/needs/visual)\n\n## Government Digital Service Accessibility Personas\n\nThe GDS Accessibility team has created [seven different accessibility personas](https://alphagov.github.io/accessibility-personas/).\n\nEach persona has different access needs. They are:\n\n- [Claudia](https://alphagov.github.io/accessibility-personas/claudia/) - a sight impaired screen magnifier user.\n- [Ashleigh](https://alphagov.github.io/accessibility-personas/ashleigh/) - a severely sight impaired screenreader user.\n- [Ron](https://alphagov.github.io/accessibility-personas/ron/) - an older user with multiple needs.\n- [Chris](https://alphagov.github.io/accessibility-personas/chris/) - a user with rheumatoid arthritis.\n- [Pawel](https://alphagov.github.io/accessibility-personas/pawel/) - a user with Aspergers.\n- [Simone](https://alphagov.github.io/accessibility-personas/simone/) - a dyslexic user.\n- [Saleem](https://alphagov.github.io/accessibility-personas/saleem/) - a profoundly deaf user.\n\n## Feedback\n\nThe Design System aims to introduce disability, impairments and difference in an inclusive and accurate way. Please [check for an existing issue or let us know](https://github.com/mi6/ic-design-system/issues) if you can help us improve our language.\n",
      "path": "/accessibility/needs",
      "navPriority": 1,
      "date": "2022-11-15",
      "title": "Accessibility needs",
      "subTitle": "When building apps and services, be careful not to assume everyone is like you.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/needs/index.mdx",
      "meta": {
        "relativePath": "accessibility/needs/index.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 2186,
        "formattedSize": "2.1 KB"
      }
    },
    {
      "id": "accessibility__needs__invisiblex",
      "contents": "\n## Introduction\n\nThe examples below aren't exhaustive but show some common experiences that may affect how people use apps and services.\n\n### Stress and anxiety\n\nStress and anxiety disorders are a mixture of psychological problems such as frequent or excessive worry<sup id=\"ref-1\"><a href=\"#fn-1\">1</a></sup>. It can include physical symptoms such as irritability, fatigue, restlessness and difficulty breathing.\n\nBehavioural effects include procrastination, avoidance and social withdrawal.\n\n[Read more about anxiety disorders on the NHS website](https://www.nhs.uk/conditions/generalised-anxiety-disorder/).\n\n### Epilepsy\n\nEpilepsy is a condition that affects around one in every 100 people in the UK. When someone has epilepsy, it means they tend to have epileptic seizures<sup id=\"ref-2\"><a href=\"#fn-2\">2</a></sup>.\n\nTriggers aren't the same for everyone, but common triggers include temperature, light, stress, tiredness, flicker and computer screens.\n\n[Read more about epilepsy at the Epilepsy Society](https://www.epilepsysociety.org.uk/about-epilepsy/what-epilepsy).\n\n### Chronic Fatigue Syndrome (CFS)/Myalgic Encephalopathy (ME)\n\nCFS causes persistent fatigue (extreme tiredness) that affects day to day living and isn’t relieved by sleep or rest<sup id=\"ref-3\"><a href=\"#fn-3\">3</a></sup>.\n\nThe main symptoms of CFS are persistent mental and physical fatigue although there are other common symptoms including muscular and joint pain, severe headaches, poor short-term memory and concentration, difficulty organising thoughts and problems finding the right words.\n\n[Read more about ME/CFS at ME Research UK](https://www.meresearch.org.uk/what-is-me).\n\n### Fibromyalgia\n\nAlso called Fibromyalgia Syndrome (FMS) is a long-term condition that causes pain all over the body.\n\nAs well as widespread pain, people with FMS can also experience increased sensitivity to pain, extreme tiredness, muscle stiffness, difficulty sleeping, problems with mental processes (known as \"fibro-fog\") such as problems with memory and concentration, headaches, irritable bowel syndrome (IBS)<sup id=\"ref-4\"><a href=\"#fn-4\">4</a></sup>.\n\n[Read more about fibromyalgia on the NHS website](https://www.nhs.uk/conditions/fibromyalgia/).\n\n## Making things accessible\n\nIn addressing some of the design issues below, we make it easier for everyone to use our apps. Thinking about the [design considerations for neurodiversity](/accessibility/needs/neurodiversity) can help people who have invisible illnesses.\n\n### Anxiety and stress-free design\n\nSome things we include in apps increase anxiety and for some people, the impact can be significant.\n\nConsider:\n\n- Error messages should explain how to fix the problem and not blame the user.\n- [Motion/animation](/styles/motion) or information should only appear when the user expects it.\n- Popups that disappear too quickly before they can be read, like [toasts](/components/toasts).\n- Use simple [layouts](/styles/layout-spacing) as complicated, dense layouts can overload users with information.\n\n## References\n\n1. <a\n     href=\"https://www.nhs.uk/conditions/generalised-anxiety-disorder\"\n     id=\"fn-1\"\n   >\n     Generalised anxiety disorder in adults\n   </a>\n   .<i> NHS</i>. 19 December 2018. Accessed 5 November 2022 <a href=\"#ref-1\">\n     Back to content\n   </a>\n2. <a\n     href=\"https://www.epilepsysociety.org.uk/about-epilepsy/epileptic-seizures\"\n     id=\"fn-2\"\n   >\n     Epileptic seizures\n   </a>\n   .<i> Epilepsy Society</i>. Accessed 5 November 2022 <a href=\"#ref-2\">\n     Back to content\n   </a>\n3. <a href=\"https://www.meresearch.org.uk/what-is-me\" id=\"fn-3\">\n     What is ME?\n   </a>\n   .<i> ME Research UK</i>. Accessed 5 November 2022 <a href=\"#ref-3\">\n     Back to content\n   </a>\n4. <a href=\"https://www.nhs.uk/conditions/fibromyalgia/\" id=\"fn-4\">\n     Fibromyalgia\n   </a>\n   .<i> NHS</i>. 20 February 2019. Accessed 5 November 2022 <a href=\"#ref-4\">\n     Back to content\n   </a>\n",
      "path": "/accessibility/needs/invisible",
      "navPriority": 2,
      "date": "2022-11-15",
      "title": "Invisible illness",
      "subTitle": "Invisible illness is an umbrella term for medical conditions that are invisible to others.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/needs/invisible.mdx",
      "meta": {
        "relativePath": "accessibility/needs/invisible.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 4272,
        "formattedSize": "4.2 KB"
      }
    },
    {
      "id": "accessibility__needs__motorx",
      "contents": "\n## Introduction\n\nMotor impairments can fundamentally affect the usage of your app or service. Some people that use walking frames can't hold a mobile phone, and some with muscle tremors may be unable to use dropdown menus with a mouse.\n\nThere are many types and causes of motor impairments<sup id=\"ref-1\"><a href=\"#fn-1\">1</a></sup>. Over 400,000 people in the UK have rheumatoid arthritis<sup id=\"ref-2\"><a href=\"#fn-2\">2</a></sup> and the number of people diagnosed with Parkinson's in 2018 in the UK is around one adult in 350<sup id=\"ref-3\"><a href=\"#fn-3\">3</a></sup>.\n\n## Examples of motor impairments\n\nThe following table lists examples of motor impairments in three columns (permanent, temporary and situational).\n\n| Permanent                                                  | Temporary   | Situational           |\n| ---------------------------------------------------------- | ----------- | --------------------- |\n| Missing a limb                                             | Broken limb | Holding a baby        |\n| Cerebral Palsy (affects muscle tone, movement and control) | Burn        | Using a telephone     |\n| Dyspraxia (co-ordination of movement)                      |             | General multi-tasking |\n| Muscle tremor (inc. Parkinson's)                           |             |                       |\n\n## Making things accessible\n\nIn addressing some of the design issues below, we make it easier for everyone to use our apps.\n\n### Clear clickable actions\n\nMake sure any buttons are clear and easily clickable. Buttons should be easy enough to click and shouldn't be too close together.\n\nAvoid placing lots of actions next to each other as this could increase the risk of a user taking the wrong action.\n\n### Design for keyboard and speech\n\nMake sure that all functionality is accessible by keyboard only. Some users with motor impairments may not use a mouse and instead use assistive technology such as speech input.\n\nConsider alternate input means (mouthpieces, clickers and text to speech software). Apps and services that conform to [WCAG](/accessibility/requirement/wcag) are more likely to work with assistive technologies.\n\nFor example, [Dragon speech recognition software](https://www.nuance.com/en-gb/dragon.html) allows users to navigate apps, browse desktops, open applications, type and more<sup id=\"ref-4\"><a href=\"#fn-4\">4</a></sup>.\n\n## References\n\n1. <a href=\"https://www.neuromodulation.com/motor-impairment\" id=\"fn-1\">\n     Motor impairment\n   </a>\n   .<i> International Neuromodulation Society</i>. 25 April 2017. Accessed 5 November\n   2022. <a href=\"#ref-1\">Back to content</a>\n2. <a href=\"https://www.nras.org.uk/what-is-ra-article\" id=\"fn-2\">\n     What is RA?\n   </a>\n   .<i> National Rheumatoid Arthritis Society (NRAS)</i>. Accessed 5 November 2022. <a href=\"#ref-2\">\n     Back to content\n   </a>\n3. <a\n     href=\"https://www.parkinsons.org.uk/about-us/understanding-parkinsons-journalist/\"\n     id=\"fn-3\"\n   >\n     Parkinson's UK\n   </a>\n   .<i> Parkinson's UK</i>. Accessed 5 November 2022. <a href=\"#ref-3\">\n     Back to content\n   </a>\n4. <a href=\"https://www.nuance.com/en-gb/dragon.html\" id=\"fn-4\">\n     Dragon speech recognition\n   </a>\n   .<i> Nuance</i>. Accessed 5 November 2022. <a href=\"#ref-4\">\n     Back to content\n   </a>\n",
      "path": "/accessibility/needs/motor",
      "navPriority": 3,
      "date": "2022-11-15",
      "title": "Motor needs",
      "subTitle": "'Motor impairment' means a partial or total lack of function in a body part, usually a limb or limbs.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/needs/motor.mdx",
      "meta": {
        "relativePath": "accessibility/needs/motor.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 3625,
        "formattedSize": "3.5 KB"
      }
    },
    {
      "id": "accessibility__needs__neurodiversityx",
      "contents": "\n## Introduction\n\nThe terms neurodiversity, neurodifference and cognitive impairment cover a broad range of impairments or differences.\n\nNeurodiversity and neurodifference are umbrella terms referring to a group of conditions that share common features. These features often centre around differences in how people learn and process information.\n\nPeople often describe themselves as having a different set of skills, abilities and ways of seeing the world.\n\n## Types of neurodiversity\n\nImproving a design for one set of needs often improves the experiences for other groups. It's quite common that some types of neurodiversity share needs with others.\n\nIt's important to remember that neurodiversity isn't always a disability or impairment. Neurodiverse people might not identify as having accessibility needs, but will still benefit from support and accessibility considerations.\n\nNot all types of neurodiversity and cognitive needs are included in these examples.\n\n### Dyslexia\n\nPeople with Dyslexia may have difficulty processing and remembering information they see and hear, which can affect learning and the acquisition of literacy skills. Dyslexia can also impact other areas such as organisational skills<sup id=\"ref-1\"><a href=\"#fn-1\">1</a></sup>.\n\n6.3 million people (around 10% of the UK population) have dyslexia<sup id=\"ref-2\"><a href=\"#fn-2\">2</a></sup>.\n\n[Read more about Dyslexia at the British Dyslexia Association](https://www.bdadyslexia.org.uk/dyslexia/about-dyslexia/what-is-dyslexia).\n\n### Dyspraxia/Developmental Coordination Disorder (DCD)\n\nDevelopmental Coordination Disorder (DCD), also known as dyspraxia, is a common disorder affecting fine and/or gross motor coordination in children and adults.\n\nMany non-motor difficulties may also be experienced. These include memory, perception and processing as well as additional problems with planning, organising and carrying out movements in the right order in everyday situations<sup id=\"ref-3\"><a href=\"#fn-3\">3</a></sup>.\n\n[Read more about Dyspraxia at the Dyspraxia Foundation](https://dyspraxiafoundation.org.uk/about-dyspraxia/dyspraxia-glance/).\n\n### Dyscalculia\n\nDyscalculia affects someone's ability to understand, recall or use numerical information. Some people may feel anxious when having to undertake any mathematical tasks<sup id=\"ref-4\"><a href=\"#fn-4\">4</a></sup>.\n\nDyscalculia can also affect how numerical information is processed; some people can also have difficulty with memory, speed of thinking, organisation and sequencing. People with dyscalculia may not understand numerical references such as percentages.\n\n[Read more about dyscalculia at the British Dyslexia Association](https://www.bdadyslexia.org.uk/dyslexia/neurodiversity-and-co-occurring-differences/dyscalculia-and-maths-difficulties).\n\n### Irlen Syndrome\n\nIrlen Syndrome is a perceptual processing disorder<sup id=\"ref-5\"><a href=\"#fn-5\">5</a></sup>. It can affect what words and letters look like, including how well someone can read. It's distinct from dyslexia.\n\nIt can be the cause of unexplained symptoms such as headaches, eye strain and fatigue.\n\n[Read more about Irlen Syndrome at the Irlen Syndrome Foundation (US)](https://www.irlensyndrome.org/what-is-irlen-syndrome/).\n\n### Attention Deficit conditions (ADD, ADHD)\n\nThese attention differences lead to difficulties in maintaining attention as well as impulsive and hyperactive behaviour<sup id=\"ref-6\"><a href=\"#fn-6\">6</a></sup>.\n\nThe effects on people can include, but aren't limited to:\n\n- Trouble holding attention on tasks.\n- Avoidance or dislike of tasks that require a lot of mental effort.\n- Forgetfulness.\n- Trouble organising tasks and activities.\n\n[Read more about ADD and ADHD at ADHD UK](https://adhduk.co.uk/about-adhd/).\n\n### Spectrum conditions (including Autism and Asperger's)\n\nAutism (including Asperger's) is a spectrum condition that affects the way someone sees the world, processes information and interacts with others<sup id=\"ref-7\"><a href=\"#fn-7\">7</a></sup>.\n\nIn the workplace, even when their qualifications and skill levels are ideally suited to the work concerned, someone may experience difficulties interacting with colleagues, and this can affect their ability to remain in employment. These may include:\n\n- Not understanding abstract concepts.\n- Needing extra time to process information or answer questions.\n- Over- or under-sensitivity to light and sound.\n\nAround 700,000 people in the UK are on the autistic spectrum. Only 16% of people with autism in the UK are in full time paid employment<sup id=\"ref-8\"><a href=\"#fn-8\">8</a></sup>.\n\nRead more about [Autism and Asperger's at Mencap](https://www.mencap.org.uk/learning-disability-explained/conditions-linked-learning-disability/autism-and-aspergers-syndrome) or [The National Autistic Society](https://www.autism.org.uk/advice-and-guidance/what-is-autism).\n\n## Making things accessible\n\nIn addressing some of the design issues below, we make it easier for everyone to use our apps.\n\n### Use colour properly\n\nSome people understand colour differently or may not be able to infer a relationship between colour and meaning.\n\nAlways use [accessible colour](/styles/colour) and never rely on colour alone to convey meaning.\n\n### Use graphics alongside text\n\nSome people find it easier to look at images. Use graphs, icons and colour alongside text to provide a different way to consume information.\n\nAll images and icons must use [accessible colour](/styles/colour) and have `alt` (alternate) text and captions.\n\n### Don't expect the user to remember\n\nIf you use multiple input steps, make sure you remind users what they've entered before. Don't expect people to switch (or remember) between screens to see what they typed in previously.\n\n### Be flexible on spelling\n\nWhere possible, your app should cope with different date formats.\n\nUse auto-complete suggestion where relevant so that people don't have to spell out the full text.\n\n### Allow browser customisations\n\nSome people rely on Operating System or Browser settings to change the colours of their apps. Make sure what you build can be used with platform settings.\n\nThese include Windows High Contrast mode, macOS increased contrast and browser extensions that modify CSS styles.\n\n## References\n\n1. <a\n     href=\"https://www.bdadyslexia.org.uk/dyslexia/about-dyslexia/what-is-dyslexia\"\n     id=\"fn-1\"\n   >\n     What is dyslexia?\n   </a>\n   .<i> British Dyslexia Association</i>. Accessed 5 November 2022. <a href=\"#ref-1\">\n     Back to content\n   </a>\n2. <a href=\"https://www.nhs.uk/conditions/dyslexia\" id=\"fn-2\">\n     Overview, dyslexia\n   </a>\n   .<i> NHS</i>. 30 July 2018. Accessed 5 November 2022. <a href=\"#ref-2\">\n     Back to content\n   </a>\n3. <a\n     href=\"https://dyspraxiafoundation.org.uk/about-dyspraxia/dyspraxia-glance/\"\n     id=\"fn-3\"\n   >\n     What is Dyspraxia?\n   </a>\n   .<i> Dyspraxia Foundation</i>. Accessed 5 November 2022. <a href=\"#ref-3\">\n     Back to content\n   </a>\n4. <a\n     href=\"https://www.bdadyslexia.org.uk/dyslexia/neurodiversity-and-co-occurring-differences/dyscalculia-and-maths-difficulties\"\n     id=\"fn-4\"\n   >\n     Neurodiversity and Co-occurring differences: Dyscalculia and maths\n     difficulties\n   </a>\n   .<i> British Dyslexia Association</i>. Accessed 5 November 2022. <a href=\"#ref-4\">\n     Back to content\n   </a>\n5. <a href=\"https://www.irlensyndrome.org/what-is-irlen-syndrome\" id=\"fn-5\">\n     What is Irlen Syndrome?\n   </a>\n   .<i> Irlen Syndrome Foundation</i>. Accessed 5 November 2022. <a href=\"#ref-5\">\n     Back to content\n   </a>\n6. <a href=\"https://adhduk.co.uk/about-adhd\" id=\"fn-6\">\n     What is ADHD?\n   </a>\n   .<i> ADHD UK</i>. Accessed 5 November 2022. <a href=\"#ref-6\">\n     Back to content\n   </a>\n7. <a\n     href=\"https://www.autism.org.uk/advice-and-guidance/what-is-autism\"\n     id=\"fn-7\"\n   >\n     What is autism?\n   </a>\n   .<i> National Autistic Society</i>. Accessed 5 November 2022. <a href=\"#ref-7\">\n     Back to content\n   </a>\n8. <a\n     href=\"https://www.autism.org.uk/about/what-is/myths-facts-stats.aspx\"\n     id=\"fn-8\"\n   >\n     The history of autism\n   </a>\n   .<i> National Autistic Society</i>. Accessed 5 November 2022. <a href=\"#ref-8\">\n     Back to content\n   </a>\n",
      "path": "/accessibility/needs/neurodiversity",
      "navPriority": 4,
      "date": "2022-11-15",
      "title": "Neurodiversity",
      "subTitle": "People often think, communicate, understand or remember things in ways we might not consider.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/needs/neurodiversity.mdx",
      "meta": {
        "relativePath": "accessibility/needs/neurodiversity.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 8571,
        "formattedSize": "8.4 KB"
      }
    },
    {
      "id": "accessibility__needs__visualx",
      "contents": "\n## Introduction\n\nVisual impairments can affect people to different degrees, including:\n\n- Blind people who are sightless with no light perception.\n- Those with only slight peripheral vision.\n- People with light perception but a colour deficiency ('colour blindness').\n- Temporary impairments such as distraction or glare.<sup id=\"ref-1\"><a href=\"#fn-1\">1</a></sup>\n\nSome people will use a screen magnifier, screen reader and/or Braille display to use technology. Some people may also require travel, mobility and navigational assistance.\n\nNearly 2 million people in the UK are blind or partially sighted<sup id=\"ref-2\"><a href=\"#fn-2\">2</a></sup>. Only one-third of people registered blind or partially sighted are in paid work.\n\nOver one-third (44%) of blind or partially sighted people also have depression, making it the most common secondary condition for those with sight loss<sup id=\"ref-3\"><a href=\"#fn-3\">3</a></sup>.\n\n## Examples of visual impairments\n\nThe following table lists examples of visual impairments in three columns (permanent, temporary and situational).\n\n| Permanent                                                   | Temporary                                           | Situational                     |\n| ----------------------------------------------------------- | --------------------------------------------------- | ------------------------------- |\n| Blindness                                                   | Cataract (cloudy lenses)                            | Glare                           |\n| Glaucoma (damaged optic nerve)                              | Refractive errors (long/short sight, double vision) | Distraction (visual complexity) |\n| Macular degeneration (effecting central part of the retina) |                                                     |                                 |\n\n## Making things accessible\n\nIn addressing some of the design issues below, we make it easier for everyone to use our apps.\n\n### Readability and contrast\n\nUse the [typographic scale](/styles/typography) with the font ‘Open Sans’ to create readable content.\n\nUse a colour contrast of at least 4:5:1. Use a [colour contrast checker](http://contrast-checker.glitch.me/) to check.\n\n### Design for assistive technology\n\nUse semantic headings and HTML tags to structure the app. Using correct HTML will allow assistive technologies to read an overview of the page when landmarks, regions and headings are implemented appropriately.\n\nMake sure that all elements have correct labels and provide `alt` (or alternative) text when necessary. Good labelling helps all users, such as during issues with downloading parts of the web page.\n\nA linear and logical layout can help users when navigating using a keyboard or when using assistive technologies.\n\n### Help convey meanings\n\nDon’t rely on [colour](/styles/colour) only to convey a meaning. Use a combination of labels, icons and shapes to help people identify elements.\n\n## References\n\n1. <a\n     href=\"https://www.who.int/news-room/fact-sheets/detail/blindness-and-visual-impairment\"\n     id=\"fn-1\"\n   >\n     Blindness and vision impairment\n   </a>\n   .<i> World Health Organization</i>. Accessed 5 November 2022. <a href=\"#ref-1\">\n     Back to content\n   </a>\n2. <a href=\"https://www.nhs.uk/conditions/vision-loss/\" id=\"fn-2\">\n     Blindness and vision loss\n   </a>\n   .<i> NHS</i>. 8 June 2018. Accessed 5 November 2022. <a href=\"#ref-2\">\n     Back to content\n   </a>\n3. <a\n     href=\"https://www.rnib.org.uk/nb-online/rise-depression-rates-people-sight-loss\"\n     id=\"fn-3\"\n   >\n     Depression rates are rising among people with sight loss\n   </a>\n   .<i> RNIB</i>. Accessed 5 November 2022. <a href=\"#ref-3\">Back to content</a>\n",
      "path": "/accessibility/needs/visual",
      "navPriority": 5,
      "date": "2022-11-15",
      "title": "Visual needs",
      "subTitle": "A visual impairment is a reduction in clarity or loss of vision that may be temporary or permanent.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/needs/visual.mdx",
      "meta": {
        "relativePath": "accessibility/needs/visual.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 4056,
        "formattedSize": "4.0 KB"
      }
    },
    {
      "id": "accessibility__requirement__indexx",
      "contents": "\n## Introduction to the Policy\n\nAll digital products that the UK Intelligence Community builds, buys or uses must meet the Intelligence Community's Digital Accessibility Policy. This includes mobile, browser and desktop based software, interfaces attached to physical hardware and operating systems.\n\nA digital product will meet our policy if it:\n\n- Fully conforms to the relevant standard; [WCAG 2.1 Level AA](/accessibility/requirement/wcag) or EN 301 549.\n- Publishes and links to an [Accessibility Statement](/accessibility/documenting/accessibility-statements). It's updated whenever the conformance of the Digital Product changes, when accessibility problems are raised, or at least once every 12-months.\n- Publishes and links to an [Accessibility Conformance Report](/accessibility/documenting/conformance-report) documenting full, partial or non-conformance to the relevant WCAG or EN 310 549 standard. It's updated whenever accessibility problems are raised, or when the user interface is changed.\n\nThe requirement applies differently to [older apps and services](/accessibility/requirement/meeting-the-policy) depending on when they were last modified.\n\nYou can't claim an exception to the Policy solely due to lack of time, knowledge or because accessibility wasn't prioritised.\n\n## How accessible is accessible enough?\n\nAssociated legislation provides the minimum expectation, but the Policy and Design System support teams in creating inclusive experiences above these minimum standards.\n\nHowever, it's not possible to guarantee an app or service is fully accessible to every possible user in every use case. There is no such thing as 'always 100% accessible'.\n\nApps and services will encounter accessibility problems during their lifecycle.\n\nTeams must transparently document non-conformance and known accessibility problems in their Accessibility Statements and Accessibility Conformance Reports. You must always include the date when you plan to fix the problem.\n\n## Policy and legislation\n\nIf you work for MI6, MI5 or GCHQ, search your intranet to learn more about our specific Policy Requirements.\n\nUnfortunately we can't currently publish the Policy online.\n\nThe guidance in the Design System is the source of truth for developing accessible apps and services, but it's not the Policy. The Design System was developed closely alongside the Policy.\n\nThe Policy makes sure the Intelligence Community departments exceeds its obligations set out in the [The Public Sector Bodies (Websites and Mobile Applications) Accessibility Regulations 2018](https://www.legislation.gov.uk/uksi/2018/852/contents/made). This legislation builds on existing obligations to people who have a disability under the [Equality Act 2010](https://www.legislation.gov.uk/ukpga/2010/15/contents) (or the [Disability Discrimination Act 1995](https://www.legislation.gov.uk/ukpga/1995/50/contents) in Northern Ireland).\n",
      "path": "/accessibility/requirement",
      "navPriority": 2,
      "date": "2022-11-15",
      "title": "Digital Accessibility Policy",
      "subTitle": "This section gives you an overview on how to meet our Digital Accessibility Policy.",
      "status": "LIVE",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/requirement/index.mdx",
      "meta": {
        "relativePath": "accessibility/requirement/index.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 3264,
        "formattedSize": "3.2 KB"
      }
    },
    {
      "id": "accessibility__requirement__meeting-the-policyx",
      "contents": "\n## Scope\n\nAll digital apps and services must follow at least some of these requirements. The type and age of the app or service changes what you need to do.\n\nAll documentation must be regularly reviewed, especially on substantial revisions to the app or service.\n\n## All apps and services\n\nThe team must create and commit to the [Accessibility Statement](/accessibility/documenting/accessibility-statements). Use this to document and roadmap how you'll address any known issues.\n\nThe Accessibility Statement must be updated whenever the conformance of the app or service changes, when accessibility problems are raised, or at least once every 12-months.\n\nThe Accessibility Statement must be published within the app or service, and be discoverable for potential users.\n\n## New or updated apps and services\n\nNew apps and services, or those that have been 'substantially revised' (see definition below) on or after 23 September 2019, must comply to all requirements.\n\nThese apps and services must:\n\n- Publish and link to an Accessibility Statement (see above).\n- Fully conform to the relevant standard; [WCAG 2.1 Level AA](/accessibility/requirement/wcag) or EN 301 549.\n- Publish and link to an [Accessibility Conformance Report](/accessibility/documenting/conformance-report) documenting full, partial or non-conformance to the relevant WCAG or EN 301 549 standard. Update this whenever accessibility problems are raised, or when the user interface is changed.\n\n## Apps and services not changed since 23 September 2019\n\nApps and services that haven't been 'substantially revised' since 23 September 2019 are subject to an abridged accessibility requirement. If an app or service is later 'substantially revised' then additional requirements will then apply.\n\nThese apps and services must regularly publish an Accessibility Statement (see above).\n\nIt's recommended, but not required, that these apps and services regularly complete and publish an [Accessibility Conformance Report](/accessibility/documenting/conformance-report).\n\nApps and services in this category will still need to provide reasonable adjustments where required, if if accessibility problems are known.\n\n### Definition of substantially revised\n\nA modification to an app or service is considered a ‘substantial revision’ when at least one of the following is true:\n\n- Any new feature is added to the user interface or service.\n- Any feature is modified within the user interface.\n- Any refactoring of the code behind a user interface is carried out.\n- A feature upgrade of an outsourced or COTS product where the user interface code was modified or it's unclear if the underlying user interface code was modified.\n\nYou should re-test all parts of an app or service that could be affected by a substantial revision.\n\n## Commercial and off-the-shelf\n\nThis requirement applies to commercial procurements or off-the-shelf (COTS) products.\n\nIn many cases, vendors or commercial organisations already publish the required documentation.\n\nIf you work for MI5, MI6 or GCHQ, search your intranet to learn more about our specific Policy Requirements.\n\n## For public-facing tools\n\nThis requirement also applies to public-facing websites<sup id=\"ref-1\"><a href=\"#fn-1\">1</a></sup> managed by the Intelligence Community departments, such as this one.\n\n## References\n\n1. <a\n     href=\"https://www.gov.uk/guidance/accessibility-requirements-for-public-sector-websites-and-apps\"\n     id=\"fn-1\"\n   >\n     Understanding accessibility requirements for public sector bodies\n   </a>\n   .<i> UK Government Digital Service</i>. 23 September 2020. Accessed 5 November\n   2022. <a href=\"#ref-1\">Back to content</a>\n",
      "path": "/accessibility/requirement/meeting-the-policy",
      "navPriority": 1,
      "date": "2022-11-15",
      "title": "Meeting the Policy",
      "subTitle": "This section is a summary of the Policy. Refer to the full document for full details.",
      "status": "LIVE",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/requirement/meeting-the-policy.mdx",
      "meta": {
        "relativePath": "accessibility/requirement/meeting-the-policy.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 4041,
        "formattedSize": "3.9 KB"
      }
    },
    {
      "id": "accessibility__requirement__subtitles-transcripts-captionsx",
      "contents": "\n## Introduction\n\nInclusive video and audio is important to those who are d/Deaf, are blind, have hearing impairments, have difficulty processing information, and those who perceive things differently. Some people have a combination of needs, such as those who are deaf-blind. Everyone will have a different way that they prefer to consume information.\n\nFeatures like captions or transcripts will benefit all users as well as those described above.\n\nThis content is adapted from the [Web Accessibility Initiative](https://www.w3.org/WAI/media/av/) and the [Web Content Accessibility Guidelines (WCAG) 2.1](https://www.w3.org/TR/WCAG21/).\n\n## Requirements and recommendations\n\nAll intranet and ‘official communications’ content must always meet these requirements.\n\n### Pre-recorded content\n\nVideo content that includes audio **must**:\n\n- Provide in-video audio description of important visual information (where possible).\n- Provide captions (‘subtitles’) of the audio content.\n- Provide a descriptive transcript<sup id=\"ref-1\"><a href=\"#fn-1\">1</a></sup>.\n\nAudio-only content **must**:\n\n- Provide a transcript.\n\nVideo-only content **must**:\n\n- Provide a descriptive transcript **or** fully audio described version.\n\n### Live broadcasts\n\nAll live content **should**:\n\n- Provide an accurate script to viewers or listeners before the broadcast, **and**,\n- Allow automatic captions, though this does not fulfil the WCAG requirement due to inaccuracy of automatic captioning.\n\n### Sign language\n\nAll audio-video content for consumption across a significant majority of an organisation **should**:\n\n- Provide British Sign Language signing within the video.\n\nIf there is no audio in a video, inform users in text that it does not need subtitles, captions or transcriptions.\n\n## Planning audio-video content\n\nConsider a variety of aspects as you produce audio-video content. Full considerations are covered at the [Web Accessibility Initiative](https://www.w3.org/WAI/media/av/av-content/).\n\nConsiderations include:\n\n- Avoid causing seizures by avoiding content that flashes more than three times in one second.\n- Position actors and speakers so viewers are able to lip read.\n- Reduce background noise in videos.\n- Avoid descriptions based solely on sensory characteristics.\n- Make overlay text readable with appropriate contrast and font size.\n- Write the script so that audio description of visual information is part of the speech (and therefore is in the subtitles).\n\n## Descriptive transcripts\n\nA descriptive transcript is a normal transcript of the audio content **and** includes text-based descriptions of important visual information.\n\nDescriptive transcripts make content accessible to deaf-blind users and meets the needs of others who may have difficulty processing auditory information or can't focus on visual information.\n\nDescriptive transcripts can be created using the captioning content that you need to produce anyway.\n\nYou don't need a separate basic transcript if you provide a descriptive one.\n\n## Automated captioning\n\nWhile it's important to give people the choice to use automated captions (such as in Microsoft Teams), it does not often fulfil the requirements of users.\n\nThe automated functionality can produce inaccurate results. As such, manual review and/or a script of the conversation should be provided when you publish captions or transcripts.\n\n### Example of a bad automatic caption\n\nSpoken text:\n\n> \"Broil on high for **4 to 5** minutes. You should **not** preheat the oven.\"\n\nAutomatic caption:\n\n> \"Broil on high for **45** minutes. You should **know to** preheat the oven.\"\n\n## Notes\n\n1. This is actually a WCAG Level AAA requirement, but its inclusion increases accessibility of content enough that it’s a good thing to do.\n   <a href=\"#ref-1\">Back to content</a>\n",
      "path": "/accessibility/requirement/subtitles-transcripts-captions",
      "navPriority": 4,
      "date": "2022-11-15",
      "title": "Subtitling, transcripts and audio description",
      "subTitle": "This section tells you how to make videos and audio accessible.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/requirement/subtitles-transcripts-captions.mdx",
      "meta": {
        "relativePath": "accessibility/requirement/subtitles-transcripts-captions.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 4198,
        "formattedSize": "4.1 KB"
      }
    },
    {
      "id": "accessibility__requirement__wcagx",
      "contents": "\n## About WCAG\n\nThe World Wide Web Consortium's (W3C) [Web Content Accessibility Guidelines (WCAG)](https://www.w3.org/TR/WCAG21/) are used for making sure browser-based apps and services are conformant to industry standards.\n\nApps and services developed across the Intelligence Community must meet WCAG 2.1 Level A and Level AA criteria. Where possible, try to meet Level AAA too.\n\nBeing fully conformant to WCAG doesn't guarantee that your app or service is accessible to everyone. We use it as a good minimum standard, supported by enhanced requirements and responsive reporting processes.\n\nWhere applicable, there are around 70 criteria that an app or service needs to meet. Meeting them means the app or service is accessible in a number of ways and is generally implemented to accepted standards. You still need to do other [manual and automated testing](/accessibility/testing).\n\nThe Web Accessibility Initative (WAI) has good documentation on [How to Meet WCAG](https://www.w3.org/WAI/WCAG21/quickref/) for each criterion.\n\n## Reporting conformance\n\nAn [Accessibility Conformance Report (ACR)](/accessibility/documenting/conformance-report) is a checklist you can use to measure conformance to the WCAG standards.\n\nCompleting this will give you the documentation that's required by the [Digital Accessibility Policy](/accessibility/requirement).\n\n## Principles of WCAG\n\nWCAG is based on four principles: Perceivable, Operable, Understandable and Robust.\n\n### Perceivable\n\nPeople will use your app in different ways including ways you didn't plan for. They may use a sense other than sight to browse. People may rely on assistive technology to present information in a different way, such as a screen reader or braille display.\n\nWCAG works to make sure your app is presented to assistive technologies in a way that gives a comparable experience to people who use them.\n\n### Operable\n\nWhen people can perceive your app, they need to be able to do something with it. Some people may have difficulties interacting with the keyboard or mouse due to motor difficulties. They may use one or the other, or another mechanism such as speech.\n\nWCAG checks for good keyboard navigation, no time limits and standard-compliant form fields.\n\n### Understandable\n\nOnce your app is perceivable and operable, make sure what is shown is understandable. An app that behaves unexpectedly or inconsistently is one that might stop people from understanding what it is or how to use it.\n\nWCAG checks that you use clear language in a way that signposts functionality. It also checks content for a hierarchy to make sure people who may not see your app can understand it.\n\n### Robust\n\nStandards such as WCAG, HTML5, CSS3 and good coding practices ensure technologies don't struggle with your service. Consider that when assistive technology fails, it's not always obvious to the user that something has ‘gone wrong’.\n\nWCAG checks some basic coding standards to make sure assistive technology can interact with your capability.\n\n## WCAG levels\n\nWCAG has three levels of conformance. The higher level of conformance your service has, the more people will benefit.\n\nThe impact of Level A criteria might be barely visible in an interface but Level AAA criteria will have a significant impact on the design.\n",
      "path": "/accessibility/requirement/wcag",
      "navPriority": 3,
      "date": "2022-11-15",
      "title": "WCAG standards",
      "subTitle": "This section briefly introduces the Web Content Accessibility Guidelines (WCAG).",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/requirement/wcag.mdx",
      "meta": {
        "relativePath": "accessibility/requirement/wcag.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 3614,
        "formattedSize": "3.5 KB"
      }
    },
    {
      "id": "accessibility__testing__assistive-tech-testingx",
      "contents": "\n## Introduction\n\nTesting with assistive technologies can help to spot accessibility problems that weren't picked up in [automated](/accessibility/testing/automated-testing) and [manual](/accessibility/testing/manual-testing) testing. It's not always required to comply with the Policy but it’s a way to make a huge difference to people who use your apps and services.\n\nA wide range assistive technologies are used by people. These often include screen readers, screen magnifiers, colour overlays and alternative input hardware.\n\nGOV.UK provides more [examples and a definition of an assistive technology](https://www.gov.uk/government/publications/assistive-technology-definition-and-safe-use/assistive-technology-definition-and-safe-use).\n\nAs with any software release, users always find bugs, and some of those may be accessibility problems. However, by performing automated and manual accessibility testing, the severity of accessibility problems should reduce.\n\n## Screen readers and magnifiers\n\nPeople with [visual impairments](/accessibility/needs/visual) rely on different types of assistive technologies. Some people without visual impairments might also use these tools because they prefer them.\n\nThose that are blind, with little to no sight, depend on a screen reader to render a web page 'in text'. Once as text this can be changed into other formats such as speech and braille.\n\nThe majority of visually impaired users have some sight or low vision and may rely on magnifiers which enlarge the screen content.\n\nTools used by visually impaired users include:\n\n- [JAWS](https://www.freedomscientific.com/products/software/jaws/) is a licensed screen reader for Windows.\n- [ZoomText](https://www.zoomtext.com/) is a licensed magnifier for Windows.\n- [Fusion](https://www.freedomscientific.com/products/software/fusion/) where Jaws and ZoomText are packaged together.\n- [NVDA](https://www.nvaccess.org/) is a free and open-source screen reader for Windows.\n- [SuperNova](https://yourdolphin.com/en-gb/products/individuals/supernova-magnifier-screen-reader) is licensed and both a screen reader and magnifier for Windows.\n- [VoiceOver](https://help.apple.com/voiceover/mac/) is a screen reader built in into all Apple products.\n- Windows includes [Windows Magnifier](https://support.microsoft.com/en-gb/help/11542/windows-use-magnifier-to-make-things-easier-to-see), a screen magnifier.\n- MacOS includes [Apple Zoom](https://support.apple.com/en-gb/guide/mac-help/mh35715/mac), a screen magnifier.\n\nThe Design System recommends using NVDA and VoiceOver, depending on your platform, for screen reader testing.\n\nWhen testing with a screen reader, check that you can interact with all features and understand the content without looking at the screen.\n\nWhen testing with a magnifier, check that you can see and interact with all features easily without the need for excessive scrolling.\n\n## Voice control\n\nVoice control or speech recognition lets you navigate and control your computer with your voice alone.\n\nUsers include those with [dyslexia](/accessibility/needs/neurodiversity) who may have difficulty with spelling or is better at communicating verbally. Others may have [motor impairments](/accessibility/needs/motor) and may be unable to use a keyboard or mouse.\n\n[Dragon](https://www.nuance.com/en-gb/dragon.html) is a licensed speech recognition software predominantly for Windows, as support for Mac has discontinued.\n\nAlternatives include [Windows Speech Recognition](https://support.microsoft.com/en-us/help/4042244/windows-10-use-dictation) and [Apple Dictation](https://support.apple.com/en-in/guide/mac-help/mh40584/mac).\n\nWhen testing with a voice control software, check that you can interact with all features.\n\n## High contrast modes\n\nHigh contrast modes allow users with low vision to customise the colours (and sometimes the font).\n\nBoth Windows and Mac provide high contrast modes in [Windows High Contrast Mode](https://support.microsoft.com/en-gb/help/13862/windows-10-use-high-contrast-mode) and [Apple Display Preferences](https://support.apple.com/en-in/guide/mac-help/unac089/mac).\n\nThere are also browser plugins to customise users experiences and override styles in your apps and services.\n\nTest your app with various colour and font combinations to ensure your app can still be used. This will ensure that your CSS is written in a way that can be overridden by the user.\n\n## Available assistive technologies\n\nMany of the assistive technologies used are licensed. The table below summarises some of the assistive technologies available at no extra cost for testing.\n\n| Assistive Technology | Windows                                                                                                                                                              | Mac                                                                                                                  |\n| -------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- |\n| Screen Reader        | [NVDA](https://www.nvaccess.org/), otherwise [Narrator](https://support.microsoft.com/en-us/windows/complete-guide-to-narrator-e4397a0d-ef4f-b386-d8ae-c172f109bdb1) | [NVDA](https://www.nvaccess.org/) on a Virtual Machine, otherwise [Voiceover](https://help.apple.com/voiceover/mac/) |\n| Magnifier            | [Windows Magnifier](https://support.microsoft.com/en-gb/help/11542/windows-use-magnifier-to-make-things-easier-to-see)                                               | [Apple Zoom](https://support.apple.com/en-gb/guide/mac-help/mh35715/mac)                                             |\n| Voice Control        | [Windows Speech Recognition](https://support.microsoft.com/en-us/windows/use-voice-recognition-in-windows-10-83ff75bd-63eb-0b6c-18d4-6fae94050571)                   | [Apple Dictation](https://support.apple.com/en-in/guide/mac-help/mh40584/mac)                                        |\n| Contrast Mode        | [Windows High Contrast Mode](https://support.microsoft.com/en-gb/help/13862/windows-10-use-high-contrast-mode)                                                       | [Apple Display Preferences](https://support.apple.com/en-in/guide/mac-help/unac089/mac)                              |\n",
      "path": "/accessibility/testing/assistive-tech-testing",
      "navPriority": 5,
      "date": "2022-11-15",
      "title": "Testing with assistive technologies",
      "subTitle": "Don't rely on users of assistive technology to do the testing for you.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/testing/assistive-tech-testing.mdx",
      "meta": {
        "relativePath": "accessibility/testing/assistive-tech-testing.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 6837,
        "formattedSize": "6.7 KB"
      }
    },
    {
      "id": "accessibility__testing__automated-testing-limitationx",
      "contents": "\n## False positives and false assurance\n\nPassing automated accessibility tests doesn't mean you app is accessible, it just means that no common issues were found.\n\nA limitation with automated accessibility testing is that results often need someone to ensure the result is correct. This includes checking for false positives and false negatives.\n\n## WCAG and context\n\nChecks in automated accessibility testing tools have a yes or no outcome. The biggest limitation of these automated tools is because they can't test for context.\n\nDeque's [Accessibility Developers' Guide](https://dequeuniversity.com/checklists/web/guide) shows what type of testing is needed to meet [WCAG 2.1 Level AA](/accessibility/requirement/wcag).\n\nOf the 66 success criteria needed to meet WCAG AA, there are none that can be met fully with automated testing alone.\n\n## Usability\n\nIt's possible for an app to be WCAG 2.1 Level AA compliant but still have usability issues. Some of these usability issues may also be accessibility issues.\n\nUsability and context matters to everyone, including those with accessibility needs. Usability includes user experience, covering whether the tool is effective and efficient.\n\nManual accessibility testing, and other functional testing, is needed to make sure your app or services is usable.\n\n## Example: colour contrast\n\nFor some success criteria such as those around colour contrast, automated testing tools are vital.\n\n[1.4.3 Contrast (Minimum)](https://www.w3.org/WAI/WCAG21/quickref/?showtechniques=141#contrast-minimum) requires the visual presentation of text and images of text to have a contrast ratio of at least 4.5:1 (with exceptions).\n\nAn automated testing tool can't test for context so can't tell you if the failing contrast ratio was one of the permitted exceptions, so is actually meeting the success criteria (a false positive).\n\n## Example: alt text\n\n[Guideline 1.1 – Text Alternatives](https://www.w3.org/WAI/WCAG21/quickref/#text-alternatives) requires you to provide text alternatives for any non-text content so that it can be changed into other forms people need, such as large print, braille, speech, symbols or simpler language.\n\nMost automated accessibility checking tools will warn you if alternative text does not on images. However, automated tools can't tell whether the alternative text provided is useful and providing enough context of the image.\n\nIf the alternative text was a file name, such as `alt=\"picture1234.jpg\"`, this would make no sense to the reader.\n\nLikewise, an overly visual description of your app logo does does not provide the reader with the brand recognition, whereas the app name would.\n\nThe same image could also be used twice in the same page, but with different purposes, so the alternative text would need to reflect this.\n",
      "path": "/accessibility/testing/automated-testing-limitation",
      "navPriority": 3,
      "date": "2022-11-15",
      "title": "Limitations of automated testing",
      "subTitle": "Automated accessibility testing is essential but it has limitations and only finds between 30-50% of accessibility problems.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/testing/automated-testing-limitation.mdx",
      "meta": {
        "relativePath": "accessibility/testing/automated-testing-limitation.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 3225,
        "formattedSize": "3.1 KB"
      }
    },
    {
      "id": "accessibility__testing__automated-testingx",
      "contents": "\nimport { IcAlert } from \"@ukic/react\";\n\n<IcAlert\n  heading=\"For internal staff\"\n  message=\"Speak to your local accessibility expert for more information on automated accessibility testing.\"\n  titleAbove\n  variant=\"info\"\n/>\n\n## Introduction\n\nAutomated accessibility testing is a fast and repeatable way to spot some accessibility issues.\nThese tools can be integrated into development and deployment workflows.\n\nAutomated accessibility testing is essential but only finds between 30-50% of accessibility problems.\nThe [limitations of automated accessibility testing](/accessibility/testing/automated-testing-limitation) page explains why [manual testing](/accessibility/testing/manual-testing) is always required.\n\nUse a variety of automated testing tools to capture as many accessibility issues as possible.\n\n## Browser testing\n\nTest web apps using tools and extensions for that browser and test in multiple browsers where possible.\n\nYou need to use at least two accessibility testing extensions because each one will highlight slightly different accessibility problems.\n\nThe UK Government Digital Service (GDS) published an [accessibility tool audit](https://alphagov.github.io/accessibility-tool-audit/). The Design System recommends:\n\n- [axe DevTools](https://www.deque.com/axe/axe-for-web/).\n- [Accessibility Insights for Web](https://accessibilityinsights.io/docs/en/web/overview).\n- [WAVE](https://wave.webaim.org/extension/).\n\nMost of these tools will highlight the WCAG or best practice accessibility problems on the page and tell you how to fix the issue.\n\nSome of the tools will walk you through extra manual testing (like Accessibility Insights for Web) while others will conduct only a full automated test.\n\nBrowser tools can only check what is rendered on a web page when you run the test. To check multiple pages, dialogs or other temporary elements, trigger them before re-running the test.\n\n## Linters\n\nTools called 'linters' analyse source code for a range of potential bugs. Some linters check for accessibility problems or have additional rulesets you can use.\n\nLinters detect issues very early and can prevent certain accessibility problems from ever being implemented.\n\nThe [UI Kit](/components) uses the ESLint accessibility plugin [eslint-plugin-jsx-a11y](https://github.com/jsx-eslint/eslint-plugin-jsx-a11y). Equivalent ESLint plugins are available for Vue and Angular.\n\n## Integration and unit testing\n\nIntegration testing is where parts of software are combined and tested together.\n\nThis is often done as part of a Continuous Integration and Continuous Delivery (CI/CD) workflow.\n\n## End-to-end testing\n\nEnd-to-end testing is where the entire app is tested from a user's perspective.\n\n[Selenium](https://www.selenium.dev/) and [Cypress](https://www.cypress.io/) are common tools for end-to-end testing. Both tools have axe-core wrappers: [axe-selenium](https://github.com/dequelabs/axe-selenium-java) and [cypress-axe](https://github.com/avanslaars/cypress-axe), respectively.\n\nWell configured end-to-end tests should also test multiple pages, dialogs and other temporary elements.\n\n### axe-core\n\n[axe-core](https://github.com/dequelabs/axe-core) can test pages on your app in the same way other unit or integration tests would.\n\nAxe-core is used by the browser-based extensions [axe DevTools](https://www.deque.com/axe/axe-for-web/) and [Accessibility Insights for Web](https://accessibilityinsights.io/docs/en/web/overview).\n\n### Pa11y\n\n[Pa11y](https://pa11y.org/) runs accessibility tests via the command line or Node.js for automating testing.\n\nIt uses axe-core as well as [HTML CodeSniffer](http://squizlabs.github.io/HTML_CodeSniffer/) to look for potential accessibility issues.\n\n[Pa11y CI](https://github.com/pa11y/pa11y-ci) is a CI-centric accessibility test runner, built using Pa11y.\n\n### SonarQube\n\nTools such as [SonarQube](https://www.sonarqube.org/), which provide code-quality assurance of your source code, also have a number of [accessibility rules](https://rules.sonarsource.com/html/tag/accessibility) in SonarHTML.\n\nSonarQube recommends using this alongside other [linting](#linters) such as ESLint<sup id=\"ref-1\"><a href=\"#fn-1\">1</a></sup>.\n\n## References\n\n1. <a\n     href=\"https://community.sonarsource.com/t/how-to-scan-accessibility-issues-using-sonarqube/17307\"\n     id=\"fn-1\"\n   >\n     How to scan accessibility issues using SonarQube?\n   </a>\n   . Discussion.<i> SonarSource Community</i>. December 2019. Accessed 5 November\n   2022. <a href=\"#ref-1\">Back to content</a>\n",
      "path": "/accessibility/testing/automated-testing",
      "navPriority": 2,
      "date": "2023-02-03",
      "title": "Automated accessibility testing",
      "subTitle": "Use a variety of automated testing tools to capture as many accessibility issues as possible.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/testing/automated-testing.mdx",
      "meta": {
        "relativePath": "accessibility/testing/automated-testing.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 4903,
        "formattedSize": "4.8 KB"
      }
    },
    {
      "id": "accessibility__testing__indexx",
      "contents": "\n## Introduction\n\nTesting your code regularly during development can help to identify accessibility issues in both the design and implementation before you test it with users. Approach accessibility testing as you would standard functional testing.\n\nThere are well known [limitations of automated accessibility testing](/accessibility/testing/automated-testing-limitation). Automated testing alone only finds between 30-50% of accessibility problems, so you have to do manual testing too.\n\n## What you need to do\n\nYour accessibility testing must include:\n\n- Using [automated browser testing](/accessibility/testing/automated-testing#browser-testing) regularly during development.\n- Conducting your own [keyboard-only testing](/accessibility/testing/manual-testing#keyboard-only-testing) for all parts of the app.\n- Conducting additional [manual testing](/accessibility/testing/manual-testing#full-manual-accessibility-testing) to account for limitations of automated accessibility testing.\n- Producing your own [documentation](/accessibility/documenting) of full, partial and non-conformances to the relevant accessibility standard.\n\n## Test as you develop\n\nTest as frequent as you can (ideally on every ticket and pull request). To help reduce the amount of accessibility problems you find in testing, you should update your development workflows to:\n\n- Use [linting](/accessibility/testing/automated-testing#linters) in any code to catch common problems introduced during development.\n- Consider using [integration testing](/accessibility/testing/automated-testing#integration-and-unit-testing) and [end-to-end testing](/accessibility/testing/automated-testing#end-to-end-testing).\n- [Test regularly with assistive technologies](/accessibility/testing/assistive-tech-testing), particularly the [NVDA screen reader](/accessibility/testing/assistive-tech-testing#testing-with-nvda).\n\n## Testing with real people\n\nYou should aim to [design and test with real people](https://accessibility.blog.gov.uk/2018/03/20/why-accessibility-testing-with-real-users-is-so-important/) where possible. Reach out to your user community to get a diverse group of users involved in your usability testing.\n\nThis may relate to disability and impairments but also skills, experience, ways of working and technology literacy.\n\nIn general, [don't rely on any specific communities](/accessibility/introduction/discussing) for usability testing.\n\n### Always do your own testing first\n\nComplete all the accessibility testing you can before testing with users who have accessibility needs. This will let them focus on real usability issues instead of common accessibility issues.\n",
      "path": "/accessibility/testing",
      "navPriority": 5,
      "date": "2022-11-15",
      "title": "Testing for accessibility",
      "subTitle": "This section introduces you to different types of accessibility testing.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/testing/index.mdx",
      "meta": {
        "relativePath": "accessibility/testing/index.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 2971,
        "formattedSize": "2.9 KB"
      }
    },
    {
      "id": "accessibility__testing__manual-testingx",
      "contents": "\nimport { IcAlert } from \"@ukic/react\";\n\n## Introduction\n\nManual accessibility testing is needed to address the [limitations of automated accessibility testing](/accessibility/testing/automated-testing-limitation).\n\nDeque's [Accessibility Developers' Guide](https://dequeuniversity.com/checklists/web/guide) shows what type of testing is needed to meet [WCAG 2.1 Level AA](/accessibility/requirement/wcag).\n\n## Keyboard-only testing\n\nKeyboard accessibility is one of the most important aspects of accessibility testing and should be carried out frequently during development.\n\nRetrofitting keyboard accessibility can be expensive. This is a problem if libraries and frameworks you use are not accessible, where the options are to fix the component library or swap to a different one.\n\nSome reasons people might rely on a keyboard include:\n\n- People who are [blind](/accessibility/needs/visual) might use a screen reader and are generally unable see the cursor on the screen.\n- Users with [motor disabilities](/accessibility/needs/motor) may not have the fine motor movements required for using a mouse.\n- People with [chronic conditions](/accessibility/needs/motor) such as Repetitive Strain Injury (RSI) may need to avoid using a mouse.\n- There are also power users who prefer to use the keyboard commands and shortcuts for speed and efficiency.\n\nWebAIM describes [how to test for keyboard accessibility](https://webaim.org/techniques/keyboard/).\n\nThe [Accessibility Insights](https://accessibilityinsights.io/docs/en/web/overview) browser plugin, in FastPass mode, runs the automated checks and has a manual check called \"Tab Stops\".\n\nYou can read more specific instructions for [MacOS keyboard-only testing](https://dequeuniversity.com/mac/keyboard-access-mac).\n\n## Full manual accessibility testing\n\nTo fully check for accessibility compliance, you need to work through the WCAG 2.1 Level A and AA criteria.\n\nThe WCAG requirements form the basis of the [Accessibility Conformance Report (ACR)](/accessibility/documenting/conformance-report). The ACR is required when your app is released, but the more manual accessibility testing done during development the easier it will be to make your app meet the WCAG standards.\n\nThe Web Accessibility Initative (WAI) has good documentation on [How to Meet WCAG](https://www.w3.org/WAI/WCAG21/quickref/) for each criterion.\n\nFull manual testing is required on all the main pages of your app. Many apps use templates and common components so these only need to be tested the once with relevant variants to get full coverage.\n\nThe Design System recommends the [Accessibility Insights](https://accessibilityinsights.io/docs/en/web/overview) browser plugin in Assessment mode. It runs the automated tests but also guides you through manual testing to meet [WCAG AA](/accessibility/requirement/wcag#level-aa).\n\n<IcAlert\n  variant=\"info\"\n  message=\"Once the application is released, it's recommended to do full manual testing for any big features or updates.\"\n/>\n\n### Testing with assistive technologies\n\n[Testing with assistive technologies](/accessibility/testing/assistive-tech-testing) can help to spot accessibility problems that weren't picked up in previous testing.\n",
      "path": "/accessibility/testing/manual-testing",
      "navPriority": 4,
      "date": "2022-11-15",
      "title": "Manual accessibility testing",
      "subTitle": "Manual accessibility testing can include keyboard, screen reader and documentation checks.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/accessibility/testing/manual-testing.mdx",
      "meta": {
        "relativePath": "accessibility/testing/manual-testing.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 3574,
        "formattedSize": "3.5 KB"
      }
    },
    {
      "id": "community__contribute-criteriax",
      "contents": "\n## Contributing\n\nThe Design System Working Group will work with contributors to make sure that all contributions meet our contribution criteria.\n\n| <span style={{width: '12vw', display: 'inline-block'}}>**Criteria**</span> | **Description**                                                                                                                                                                                    |\n| -------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Useful                                                                     | The contribution would be useful for many teams or services.                                                                                                                                       |\n| Unique                                                                     | There isn’t already something similar in the Design System.                                                                                                                                        |\n| Adds value                                                                 | The contribution adds value from an accessibility, usability or standards perspective.<br/><br/>It doesn't break the coherence of any other components.                                            |\n| Usable                                                                     | It meets a high standard of usability.                                                                                                                                                             |\n| Accessible                                                                 | Compliant with the [Corporate Accessibility Standards](/accessibility/requirement) and [WCAG 2.1 AA](https://www.w3.org/TR/WCAG21/).                                                               |\n| Consistent                                                                 | It uses existing [style](/styles) and [components](/components) in the Design System where relevant.<br/><br/>Written content in examples follow the [content style guide](/styles/content-style). |\n\n## Deprecation\n\nAny contributions marked with deprecation will be communicated early and in discussion with the community.\n",
      "path": "/community/contribute-criteria",
      "navPriority": 2,
      "date": "2022-11-15",
      "title": "Contribution criteria",
      "subTitle": "The contents of the Design System must be of a high quality, meet user needs and always be accessible.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/community/contribute-criteria.mdx?at=develop",
      "meta": {
        "relativePath": "community/contribute-criteria.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 2845,
        "formattedSize": "2.8 KB"
      }
    },
    {
      "id": "community__contributex",
      "contents": "\n## Things to consider before contributing\n\n- You can contribute more than just code! Please suggest new ideas or contribute to existing components or patterns.\n- You can add written guidance to the website or designs in Figma.\n- You should contribute in [StencilJS](https://stenciljs.com/) where you can. If that is not possible there will be a delay in the contribution.\n- We’ve adopted the [Contributor Covenant](https://www.contributor-covenant.org/), as expanded on in our [Code of Conduct](https://github.com/mi6/ic-design-system/tree/main/CODE_OF_CONDUCT.md). The core team, Working Group and contributors should always keep it in mind.\n- Read the [contribution criteria](/community/contribute-criteria).\n- For internal users, you can talk to us on the internal platforms, or [raise an issue on GitHub](https://github.com/mi6/ic-design-system/issues).\n\n## Raise a bug or suggest an improvement\n\nRaise a bug or suggest improvements including brand new proposals to the UI Kit.\n\n1. Raise a bug or suggest an improvement to the UI Kit through [GitHub issues](https://github.com/mi6/ic-design-system/issues) with as much information as possible.\n2. Internal users can raise a bug or suggest an improvement to the UI Kit through our Service Desk.\n3. The working group will triage your ticket and get back to you. The Working Group meet on a fortnightly basis to review new tickets, but important bugs will be reviewed sooner.\n\n## Contribute code\n\nYou can help us speed up the development of our Design System by contributing new components and patterns or making improvements to existing ones.\n\n1. Select a ticket from the [backlog](https://github.com/mi6/ic-design-system/issues).\n2. [Claim a ticket](https://github.com/mi6/ic-design-system/issues), according to our [contribution guide](https://github.com/mi6/ic-design-system/tree/main/CONTRIBUTING.md), if you can help contribute code.\n3. If a backlog ticket doesn’t exist for your contribution, you can suggest it [through GitHub issues](https://github.com/mi6/ic-design-system/issues), or our internal Service Desk.\n4. If you're an internal user, we will arrange a kickoff meeting to discuss the scope, plan and agree any support. For any external users, we'll work with you through GitHub issues.\n5. Refer to the technical instructions for [repository coding standards and practices](https://github.com/mi6/ic-design-system/tree/main/CONTRIBUTING.md).\n6. Create a pull request to the develop branch for review.\n\n## Contribute to the Figma UI Kit\n\n<IcAlert\n  title=\"Need to know\"\n  message=\"The Figma UI Kit is only available to internal users at the moment, but we will be sharing it publicly soon. That means only internal users can contribute to our Figma UI Kit at the moment, sorry!\"\n  variant=\"info\"\n/>\n\nIf you're an internal user, you can contribute designs for a new component or an improvement to an existing one in the UI Kit using Figma.\n\n1. Select a design ticket from the [backlog](https://github.com/mi6/ic-design-system/issues).\n2. [Claim a ticket](https://github.com/mi6/ic-design-system/issues), according to our [contribution guide](https://github.com/mi6/ic-design-system/tree/main/CONTRIBUTING.md), if you can help design a component or pattern.\n3. If a backlog ticket doesn’t exist for your contribution, you can suggest it [through GitHub issues](https://github.com/mi6/ic-design-system/issues), or our internal Service Desk.\n4. Complete the Figma contribution template with.\n5. We will arrange a kickoff meeting to discuss the scope, plan and agree any support.\n6. Let us know when your contribution is ready for review.\n\n## Make a change to the website\n\n1. At the bottom of every page in the Design System you will find an 'Edit this page' link.\n2. Edit the page in GitHub to make your change.\n3. Create a pull request to the develop branch for review.\n",
      "path": "/community/contribute",
      "navPriority": 1,
      "date": "2022-11-15",
      "title": "How to contribute",
      "subTitle": "Anyone can contribute to the Design System and UI Kit.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/community/contribute.mdx?at=develop",
      "meta": {
        "relativePath": "community/contribute.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 4135,
        "formattedSize": "4.0 KB"
      }
    },
    {
      "id": "community__indexx",
      "contents": "\n## Our community\n\nThe Design System and UI Kit has been open sourced onto GitHub. This will make it easier for suppliers, external experts and others to contribute back to the Design System. They will realise the value from our work, and our approach to software and inclusive design.\n\nFind out:\n\n- What's coming next? Check out our [ roadmap](/community/roadmap).\n- How you can [contribute](/community/contribute).\n- The Design System [contribution criteria](/community/contribute-criteria).\n- How our community approaches design through our [design principles](/get-started/design-principles).\n\n## Design System Working Group\n\nThe Design System working group is a cross-functional group of developers, designers and other consumers from across the UK Intelligence Community working on or for the IC Design System.\n\nThe working group:\n\n- Checks proposals and contributions against the [contribution criteria](/community/contribute-criteria).\n- Makes recommendations to help contributors align their work to design and coding standards.\n- Makes sure that decisions made are fair and unbiased, and that the IC Design System reflects the needs of the UK Intelligence Community.\n- Has at least one representative from each organisation.\n- Has at least one accessibility expert.\n",
      "path": "/community",
      "date": "2022-11-15",
      "title": "Community",
      "subTitle": "The UK Intelligence Community Design System (IC Design System) is a community effort endorsed across the UK Intelligence Community.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/community/index.mdx",
      "meta": {
        "relativePath": "community/index.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 1596,
        "formattedSize": "1.6 KB"
      }
    },
    {
      "id": "community__roadmapx",
      "contents": "\n## Introduction\n\nThe purpose of the roadmap is to help teams understand when features are likely to be delivered. Some items might change due to priorities or organisation strategies.\n\nSee our [GitHub](https://github.com/orgs/mi6/projects/2/views/1) for more details and our day-to-day activities.\n\n## What's new\n\nWe recently:\n\n- Released the [toast](/components/toasts) component.\n- Released updates to the [cards](/components/cards) component, with images and expandable area.\n- Released the [compact stepper](/components/stepper) component.\n- Released the [chips](/components/chips) component.\n- Released the [popover menu](/components/popover-menu) component.\n- Added asynchronous filtering for [search bar](/components/search-bar) component.\n\n## Working on now\n\nWe're working to:\n\n- Publish our Figma UI Kit to Figma Community.\n- Make sustainability improvements.\n- Research internal requirements for data table component.\n- Research internal requirements for date input component.\n- Release dialog component.\n- Release pagination component.\n- Release accordion component.\n- Release drawer component.\n- Release filters component.\n- Adding clickable variant to [chips](/components/chips) component.\n\nWe're also:\n\n- Raising awareness of the resource across UK Government.\n- Pairing up with engineering teams to find out what's missing in the Design System.\n\n## Coming up next\n\nWe're getting ready to:\n\n- Investigate WCAG 2.2 changes.\n- Research dark mode theme.\n- Research basic data visualisation component.\n- Research tree view component.\n- Research technical utility components, such as no SSR and no JS.\n\n## Future plans\n\nWe plan to:\n\n- Investigate customisation of our components.\n- Add data visualisation, forms and dashboards to the Patterns section of the Design System.\n- Starter app/boilerplate templates.\n- What You See Is What You Get (WYSIWYG) editor.\n- Research timeline component.\n- Research map component.\n",
      "path": "/community/roadmap",
      "navPriority": 1,
      "date": "2023-04-13",
      "title": "Roadmap",
      "subTitle": "Our roadmap shows the latest work and the work we have planned.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/community/roadmap.mdx",
      "meta": {
        "relativePath": "community/roadmap.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 2202,
        "formattedSize": "2.2 KB"
      }
    },
    {
      "id": "components__alerts__accessibilityx",
      "contents": "\n## Easy to use for everyone\n\nWhere alerts are added to a page content, they can be tabbed to following the logical page content order.\n\nWhere both an action button and a dismiss button are included on an alert, focus is first applied to the action button and then the dismiss button.\n\n## For Assistive Technology\n\nAlerts use the `alert` role creating an `aria-live` region that's rendered on page load. If the alert appears on the page, it constitutes a status update. The `aria-live` region causes the alert to be brought to the attention of assistive technology users.\n\nBy default, the alert uses an `aria-live` value of `assertive` to interrupt the user flow to call attention to the status change.\n\nIf the alert content is not urgent, consider using an `aria-live` value of `polite` instead. This announces the alert contents after the current element announcement has been completed.\n\n## Based on\n\nThe alert component is based on the following resources:\n\n- [Alert role, MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/alert_role), accessed March 2022.\n- [How to make inline error messages accessible](https://hiddedevries.nl/en/blog/2017-04-04-how-to-make-inline-error-messages-accessible), accessed March 2022.\n\n## Testing\n\nWe’ve tested this component against WCAG 2.1 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/alerts/accessibility",
      "date": "2023-02-03",
      "title": "Alert",
      "status": "BETA",
      "subTitle": "Alerts display a short important message in a way that attracts attention without interrupting the current task.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/alerts",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/alerts"
        },
        {
          "title": "Code",
          "path": "/components/alerts/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/alerts/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/alerts/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 1966,
        "formattedSize": "1.9 KB"
      }
    },
    {
      "id": "components__alerts__codex",
      "contents": "\n## Component demo\n\nimport { IcAlert, IcButton, IcLink } from \"@ukic/react\";\n\nexport const snippetsDefault = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-alert heading=\"Neutral\" message=\"This alert is for displaying miscellaneous messages.\"></ic-alert>\n<ic-alert variant=\"info\" heading=\"Info\" message=\"This alert is for displaying information.\"></ic-alert>\n<ic-alert variant=\"error\" heading=\"Error\" message=\"This alert is for displaying errors.\"></ic-alert>\n<ic-alert variant=\"warning\" heading=\"Warning\" message=\"This alert is for displaying warnings.\"></ic-alert>\n<ic-alert variant=\"success\" heading=\"Success\" message=\"This alert is for displaying success messages.\"></ic-alert>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcAlert heading=\"Neutral\" message=\"This alert is for displaying miscellaneous messages.\"/>\n<IcAlert variant=\"info\" heading=\"Info\" message=\"This alert is for displaying information.\" />\n<IcAlert variant=\"error\" heading=\"Error\" message=\"This alert is for displaying errors.\" />\n<IcAlert variant=\"warning\" heading=\"Warning\" message=\"This alert is for displaying warnings.\" />\n<IcAlert variant=\"success\" heading=\"Success\" message=\"This alert is for displaying success messages.\" />`,\n  },\n];\n\n<ComponentPreview style={{ display: \"block\" }} snippets={snippetsDefault}>\n  <IcAlert\n    style={{ marginBottom: \"16px\" }}\n    heading=\"Neutral\"\n    message=\"This alert is for displaying miscellaneous messages.\"\n  />\n  <IcAlert\n    style={{ marginBottom: \"16px\" }}\n    variant=\"info\"\n    heading=\"Info\"\n    message=\"This alert is for displaying information.\"\n  />\n  <IcAlert\n    style={{ marginBottom: \"16px\" }}\n    variant=\"error\"\n    heading=\"Error\"\n    message=\"This alert is for displaying errors.\"\n  />\n  <IcAlert\n    style={{ marginBottom: \"16px\" }}\n    variant=\"warning\"\n    heading=\"Warning\"\n    message=\"This alert is for displaying warnings.\"\n  />\n  <IcAlert\n    style={{ marginBottom: \"16px\" }}\n    variant=\"success\"\n    heading=\"Success\"\n    message=\"This alert is for displaying success messages.\"\n  />\n</ComponentPreview>\n\n## Alert details\n\n<ComponentDetails component=\"ic-alert\" />\n\n## Variants\n\n### Dismissible\n\nexport const snippetsDismissible = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-alert heading=\"Dismissible\" message=\"This alert is dismissible.\" dismissible=\"true\"></ic-alert>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcAlert heading=\"Dismissible\" message=\"This alert is dismissible.\" dismissible />`,\n  },\n];\n\n<ComponentPreview snippets={snippetsDismissible}>\n  <IcAlert\n    heading=\"Dismissible\"\n    message=\"This alert is dismissible.\"\n    dismissible\n  />\n</ComponentPreview>\n\n### With action\n\nexport const snippetsWithAction = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-alert heading=\"With action\" message=\"This alert has an action.\">\n      <ic-button slot=\"action\" variant=\"secondary\" appearance=\"dark\">Button</ic-button>\n</ic-alert>\n<script>\n  const btn = document.querySelector('ic-button');\n  btn.addEventListener('click', (ev) => {\n    console.log(ev)\n  })\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcAlert heading=\"With action\" message=\"This alert has an action.\">\n    <IcButton slot=\"action\" variant=\"secondary\" appearance=\"dark\" onClick={(ev) => console.log(ev)}>Button</IcButton>\n</IcAlert>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsWithAction}>\n  <IcAlert heading=\"With action\" message=\"This alert has an action.\">\n    <IcButton\n      slot=\"action\"\n      variant=\"secondary\"\n      appearance=\"dark\"\n      onClick={(ev) => console.log(ev)}\n    >\n      Button\n    </IcButton>\n  </IcAlert>\n</ComponentPreview>\n\n### Title above\n\nexport const snippetsTitleAbove = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-alert heading=\"Title above\" message=\"This alert has the title at the top of the alert.\" title-above=\"true\"></ic-alert>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcAlert heading=\"Title above\" message=\"This alert has the title at the top of the alert.\" titleAbove />`,\n  },\n];\n\n<ComponentPreview snippets={snippetsTitleAbove}>\n  <IcAlert\n    heading=\"Title above\"\n    message=\"This alert has the title at the top of the alert.\"\n    titleAbove\n  />\n</ComponentPreview>\n\n### Responsive title\n\nexport const snippetsResponsiveTitle = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-alert heading=\"This title is very long so should force the alert to add 'title-above'\" message=\"This alert does not have 'title-above' added as a prop but it's forced to add it due to the length of the title.\"></ic-alert>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcAlert heading=\"This title is very long so should force the alert to add 'title-above'\" message=\"This alert does not have 'title-above' added as a prop but it's forced to add it due to the length of the title.\" />`,\n  },\n];\n\n<ComponentPreview snippets={snippetsResponsiveTitle}>\n  <IcAlert\n    heading=\"This title is very long so should force the alert to add 'title-above'\"\n    message=\"This alert does not have 'title-above' added as a prop but it's forced to add it due to the length of the title.\"\n  />\n</ComponentPreview>\n\n### Custom message\n\nexport const snippetsCustomMessage = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-alert heading=\"This alert uses a custom message slot\">\n  <span slot=\"message\">This is some text and <ic-link href=\"/\" inline=\"\">this is an inline link</ic-link> within the text.</span>\n</ic-alert>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcAlert heading=\"This alert uses a custom message slot\">\n  <span slot=\"message\">This is some text and <IcLink href=\"/\" inline>this is an inline link</IcLink> within the text.</span>\n</IcAlert>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsCustomMessage}>\n  <IcAlert heading=\"This alert uses a custom message slot\">\n    <span\n      slot=\"message\"\n      style={{\n        font: \"var(--ic-font-body)\",\n        letterSpacing: \"var(--ic-font-letter-spacing-0pt005)\",\n      }}\n    >\n      This is some text and{\" \"}\n      <IcLink href=\"/\" inline=\"\">\n        this is an inline link\n      </IcLink>{\" \"}\n      within the text.\n    </span>\n  </IcAlert>\n</ComponentPreview>\n",
      "path": "/components/alerts/code",
      "date": "2023-02-06",
      "title": "Alert",
      "status": "BETA",
      "subTitle": "Alerts display a short important message in a way that attracts attention without interrupting the current task.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/alerts",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/alerts"
        },
        {
          "title": "Code",
          "path": "/components/alerts/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/alerts/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/alerts/code.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 6672,
        "formattedSize": "6.5 KB"
      }
    },
    {
      "id": "components__alerts__guidancex",
      "contents": "\nimport { IcAlert } from \"@ukic/react\";\nimport alertFig1 from \"./images/fig-1-do-use-alerts-inline-with-other-associated-page-content.png\";\nimport alertFig2 from \"./images/fig-2-do-use-alerts-with-an-optional-action-and-dismiss-button.png\";\nimport alertFig3 from \"./images/fig-3-dont-use-alerts-overlaid-on-page-content.png\";\nimport alertFig5 from \"./images/fig-5-avoid-using-lengthy-messages-within-an-alert.png\";\n\n## Introduction\n\nAlerts are displayed inline with other page content and show status depending on the severity of the message.\n\n<ComponentPreview>\n  <IcAlert\n    heading=\"Hot drink\"\n    message=\"Please be careful, your drink will be hot.\"\n    variant=\"warning\"\n  />\n</ComponentPreview>\n\nAlerts have five status variants:\n\n- Neutral\n- Success\n- Warning\n- Error\n- Info\n\n## When to use\n\nUse an alert to notify a user without blocking or interrupting them.\n\nPosition alerts in line with page content so that they are closely associated with the related content that follows them.\n\n<DoDontCaution\n  imageSrc={alertFig1}\n  imageAlt=\"An article titled ‘The perfect blend’ displaying a warning alert which reads ‘Take care. This article has yet to be reviewed and so may contain errors’. \"\n  state=\"good\"\n  caption=\"Use alerts in line with other associated page content. \"\n/>\n\nUse alerts to:\n\n- Summarise [form validation](/patterns/form-validation) errors.\n- Inform of failures in a particular part of an app.\n- Inform of a success when returning to a homepage, confirmation page or starting location.\n- Make important information stand out from surrounding content.\n\nInclude a button or link within an alert to provide related interactions.\n\nInclude a dismiss button within an alert to allow the alert to be dismissed.\n\n<DoDontCaution\n  imageSrc={alertFig2}\n  imageAlt=\"An article titled ‘The perfect blend’ showing an information alert with an action button that says ‘Post comment’ and a dismiss button. The alert message says ‘This is a brand new post. Show your appreciation by leaving a comment below.\"\n  state=\"good\"\n  caption=\"Include a button or link to provide actions on an alert. Use a dismiss button to allow the alert to be dismissed.\"\n/>\n\n## When not to use\n\nDon’t use alerts for passive feedback on a process, for example 'draft discarded' or 'email sent', Use [toasts](/components/toasts) instead.\n\nDon’t overlay alerts on page content. Alerts are placed inline with the rest of the page content.\n\n<DoDontCaution\n  imageSrc={alertFig3}\n  imageAlt=\"An article titled ‘The perfect blend’ with an information alert overlaid on top of the page content.\"\n  state=\"bad\"\n  caption=\"Don’t use alerts positioned above/on top of page content.\"\n/>\n\nUse the [form validation pattern](/patterns/form-validation) for errors on a text field or in a form.\n\n## Content\n\nAvoid using lengthy message content in an alert. Use dialogs or a [full page error message](/patterns/form-validation) to display longer messages.\n\nUse a title on an alert to provide a short description of the alert content.\n\n<DoDontCaution\n  imageSrc={alertFig5}\n  imageAlt=\"An image of an article titled ‘The perfect blend’ showing an info alert with a lengthy message that takes a lot of room to display among other page content.\"\n  state=\"caution\"\n  caption=\"Avoid using lengthy messages within an alert.\"\n/>\n\nUse the default icons with success, warning, error and info alerts.\n\nWhen using neutral alerts, specify an icon to be used from the [iconography guidance](/styles/icons). Always specify alt text when using any custom icon.\n\n## Related components\n\n- [Toasts](/components/toasts)\n- [Error validation](/patterns/form-validation)\n",
      "path": "/components/alerts",
      "navPriority": 1,
      "date": "2023-02-03",
      "title": "Alert",
      "status": "BETA",
      "subTitle": "Alerts display a short important message in a way that attracts attention without interrupting the current task.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/alerts",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/alerts"
        },
        {
          "title": "Code",
          "path": "/components/alerts/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/alerts/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/alerts/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.545Z",
        "lastModified": "2023-04-14T11:24:28.545Z",
        "size": 4186,
        "formattedSize": "4.1 KB"
      }
    },
    {
      "id": "components__back-to-top__accessibilityx",
      "contents": "\n## Easy to use for everyone\n\nThe button is located on the bottom right-hand side of a page. This is where users expect to see the button and it's out of the way of most other page content and navigational elements.\n\nThe button targets the main landmark in order to move focus to the top of the content and not require keyboard users to tab through all other navigational components.\n\nWe’ve made sure the component is WCAG compliant with movable interaction and keyboard accessible elements. When using the back to top button, no motion is applied to the automatic scroll.\n\n## For Assistive Technology\n\nEven for short screens, the recommendation is to use a back to top button as it provides people using assistive technology a way to quickly get back to the top of the content.\n\n## Based on\n\nThe back to top component has been based on the following resources:\n\n- [Back to top](https://www.nngroup.com/articles/back-to-top/), Nielsen Normal Group, accessed March 2022.\n- [Scrollable element is keyboard accessible](https://www.w3.org/WAI/standards-guidelines/act/rules/0ssw9k/proposed/), W3, accessed March 2022.\n- [2.3.3 Animation from interactions](https://www.w3.org/WAI/WCAG21/Understanding/animation-from-interactions), W3, accessed March 2022.\n- [2.1.1 Keyboard](https://www.w3.org/WAI/WCAG21/Understanding/keyboard), W3, accessed March 2022.\n- [2.1.3 Keyboard No Exception](https://www.w3.org/WAI/WCAG21/Understanding/keyboard-no-exception), W3, accessed March 2022.\n\n## Testing\n\nWe’ve tested this component against WCAG 2.1 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/back-to-top/accessibility",
      "date": "2023-02-03",
      "title": "Back to top",
      "status": "BETA",
      "subTitle": "The back to top component helps people quickly return to the top of a long page.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/back-to-top",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/back-to-top"
        },
        {
          "title": "Code",
          "path": "/components/back-to-top/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/back-to-top/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/back-to-top/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.549Z",
        "lastModified": "2023-04-14T11:24:28.549Z",
        "size": 2187,
        "formattedSize": "2.1 KB"
      }
    },
    {
      "id": "components__back-to-top__codex",
      "contents": "\nimport { IcButton } from \"@ukic/react\";\n\nexport const snippets = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-back-to-top target=\"main\" />`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcBackToTop target=\"main\" />`,\n  },\n];\n\n## Component demo\n\n<ComponentPreview snippets={snippets}>\n  <IcButton\n    variant=\"secondary\"\n    onClick={() => {\n      window.scrollTo(0, document.body.scrollHeight);\n    }}\n  >\n    Show Back to top\n  </IcButton>\n</ComponentPreview>\n\n## Back to top details\n\n<ComponentDetails component=\"ic-back-to-top\" />\n",
      "path": "/components/back-to-top/code",
      "date": "2023-02-03",
      "title": "Back to top",
      "status": "BETA",
      "subTitle": "The back to top component helps people quickly return to the top of a long page.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/back-to-top",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/back-to-top"
        },
        {
          "title": "Code",
          "path": "/components/back-to-top/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/back-to-top/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/back-to-top/code.mdx",
        "createdAt": "2023-04-14T11:24:28.549Z",
        "lastModified": "2023-04-14T11:24:28.549Z",
        "size": 1070,
        "formattedSize": "1.0 KB"
      }
    },
    {
      "id": "components__back-to-top__guidancex",
      "contents": "\nimport { IcTypography, IcButton } from \"@ukic/react\";\nimport backToTopFig1 from \"./images/fig-1-do-show-the-back-to-top-button-on-the-bottom-right-hand-side.png\";\nimport backToTopFig2 from \"./images/fig-2-do-not-show-the-back-to-top-button-on-a-non-scrollable-page.png\";\nimport backToTopFig3 from \"./images/fig-3-dont-use-other-buttons-for-back-to-top.png\";\nimport backToTopFig4 from \"./images/fig-4-dont-show-back-to-top-anywhere-other-than-the-bottom-right.png\";\nimport backToTopFig5 from \"./images/fig-5-anchored-on-footer.png\";\n\n## Introduction\n\nAn example of the back to top component.\n\n<div id=\"scroll-to-target\" style={{ position: \"absolute\", top: \"-50px\" }}>\n  <IcTypography>Top of page</IcTypography>\n</div>\n\n<ComponentPreview>\n  <IcButton\n    onClick={() => {\n      window.scrollTo(0, document.body.scrollHeight);\n    }}\n  >\n    Show Back to top component\n  </IcButton>\n</ComponentPreview>\n\n## When to use\n\nUse this component for pages with a lot of content that requires scrolling such as intranets, reports and content heavy applications.\n\nConsider using it on all apps to improve usability for everyone, including keyboard-only and some assistive technology users.\n\n<DoDontCaution\n  imageSrc={backToTopFig1}\n  imageAlt=\"An example page that is scrolled half way down and showing an overlaid back to top button in the bottom right-hand side.\"\n  state=\"good\"\n  caption=\"Display the back to top button when a page has been scrolled.\"\n/>\n\n## When not to use\n\nDon't use when the page is designed to fill the viewport without scrolling.\n\nDon't display the back to top button when the page is already scrolled to the top.\n\n<DoDontCaution\n  imageSrc={backToTopFig2}\n  imageAlt=\"An example page that fits within the viewport without scrolling. A back to top button is overlaid in the bottom right-hand side.\"\n  state=\"bad\"\n  caption=\"Don’t show a back to top button when the page does not require scrolling, or is already scrolled to the top of the page.\"\n/>\n\nOnly use the provided back to top component. Don't use any other button in place of the back to top component.\n\n<DoDontCaution\n  imageSrc={backToTopFig3}\n  imageAlt=\"An example page that is scrolled half way down and displays a primary button reading ‘Back to top’ in the bottom right corner instead of the back to top component.\"\n  state=\"bad\"\n  caption=\"Don’t use any other component for providing back to top functionality. Use the back to top button.\"\n/>\n\n## Interaction behaviour\n\nThe back to top button targets the `main` region in your code.\n\nAvoid setting focus to the top of the `body` because users will have to navigate through the header and navigation.\n\n## Layout and placement\n\nDon’t place the back to top button anywhere else as it may obscure important information or interactive components.\n\n<DoDontCaution\n  imageSrc={backToTopFig4}\n  imageAlt=\"An example page that is scrolled halfway that shows a back to top button overlaid in the bottom left-hand corner of the screen. The button obscures a list of filters that appear behind it.\"\n  state=\"bad\"\n  caption=\"Don’t show the back to top button anywhere other than the right-hand side as it may obscure other content.  \"\n/>\n\nWhen the bottom of the page is reached, the back to top button anchors into place above the [footer](/components/footer).\n\n<DoDontCaution\n  imageSrc={backToTopFig5}\n  imageAlt=\"An example page that is scrolled all the way to the bottom showing a footer component with the back to top button positioned above it.\"\n  state=\"good\"\n  caption=\"The back to top button anchors above the footer when scrolled to the bottom of the page.\"\n/>\n\n## Motion\n\nWhen clicked, the component should navigate to the top of the page without any scrolling animation.\n",
      "path": "/components/back-to-top",
      "navPriority": 2,
      "date": "2023-02-03",
      "title": "Back to top",
      "status": "BETA",
      "subTitle": "The back to top component helps people quickly return to the top of a long page.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/back-to-top",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/back-to-top"
        },
        {
          "title": "Code",
          "path": "/components/back-to-top/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/back-to-top/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/back-to-top/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.549Z",
        "lastModified": "2023-04-14T11:24:28.549Z",
        "size": 4247,
        "formattedSize": "4.1 KB"
      }
    },
    {
      "id": "components__breadcrumbs__accessibilityx",
      "contents": "\n## Easy to use for everyone\n\nBreadcrumbs are formed out of a set of links. Each of these links is individually focusable. The breadcrumbs form a navigation landmark with an accessible name of ‘breadcrumbs’ so that they can be easily accessed.\n\n## For Assistive Technology\n\nThe separators between links are added programmatically so that they aren't read out by screen readers. The separators are purely decorative so don't need to be announced to the user.\n\n## Based on\n\nThe breadcrumbs component has been based on the following resources:\n\n- [Navigation landmarks](https://www.w3.org/TR/wai-aria-practices/examples/landmarks/navigation.html#:~:text=Navigation%20landmarks%20provide%20a%20way,website%20or%20page%20content%20navigation), WCS, accessed May 2022.\n- [A11y breadcrumbs](https://scottaohara.github.io/a11y_breadcrumbs/), Scott O’Hara, accessed May 2022.\n- [Breadcrumbs](https://www.nngroup.com/articles/breadcrumbs/), Nielsen Norman Group, accessed May 2022.\n- [Breadcrumbs authoring practices](https://w3c.github.io/aria-practices/examples/breadcrumb/index.html), WCS, accessed May 2022.\n\n## Testing\n\nWe've tested this component against WCAG 2.1 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/breadcrumbs/accessibility",
      "date": "2023-02-03",
      "title": "Breadcrumb",
      "status": "BETA",
      "subTitle": "Breadcrumbs show someone where they are in an app’s hierarchy and provide a secondary method of navigating back to parent pages.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/breadcrumbs",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/breadcrumbs"
        },
        {
          "title": "Code",
          "path": "/components/breadcrumbs/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/breadcrumbs/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/breadcrumbs/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.549Z",
        "lastModified": "2023-04-14T11:24:28.549Z",
        "size": 1863,
        "formattedSize": "1.8 KB"
      }
    },
    {
      "id": "components__breadcrumbs__codex",
      "contents": "\nimport { IcBreadcrumbGroup, IcBreadcrumb } from \"@ukic/react\";\n\nimport { NavLink, MemoryRouter } from \"react-router-dom\";\n\n## Component demo\n\nexport const snippets = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-breadcrumb-group>\n  <ic-breadcrumb page-title=\"Home\" href=\"#\"></ic-breadcrumb>\n  <ic-breadcrumb page-title=\"Beverages\" href=\"#\"></ic-breadcrumb>\n  <ic-breadcrumb \n    current=\"true\" \n    page-title=\"Coffee\" \n    href=\"#\"\n  >\n  </ic-breadcrumb>\n</ic-breadcrumb-group>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcBreadcrumbGroup>\n  <IcBreadcrumb pageTitle=\"Home\" href=\"#\" />\n  <IcBreadcrumb pageTitle=\"Beverages\" href=\"# \" />\n  <IcBreadcrumb \n    current \n    pageTitle=\"Coffee\"\n    href=\"#\"\n  />\n</IcBreadcrumbGroup>`,\n  },\n];\n\n<ComponentPreview snippets={snippets}>\n  <IcBreadcrumbGroup>\n    <IcBreadcrumb pageTitle=\"Home\" href=\"#\" />\n    <IcBreadcrumb pageTitle=\"Beverages\" href=\"# \" />\n    <IcBreadcrumb current pageTitle=\"Coffee\" href=\"#\" />\n  </IcBreadcrumbGroup>\n</ComponentPreview>\n\n## Breadcrumb details\n\n<ComponentDetails component=\"ic-breadcrumb\" />\n\n## Breadcrumb group details\n\n<ComponentDetails component=\"ic-breadcrumb-group\" />\n\n## Variants\n\n### Back\n\nexport const back = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-breadcrumb-group back-breadcrumb-only=\"true\">\n  <ic-breadcrumb page-title=\"Home\" href=\"#\"></ic-breadcrumb>\n  <ic-breadcrumb page-title=\"Beverages\" href=\"#\"></ic-breadcrumb>\n  <ic-breadcrumb \n    current=\"true\" \n    page-title=\"Coffee\" \n    href=\"#\"\n  >\n  </ic-breadcrumb>\n</ic-breadcrumb-group>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcBreadcrumbGroup backBreadcrumbOnly>\n  <IcBreadcrumb pageTitle=\"Home\" href=\"#\" />\n  <IcBreadcrumb pageTitle=\"Beverages\" href=\"#\" />\n  <IcBreadcrumb \n    current \n    pageTitle=\"Coffee\"\n    href=\"#\"\n  />\n</IcBreadcrumbGroup>`,\n  },\n];\n\n<ComponentPreview snippets={back}>\n  <IcBreadcrumbGroup backBreadcrumbOnly>\n    <IcBreadcrumb pageTitle=\"Home\" href=\"#\" />\n    <IcBreadcrumb pageTitle=\"Beverages\" href=\"#\" />\n    <IcBreadcrumb current pageTitle=\"Coffee\" href=\"#\" />\n  </IcBreadcrumbGroup>\n</ComponentPreview>\n\n### With icons\n\nexport const withIcons = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-breadcrumb-group>\n  <ic-breadcrumb page-title=\"Home\" href=\"#\">\n    <svg slot=\"icon\">...</svg>\n  </ic-breadcrumb>\n  <ic-breadcrumb page-title=\"Beverages\" href=\"#\">\n    <svg slot=\"icon\">...</svg>\n  </ic-breadcrumb>\n  <ic-breadcrumb \n    current=\"true\" \n    page-title=\"Coffee\" \n    href=\"#\"\n  >\n    <svg slot=\"icon\">...</svg>\n  </ic-breadcrumb>\n</ic-breadcrumb-group>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcBreadcrumbGroup>\n  <IcBreadcrumb pageTitle=\"Home\" href=\"#\">\n    <SlottedSVG slot=\"icon\" ... />\n  </IcBreadcrumb>\n  <IcBreadcrumb pageTitle=\"Beverages\" href=\"#\">\n    <SlottedSVG slot=\"icon\" ... />\n  </IcBreadcrumb>\n  <IcBreadcrumb \n    pageTitle=\"Coffee\" \n    current\n    href=\"#\"\n  >\n    <SlottedSVG slot=\"icon\" ... />\n  </IcBreadcrumb>\n</IcBreadcrumbGroup>`,\n  },\n];\n\n<ComponentPreview snippets={withIcons}>\n  <IcBreadcrumbGroup>\n    <IcBreadcrumb pageTitle=\"Home\" href=\"#\">\n      <svg\n        slot=\"icon\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          d=\"M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z\"\n          fill=\"currentColor\"\n        />\n      </svg>\n    </IcBreadcrumb>\n    <IcBreadcrumb pageTitle=\"Beverages\" href=\"#\">\n      <svg\n        slot=\"icon\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          d=\"M20 3H4v10c0 2.21 1.79 4 4 4h6c2.21 0 4-1.79 4-4v-3h2c1.11 0 2-.9 2-2V5c0-1.11-.89-2-2-2zm0 5h-2V5h2v3zM4 19h16v2H4z\"\n          fill=\"currentColor\"\n        />\n      </svg>\n    </IcBreadcrumb>\n    <IcBreadcrumb pageTitle=\"Coffee\" current href=\"#\">\n      <svg\n        slot=\"icon\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          d=\"M18.5 3H6c-1.1 0-2 .9-2 2v5.71c0 3.83 2.95 7.18 6.78 7.29 3.96.12 7.22-3.06 7.22-7v-1h.5c1.93 0 3.5-1.57 3.5-3.5S20.43 3 18.5 3zM16 5v3H6V5h10zm2.5 3H18V5h.5c.83 0 1.5.67 1.5 1.5S19.33 8 18.5 8zM4 19h16v2H4v-2z\"\n          fill=\"currentColor\"\n        />\n      </svg>\n    </IcBreadcrumb>\n  </IcBreadcrumbGroup>\n</ComponentPreview>\n\n### Collapsed\n\nexport const collapsed = [\n  {\n    language: \"Web component\",\n    snippet: ` <ic-breadcrumb-group collapsed=\"true\">\n  <ic-breadcrumb page-title=\"Home\" href=\"#\"></ic-breadcrumb>\n  <ic-breadcrumb page-title=\"Beverages\" href=\"#\"></ic-breadcrumb>\n  <ic-breadcrumb \n      current=\"true\" \n      page-title=\"Coffee\" \n      href=\"#\"\n    >\n    </ic-breadcrumb>\n</ic-breadcrumb-group>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcBreadcrumbGroup collapsed>\n    <IcBreadcrumb pageTitle=\"Home\" href=\"#\" />\n    <IcBreadcrumb pageTitle=\"Beverages\" href=\"#\" />\n    <IcBreadcrumb \n      pageTitle=\"Coffee\" \n      current\n      href=\"#\"\n    >\n</IcBreadcrumbGroup>`,\n  },\n];\n\n<ComponentPreview snippets={collapsed}>\n  <IcBreadcrumbGroup collapsed>\n    <IcBreadcrumb pageTitle=\"Home\" href=\"#\" />\n    <IcBreadcrumb pageTitle=\"Beverages\" href=\"#\" />\n    <IcBreadcrumb pageTitle=\"Coffee\" current href=\"#\" />\n  </IcBreadcrumbGroup>\n</ComponentPreview>\n\n### With React Router\n\nexport const withReactRouter = [\n  {\n    language: \"React\",\n    snippet: `<MemoryRouter initialEntries={[\"/\"]}>\n  <IcBreadcrumbGroup>\n    <IcBreadcrumb pageTitle=\"Home\">\n      <NavLink to=\"/\">Home</NavLink>\n    </IcBreadcrumb>\n    <IcBreadcrumb pageTitle=\"Beverages\">\n      <NavLink to=\"/\">Beverages</NavLink>\n    </IcBreadcrumb>\n    <IcBreadcrumb \n      pageTitle=\"Coffee\" \n      current\n      href=\"#\"\n    >\n      <NavLink to=\"/\">Coffee</NavLink>\n    </IcBreadcrumb>\n  </IcBreadcrumbGroup>\n</MemoryRouter>\n`,\n  },\n];\n\n<ComponentPreview snippets={withReactRouter}>\n  <MemoryRouter initialEntries={[\"/\"]}>\n    <IcBreadcrumbGroup>\n      <IcBreadcrumb pageTitle=\"Home\">\n        <NavLink to=\"/\">Home</NavLink>\n      </IcBreadcrumb>\n      <IcBreadcrumb pageTitle=\"Beverages\">\n        <NavLink to=\"/\">Beverages</NavLink>\n      </IcBreadcrumb>\n      <IcBreadcrumb pageTitle=\"Coffee\" current href=\"#\">\n        <NavLink to=\"/\">Coffee</NavLink>\n      </IcBreadcrumb>\n    </IcBreadcrumbGroup>\n  </MemoryRouter>\n</ComponentPreview>\n",
      "path": "/components/breadcrumbs/code",
      "date": "2023-02-03",
      "title": "Breadcrumb",
      "status": "BETA",
      "subTitle": "Breadcrumbs show someone where they are in an app’s hierarchy and provide a secondary method of navigating back to parent pages.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/breadcrumbs",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/breadcrumbs"
        },
        {
          "title": "Code",
          "path": "/components/breadcrumbs/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/breadcrumbs/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/breadcrumbs/code.mdx",
        "createdAt": "2023-04-14T11:24:28.549Z",
        "lastModified": "2023-04-14T11:24:28.549Z",
        "size": 7083,
        "formattedSize": "6.9 KB"
      }
    },
    {
      "id": "components__breadcrumbs__guidancex",
      "contents": "\nimport { IcBreadcrumbGroup, IcBreadcrumb } from \"@ukic/react\";\nimport breadcrumbsFig1 from \"./images/fig-1-use-breadcrumbs-as-a-secondary-navigation-method.png\";\nimport breadcrumbsFig2 from \"./images/fig-2-dont-use-breadcrumbs-for-shallow-app-structures.png\";\nimport breadcrumbsFig3 from \"./images/fig-3-dont-include-current-page-in-breadcrumbs.png\";\nimport breadcrumbsFig4 from \"./images/fig-4-use-contrast-breadcrumbs-for-different-backgrounds.png\";\n\n## Introduction\n\nAn example of the breadcrumbs component.\n\n<ComponentPreview>\n  <IcBreadcrumbGroup>\n    <IcBreadcrumb pageTitle=\"Home\" href=\"#\" />\n    <IcBreadcrumb pageTitle=\"Beverages\" href=\"# \" />\n    <IcBreadcrumb current=\"true\" pageTitle=\"Coffee\" href=\"#\" />\n  </IcBreadcrumbGroup>\n</ComponentPreview>\n\n## When to use\n\nUse breadcrumbs to describe an app’s hierarchy and where the current page sits within it. Use breadcrumbs for apps that have a large number of pages within a complex structure.\n\nShow the current page’s parents, grandparents and other ancestors so that the user can easily move back up the hierarchy. Always show a link to the app’s homepage as the top-level link in the breadcrumb component.\n\nUse breadcrumbs as a secondary navigation option to supplement the app’s main navigation method.\n\n<DoDontCaution\n  imageSrc={breadcrumbsFig1}\n  imageAlt=\"Above the page header is a breadcrumb component with links to parent pages for ‘Coffees’, ‘Beverages’ and ‘Home’. This is separate from the site navigation.\"\n  state=\"good\"\n  caption=\"A breadcrumb providing a secondary method of navigation that supplements the main navigation from the top navigation.\"\n/>\n\nUse the ‘back breadcrumb’ for apps with simple structures that are only one or two levels deep. Show the current page’s immediate parent in the back breadcrumb link.\n\nUse a condensed breadcrumb to hide the middle steps between the page’s parent and the homepage. However, always allow the condensed breadcrumb to be expanded to show the full path.\n\n## When not to use\n\nDon’t use breadcrumbs as the primary method of navigating through an app’s pages. Always include a global navigation method to allow any page to be easily accessed from any other page.\n\nDon’t use breadcrumbs to show the history of recently visited pages. Only use breadcrumbs to show the location of the current page within an app’s structure.\n\nDon’t use breadcrumbs if the app’s structure is only one or two pages deep. Use the ‘back breadcrumb’ or use a different method to indicate the page’s position.\n\n<DoDontCaution\n  imageSrc={breadcrumbsFig2}\n  imageAlt=\"Above the page header is a breadcrumb component with links to parent pages for ‘Coffee’ and ‘Home’.\"\n  state=\"bad\"\n  caption=\"Don’t use breadcrumbs for apps with structures that are only one or two pages deep.\"\n/>\n\nDon’t include the current page as a link within the breadcrumbs. Instead use clear titling on the page itself to label the current page. If displaying the current page within the breadcrumb, then make sure it is not clickable.\n\n<DoDontCaution\n  imageSrc={breadcrumbsFig3}\n  imageAlt=\"An example app called ‘A whole latte love’ showing a page titled ‘Latte’. A breadcrumb exists in the page header that includes links to the current page ‘Latte’, and its ancestors ‘Coffee’, ‘Beverages’ and ‘Home’.\"\n  state=\"bad\"\n  caption=\"Don’t include the current page as a link within the breadcrumb.\"\n/>\n\nAvoid showing more than 6 levels in a breadcrumb. Consider your app’s information architecture and whether the site’s structure can be flattened. If this can’t be achieved, use hub pages as the first link in a breadcrumb which themselves provide a method of returning back to the homepage.\n\n## Colour\n\nAlways use the default appearance of breadcrumbs to ensure that the links are recognisable as links. However, use the light or dark appearance if breadcrumbs are positioned on different coloured backgrounds to ensure good colour contrast.\n\n<DoDontCaution\n  imageSrc={breadcrumbsFig4}\n  imageAlt=\"An example app called ‘A whole latte love’ that shows a page titled ‘Latte’. A hero banner sits at the top of the page with a dark blue background. A breadcrumb component that sits on top of the dark hero banner uses white styled links to achieve high contrast.\"\n  state=\"good\"\n  caption=\"Use contrast styling if using breadcrumbs on different coloured backgrounds.\"\n/>\n\n## Content\n\nMake sure that the breadcrumb label is the exact title of the page it links to.\n\n## Layout and placement\n\nAlways position breadcrumbs at the top of page content but below main navigation components such as the [top navigation](/components/top-nav).\n\n## Related components\n\n- [Page header](/components/page-header)\n",
      "path": "/components/breadcrumbs",
      "navPriority": 3,
      "date": "2023-02-03",
      "title": "Breadcrumb",
      "status": "BETA",
      "subTitle": "Breadcrumbs show someone where they are in an app’s hierarchy and provide a secondary method of navigating back to parent pages.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/breadcrumbs",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/breadcrumbs"
        },
        {
          "title": "Code",
          "path": "/components/breadcrumbs/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/breadcrumbs/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/breadcrumbs/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.549Z",
        "lastModified": "2023-04-14T11:24:28.549Z",
        "size": 5348,
        "formattedSize": "5.2 KB"
      }
    },
    {
      "id": "components__buttons__accessibilityx",
      "contents": "\n## Easy to use for everyone\n\nWhen interacting with a button using the keyboard, the button is triggered using the **space** or **enter** key when the button is focused.\n\n## For Assistive Technology\n\nButtons use the role of `button` as opposed to `link` in order to help users of assistive technology understand that the button is performing an action on the page instead of navigating them to a new location.\n\n## Based on\n\nThe button component is based on the following resources:\n\n- [Button role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/button_role), MDN web docs, accessed January 2022.\n- [Building Accessible Buttons with ARIA](https://www.deque.com/blog/accessible-aria-buttons/), Deque University, accessed January 2022.\n\n## Testing\n\nWe've tested this component against WCAG 2.1 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/buttons/accessibility",
      "date": "2023-02-03",
      "title": "Button",
      "status": "BETA",
      "subTitle": "Buttons are used to allow or encourage people to take an action.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/buttons",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/buttons"
        },
        {
          "title": "Code",
          "path": "/components/buttons/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/buttons/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/buttons/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.565Z",
        "lastModified": "2023-04-14T11:24:28.565Z",
        "size": 1422,
        "formattedSize": "1.4 KB"
      }
    },
    {
      "id": "components__buttons__codex",
      "contents": "\nimport { IcButton } from \"@ukic/react\";\n\n## Component demo\n\nexport const snippetsDefault = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-button id='my-button' variant=\"primary\">Primary button</ic-button>\n<ic-button variant=\"secondary\">Secondary button</ic-button>\n<ic-button variant=\"tertiary\">Tertiary button</ic-button>\n<ic-button variant=\"destructive\">Destructive button</ic-button>\n<script>\n  const btn = document.querySelector('#my-button');\n  btn.addEventListener('click', (ev) => {\n    console.log(ev);\n  })\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcButton variant=\"primary\" onClick={(ev) => console.log(ev)}>Primary button</IcButton>\n<IcButton variant=\"secondary\">Secondary button</IcButton>\n<IcButton variant=\"tertiary\">Tertiary button</IcButton>\n<IcButton variant=\"destructive\">Destructive button</IcButton>`,\n  },\n];\n\n<ComponentPreview style={{ gap: \"8px\" }} snippets={snippetsDefault}>\n  <IcButton variant=\"primary\" onClick={(ev) => console.log(ev)}>\n    Primary button\n  </IcButton>\n  <IcButton variant=\"secondary\">Secondary button</IcButton>\n  <IcButton variant=\"tertiary\">Tertiary button</IcButton>\n  <IcButton variant=\"destructive\">Destructive button</IcButton>\n</ComponentPreview>\n\n## Button details\n\n<ComponentDetails component=\"ic-button\" />\n\n## Variants\n\n### Other states\n\nexport const snippetsOtherStates = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-button variant=\"primary\" disabled=\"true\">Disabled button</ic-button>\n<ic-button variant=\"secondary\" loading=\"true\">Loading button</ic-button>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcButton variant=\"primary\" disabled>Disabled button</IcButton>\n<IcButton variant=\"secondary\" loading>Loading button</IcButton>`,\n  },\n];\n\n<ComponentPreview style={{ gap: \"8px\" }} snippets={snippetsOtherStates}>\n  <IcButton variant=\"primary\" disabled>\n    Disabled button\n  </IcButton>\n  <IcButton variant=\"secondary\" loading>\n    Loading button\n  </IcButton>\n</ComponentPreview>\n\n### With icon\n\nexport const snippetsWithIcon = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-button variant=\"primary\">\n  <svg\n    slot=\"icon\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height=\"24px\"\n    viewBox=\"0 0 24 24\"\n    width=\"24px\"\n    fill=\"#000000\"\n    >\n    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"></path>\n    <path d=\"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\"></path>\n  </svg>Icon button\n</ic-button>\n<ic-button variant=\"icon\" aria-label=\"refresh\">\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height=\"24px\"\n    viewBox=\"0 0 24 24\"\n    width=\"24px\"\n    fill=\"#000000\"\n    >\n    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"></path>\n    <path d=\"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\"></path>\n  </svg>\n</ic-button>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcButton variant=\"primary\">\n  <SlottedSVG\n    slot=\"icon\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height=\"24px\"\n    viewBox=\"0 0 24 24\"\n    width=\"24px\"\n    fill=\"#000000\"\n    >\n    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"></path>\n    <path d=\"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\"></path>\n  </SlottedSVG>\n  Icon button\n</IcButton>\n<IcButton variant=\"icon\" aria-label=\"refresh\">\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height=\"24px\"\n    viewBox=\"0 0 24 24\"\n    width=\"24px\"\n    fill=\"#000000\"\n    >\n    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"></path>\n    <path d=\"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\"></path>\n  </svg>\n</IcButton>`,\n  },\n];\n\n<ComponentPreview style={{ gap: \"8px\" }} snippets={snippetsWithIcon}>\n  <IcButton variant=\"primary\">\n    Icon button\n    <svg\n      slot=\"icon\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height=\"24px\"\n      viewBox=\"0 0 24 24\"\n      width=\"24px\"\n      fill=\"#000000\"\n    >\n      <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n      <path d=\"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\" />\n    </svg>\n  </IcButton>\n  <IcButton variant=\"icon\" aria-label=\"refresh\">\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height=\"24px\"\n      viewBox=\"0 0 24 24\"\n      width=\"24px\"\n      fill=\"#000000\"\n    >\n      <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n      <path d=\"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\" />\n    </svg>\n  </IcButton>\n</ComponentPreview>\n\n### Sizing\n\nexport const snippetsSizing = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-button variant=\"primary\" size=\"small\">Small button</ic-button>\n<ic-button variant=\"primary\">Default button</ic-button>\n<ic-button variant=\"primary\" size=\"large\">Large button</ic-button>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcButton variant=\"primary\" size=\"small\">Small button</IcButton>\n<IcButton variant=\"primary\">Default button</IcButton>\n<IcButton variant=\"primary\" size=\"large\">Large button</IcButton>`,\n  },\n];\n\n<ComponentPreview style={{ gap: \"8px\" }} snippets={snippetsSizing}>\n  <IcButton variant=\"primary\" size=\"small\">\n    Small button\n  </IcButton>\n  <IcButton variant=\"primary\">Default button</IcButton>\n  <IcButton variant=\"primary\" size=\"large\">\n    Large button\n  </IcButton>\n</ComponentPreview>\n\n### Colour variants\n\nexport const snippetsColour = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-button variant=\"primary\" appearance=\"dark\">Dark button</ic-button>\n<ic-button variant=\"primary\" appearance=\"light\">Light button</ic-button>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcButton variant=\"primary\" appearance=\"dark\">Dark button</IcButton>\n<IcButton variant=\"primary\" appearance=\"light\">Light button</IcButton>`,\n  },\n];\n\n<ComponentPreview style={{ gap: \"8px\" }} snippets={snippetsColour}>\n  <IcButton variant=\"primary\" appearance=\"dark\">\n    Dark button\n  </IcButton>\n  <IcButton variant=\"primary\" appearance=\"light\">\n    Light button\n  </IcButton>\n</ComponentPreview>\n",
      "path": "/components/buttons/code",
      "date": "2023-02-06",
      "title": "Button",
      "status": "BETA",
      "subTitle": "Buttons are used to allow or encourage people to take an action.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/buttons",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/buttons"
        },
        {
          "title": "Code",
          "path": "/components/buttons/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/buttons/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/buttons/code.mdx",
        "createdAt": "2023-04-14T11:24:28.565Z",
        "lastModified": "2023-04-14T11:24:28.565Z",
        "size": 7144,
        "formattedSize": "7.0 KB"
      }
    },
    {
      "id": "components__buttons__guidancex",
      "contents": "\nimport { IcButton } from \"@ukic/react\";\nimport buttonFig1 from \"./images/fig-1-use-buttons-to-complete-actions-on-the-page-such-as-adding-or-deleting-an-item-confirming-or-closing-a-dialog-or-as-a-tool-in-a-toolbar.png\";\nimport buttonFig2 from \"./images/fig-2-do-not-use-buttons-to-navigate-users-to-a-new-page.png\";\nimport buttonFig3 from \"./images/fig-3-use-contrast-variants-on-different-coloured-backgrounds-to-ensure-good-contrast-and-avoid-colours-clashing.png\";\nimport buttonFig4 from \"./images/fig-4-make-sure-to-use-the-correct-button-variant-to-meet-minimum-contrast-requirements.png\";\nimport buttonFig5 from \"./images/fig-5-use-the-correct-buttons-sizes-to-match-other-UI-component-sizes.png\";\nimport buttonFig6 from \"./images/fig-6-do-not-mix-different-sized-components.png\";\nimport buttonFig7 from \"./images/fig-7-use-large-buttons-for-standalone-higher-priority-actions.png\";\nimport buttonFig8 from \"./images/fig-8-use-a-primary-button-for-the-most-important-action-or-when-you-want-to-influence-an-action.png\";\nimport buttonFig9 from \"./images/fig-9-two-primary-buttons-make-it-less-clear-what-the-expected-action-is.png\";\nimport buttonFig10 from \"./images/fig-10-use-multiple-secondary-buttons-to-provide-lower-priority-actions-and-a-primary-button-for-the-higher-priority-action.png\";\nimport buttonFig11 from \"./images/fig-11-use-tertiary-buttons-to-provide-a-dismissive-or-cancellation-action-when-paired-with-a-primary-button-that-provides-the-main-call-to-action.png\";\nimport buttonFig12 from \"./images/fig-12-use-a-primary-button-to-highlight-the-key-action-in-a-button-group.png\";\nimport buttonFig13 from \"./images/fig-13-do-not-use-different-button-types-for-different-actions-in-a-group.png\";\nimport buttonFig14 from \"./images/fig-14-position-primary-buttons-to-the-left-when-on-a-page.png\";\nimport buttonFig15 from \"./images/fig-15-do-position-primary-buttons-to-the-right-when-on-a-dialog.png\";\nimport buttonFig16 from \"./images/fig-16-use-concise-but-specific-labels.png\";\nimport buttonFig17 from \"./images/fig-17-do-not-use-long-labels-or-generic-labels.png\";\nimport buttonFig18 from \"./images/fig-18-use-icons-with-clear-meaning-to-add-clarity-to-the-action.png\";\nimport buttonFig19 from \"./images/fig-19-do-not-use-complicated-unrelated-or-ambiguous-icons-on-buttons.png\";\n\n## Component variants\n\nThere are five variants of button:\n\n- Primary buttons\n- Secondary buttons\n- Tertiary buttons\n- Icon buttons\n- Destructive buttons\n\n<ComponentPreview style={{ gap: \"8px\" }}>\n  <IcButton variant=\"primary\">Primary button</IcButton>\n  <IcButton variant=\"secondary\">Secondary button</IcButton>\n  <IcButton variant=\"tertiary\">Tertiary button</IcButton>\n  <IcButton variant=\"destructive\">Destructive button</IcButton>\n</ComponentPreview>\n\n## When to use\n\n### Primary buttons\n\nUse primary buttons to provide high emphasis to a key action. Use them for the most important action on a page or within a container.\n\n### Secondary buttons\n\nUse secondary buttons to provide medium emphasis for less important actions on a page or within a container.\n\nGroup these buttons to provide a set of actions of equal priority.\n\n### Tertiary buttons\n\nUse tertiary buttons to provide low emphasis for low priority actions on a page or within a container that aren't important or used frequently.\n\nUse tertiary buttons for dismissive actions such as to close a dialog, navigate back a step or to cancel an action.\n\n### Icon buttons\n\nIcon buttons work like a normal button but don't include a visible text label. Use them to provide a compact method of triggering an action.\n\nUse icon buttons for well understood actions that are represented clearly by the icon's visual content. For example, a 'bin' icon indicates a delete function. Read more about [iconography](/styles/icons) for guidance on selecting and creating icons.\n\nAlways provide a textual description available programmatically and a visible label that is displayed using a tooltip when hovering on an icon button.\n\n### Destructive buttons\n\nUse destructive buttons for actions that can't be reversed. For example, use them for a delete action that can't be undone.\n\n## When not to use\n\n### Buttons and links\n\nButtons should trigger actions and affect content on the current page or container. To navigate to a new page or open a new tab use links instead.\n\n<DoDontCaution\n  imageSrc={buttonFig1}\n  imageAlt=\"An example page showing a primary button labelled 'submit' at the bottom of a page.\"\n  state=\"good\"\n  caption=\"Use buttons to complete actions on the page such as adding or deleting an item, confirming or closing a dialog, or as a tool in a toolbar.\"\n/>\n\n<DoDontCaution\n  imageSrc={buttonFig2}\n  imageAlt=\"An example of a page with a hero banner with the title 'Today's good mood is sponsored by coffee.' A secondary button is displayed on the hero banner acting as a link to a new page called 'Get some coffee'.\"\n  state=\"bad\"\n  caption=\"Don't use buttons to navigate users to a new page.\"\n/>\n\n## Interaction behaviour\n\nWhen an action triggers a background task use the button loading state to provide feedback to the user that something is happening.\n\n<ComponentPreview style={{ gap: \"8px\" }}>\n  <IcButton variant=\"secondary\" loading>\n    Loading\n  </IcButton>\n</ComponentPreview>\n\n## Colour\n\nDon't change a button colour as this makes them less recognisable as actions.\n\n### Appearance\n\nPrimary, secondary, tertiary and icon buttons have default, light and dark appearance options.\n\nUse different button appearances when placing buttons on coloured backgrounds to ensure good contrast and avoid colours clashing. Use light appearance buttons on dark backgrounds and use dark appearance buttons on light backgrounds.\n\nWhen you use the UI Kit components together they will select the appropriate variant.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={buttonFig3}\n    imageAlt=\"Button variants on a white background, dark button variants on light coloured backgrounds, and light button variants on dark backgrounds.\"\n    state=\"good\"\n    caption=\"Use different appearance options on different coloured backgrounds to ensure good contrast and avoid colours clashing.\"\n  />\n  <DoDontCaution\n    imageSrc={buttonFig4}\n    imageAlt=\"A bad example showing dark button variants used on a white background, coloured button variants on coloured backgrounds, and dark button variants on dark backgrounds.\"\n    state=\"bad\"\n    caption=\"Use the correct button appearance to meet minimum contrast requirements.\"\n  />\n</DoubleDoDontCaution>\n\n## Sizing\n\nButtons have three different sizing options: default, small and large.\n\nUse components of the same size together. For example, use a default sized button with a default sized input component, or use a small sized button with a small sized input component.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={buttonFig5}\n    imageAlt=\"A form with correctly sized components. A normal sized input component is paired with normal sized button, and a small sized input component is paired with a small sized button.\"\n    state=\"good\"\n    caption=\"Use the correct buttons sizes to match other UI component sizes.\"\n  />\n  <DoDontCaution\n    imageSrc={buttonFig6}\n    imageAlt=\"A form with incorrectly sized components. A normal sized input component is paired with small sized button, and a small sized input component is paired with a normal sized button.\"\n    state=\"bad\"\n    caption=\"Don't mix different sized components.\"\n  />\n</DoubleDoDontCaution>\n\nUse large buttons only for high emphasis actions that sit independently from other UI elements.\n\n<DoDontCaution\n  imageSrc={buttonFig7}\n  imageAlt=\"A page showing a large sized button on its own at the bottom of the page content.\"\n  state=\"good\"\n  caption=\"Use large buttons for standalone, higher priority actions.\"\n/>\n\n## Layout and placement\n\n### Button hierarchy\n\nUse only one primary button on a page or within a container. Show the most important action with a primary button.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={buttonFig8}\n    imageAlt=\"A dialog box reading 'Are you sure you want to continue?' using a primary button for the important 'continue' action and a tertiary button for the lower priority 'Go back' dismissive action.\"\n    state=\"good\"\n    caption=\"Use a primary button for the most important action or when you want to influence an action.\"\n  />\n  <DoDontCaution\n    imageSrc={buttonFig9}\n    imageAlt=\"A dialog box reading 'Are you sure you want to continue?' using one primary button for the 'Continue' action and another primary button for the 'Go back' action.\"\n    state=\"bad\"\n    caption=\"Two primary buttons make it less clear what the expected action is.\"\n  />\n</DoubleDoDontCaution>\n\nUse secondary buttons to perform secondary or lower priority actions.\n\nGroup multiple secondary actions to provide a set of possible actions with an equal priority.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={buttonFig10}\n    imageAlt=\"A dialog reading 'How would you like to continue?' showing a single primary button for the 'save' action and two secondary buttons for the 'save as...' and 'duplicate' actions.\"\n    state=\"good\"\n    caption=\"Use multiple secondary buttons to provide lower priority actions, whilst using a primary button for the higher priority action.\"\n  />\n  <DoDontCaution\n    imageSrc={buttonFig11}\n    imageAlt=\"A dialog that reads 'Are you sure you want to continue?' showing a primary button for the 'continue' action, as well as a tertiary button providing the dismissive 'Go back' action.\"\n    state=\"good\"\n    caption=\"Use tertiary buttons to provide a dismissive or cancellation action when paired with a primary button that provides the main call to action.\"\n  />\n</DoubleDoDontCaution>\n\n### Button grouping\n\nGroup buttons to provide a set of actions.\n\nHighlight the primary action in the group using a primary button. Use all secondary or all tertiary buttons for the rest of the actions.\n\nDon't mix secondary and text buttons to provide multiple actions in a group.\n\n<DoDontCaution\n  imageSrc={buttonFig12}\n  imageAlt=\"An example page showing a button group containing a primary button indicating the main ‘Submit’ call to action and two secondary buttons for the lower priority ‘Duplicate’ and ‘Save as’ options.\"\n  state=\"good\"\n  caption=\"Use a primary button to highlight the key action in a button group.\"\n/>\n\n<DoDontCaution\n  imageSrc={buttonFig13}\n  imageAlt=\"An example page showing a button group comprised of a tertiary button for the ‘Cancel’ action, a destructive button for the ‘Delete’ action, a secondary button for the ‘Save as’ action and a primary button for the ‘submit’.\"\n  state=\"bad\"\n  caption=\"Don’t use different button types for different actions in a group.\"\n/>\n\nPlace primary buttons on the left of a button group unless presented in a modal window where they should be located on the right. This follows common reading patterns when viewing a page and a dialog.\n\n<DoDontCaution\n  imageSrc={buttonFig14}\n  imageAlt=\"An example page showing a button group positioned in the main page content aligned to the left of the page. The group has a primary button positioned on the left and two secondary buttons to its right.\"\n  state=\"good\"\n  caption=\"Position primary buttons to the left when on a page.\"\n/>\n\n<DoDontCaution\n  imageSrc={buttonFig15}\n  imageAlt=\"A dialog showing a button group positioned to the right. The group has a primary button positioned on the right of the group and two secondary buttons on its left.\"\n  state=\"good\"\n  caption=\"Position primary buttons to the right when on a dialog.\"\n/>\n\n## Content\n\n### Labels\n\nFollow the [content style](/styles/content-style) guidelines when writing button labels.\n\nAdd useful labels to buttons so that they don't rely on context. Avoid using long labels and keep them specific and concise.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={buttonFig16}\n    imageAlt=\"A dialog with the heading ‘Are you sure you want to continue?’. There are two buttons in the modal with labels which read ‘go back’ and ‘continue’.\"\n    state=\"good\"\n    caption=\"Use concise but specific labels.\"\n  />\n  <DoDontCaution\n    imageSrc={buttonFig17}\n    imageAlt=\"A dialog with the heading ‘Are you sure you want to continue?’. There are two buttons in the modal with labels which read ‘No, take me out of here’ and ‘yes, continue to the next section’.\"\n    state=\"bad\"\n    caption=\"Don’t use long labels or generic labels.\"\n  />\n</DoubleDoDontCaution>\n\nAlways specify an accessible label for the button. The accessible label can include more detail than is described in the visible label, but make sure that the visible label text is included within the accessible label.\n\nFor example, a button may have a visible label which reads ‘Submit’. The accessible label may read ‘Submit form’. This includes more information to aid assistive technology users, but still includes the full visible label.\n\n### Icons\n\nUse an icon on a button to provide additional meaning or to aid in recognition. All button types can display an icon.\n\nMake sure that the icon is understandable and relevant to the action.\n\nAlways provide alternative descriptions for icons if they aren't decorative. Only use icons if they are necessary.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={buttonFig18}\n    imageAlt=\"A set of buttons with icons that clearly relate to the action. The icons used are a circle arrow for refresh, a floppy disk for save, a back arrow for go back, and a bin for delete.\"\n    state=\"good\"\n    caption=\"Use icons with clear meaning to add clarity to the action.\"\n  />\n  <DoDontCaution\n    imageSrc={buttonFig19}\n    imageAlt=\"A set of buttons with icons that are unrelated to the action. The icons used are a Christmas tree for refresh, a padlock for save, a box rectangle for go back and a box cross for delete.\"\n    state=\"bad\"\n    caption=\"Don’t use complicated, unrelated or ambiguous icons on buttons.\"\n  />\n</DoubleDoDontCaution>\n\n## Accessibility considerations\n\nAdd labels to all icon buttons using a [tooltip](/components/tooltips) which is useful to sighted users too.\n\nUse useful and context-free labels. If necessary, add additional context in the accessible label.\n\n## Related components\n\n- [Links](/components/links)\n- [Tooltips](/components/tooltips)\n",
      "path": "/components/buttons",
      "navPriority": 4,
      "date": "2023-02-03",
      "title": "Button",
      "status": "BETA",
      "subTitle": "Buttons are used to allow or encourage people to take an action.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/buttons",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/buttons"
        },
        {
          "title": "Code",
          "path": "/components/buttons/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/buttons/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/buttons/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.565Z",
        "lastModified": "2023-04-14T11:24:28.565Z",
        "size": 14839,
        "formattedSize": "14.5 KB"
      }
    },
    {
      "id": "components__cards__accessibilityx",
      "contents": "\n## Easy to use for everyone\n\nInteractive and static cards inherit the accessibility features of the components within the card. Clickable cards act as links, and therefore inherit the accessibility features of links.\n\n## For Assistive Technology\n\nScreen readers should always read the heading first, even when an image is placed at the top of the card. To achieve this, we've re-ordered content using CSS Flexbox layout so that visually the image appears first but is placed after the heading section in HTML.\n\nThe container of interactive and static cards is not clickable, and therefore is not focusable. When navigating within the page, the focus switches between the different interactive components of the card.\n\nIn the case of clickable cards, since the whole area is interactive, then the whole container is focusable.\n\nClickable cards inherit the accessibility features of the link style, using an `<a href=\"\">` to wrap the whole component.\n\nProvide as much detail as possible to the purpose of any link or button present within interactive cards, or to the action of a clickable card. If you can't show this within the component, use the `class=”visuallyhidden”` to add descriptive text about the purpose of the call to action(s).\n\nWhen cards are arranged in group, these should be placed within an unordered list `<ul>`, with each card marked as a list item `<li>` to provide navigational cues for screen readers.\n\n## Based on\n\nThe cards component has been based on the following resources:\n\n- [How to build accessible cards-block links](https://www.nomensa.com/blog/how-build-accessible-cards-block-links), Joel Strohmeier, accessed May 2022.\n- [Block Links, Cards, Clickable Regions, Rows, Etc.](https://adrianroselli.com/2020/02/block-links-cards-clickable-regions-etc.html), Adrian Roselli, accessed May 2022.\n- [Cards](https://inclusive-components.design/cards), Inclusive components, accessed May 2022.\n- [Cards](https://a11y-style-guide.com/style-guide/section-cards.html), A11y style guide, accessed May 2022.\n- [Cards](https://bbc.github.io/gel/components/cards/), BBC, accessed May 2022.\n\n## Testing\n\nWe've tested this component against WCAG 2.1 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/cards/accessibility",
      "date": "2023-02-03",
      "title": "Card",
      "status": "BETA",
      "subTitle": "Cards are containers used to display structured information or interactive content.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/cards",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/cards"
        },
        {
          "title": "Code",
          "path": "/components/cards/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/cards/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/cards/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.569Z",
        "lastModified": "2023-04-14T11:24:28.569Z",
        "size": 2785,
        "formattedSize": "2.7 KB"
      }
    },
    {
      "id": "components__cards__codex",
      "contents": "\nimport { IcCard, IcStatusTag, IcButton } from \"@ukic/react\";\n\nexport const CardIcon = () => (\n  <svg\n    slot=\"icon\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height=\"24px\"\n    viewBox=\"0 0 24 24\"\n    width=\"24px\"\n    fill=\"#000000\"\n  >\n    <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n    <path d=\"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\" />\n  </svg>\n);\n\nexport const InteractionIcon = () => (\n  <svg\n    slot=\"icon\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    fill=\"currentColor\"\n    class=\"bi bi-three-dots-vertical\"\n    viewBox=\"0 0 16 16\"\n  >\n    <path d=\"M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\" />\n  </svg>\n);\n\n## Component demo\n\nexport const snippets = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-card heading=\"Card heading\" subheading=\"Card subheading\" message=\"This is an example of a clickable card.\" clickable=\"true\"></ic-card>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcCard heading=\"Card heading\" subheading=\"Card subheading\" message=\"This is an example of a clickable card.\" clickable />`,\n  },\n];\n\n<ComponentPreview snippets={snippets}>\n  <IcCard\n    heading=\"Card heading\"\n    subheading=\"Card subheading\"\n    message=\"This is an example of a clickable card.\"\n    clickable\n  />\n</ComponentPreview>\n\n## Card details\n\n<ComponentDetails component=\"ic-card\" />\n\n## Variants\n\n### Heading only\n\nexport const headingOnly = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-card heading=\"Card heading\"></ic-card>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcCard heading=\"Card heading\"></IcCard>`,\n  },\n];\n\n<ComponentPreview snippets={headingOnly}>\n  <IcCard heading=\"Card heading\" />\n</ComponentPreview>\n\n### With icon\n\nexport const withIcon = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-card heading=\"Card heading\">\n  <svg slot=\"icon\">\n    ...\n  </svg>\n</ic-card>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcCard heading=\"Card heading\">\n  <SlottedSVG slot=\"icon\" ... >\n    ...\n  </SlottedSVG>\n</IcCard>`,\n  },\n];\n\n<ComponentPreview snippets={withIcon}>\n  <IcCard heading=\"Card heading\">\n    <CardIcon />\n  </IcCard>\n</ComponentPreview>\n\n### Message\n\nexport const withMessage = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-card heading=\"Card heading\" message=\"This is an example of a card component with text included.\">\n  <svg slot=\"icon\">\n    ...\n  </svg>\n</ic-card>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcCard heading=\"Card heading\" message=\"This is an example of a card component with text included.\">\n  <SlottedSVG slot=\"icon\" ... >\n    ...\n  </SlottedSVG>\n</IcCard>`,\n  },\n];\n\n<ComponentPreview snippets={withMessage}>\n  <IcCard\n    heading=\"Card heading\"\n    message=\"This is an example of a card component with text included.\"\n  >\n    <CardIcon />\n  </IcCard>\n</ComponentPreview>\n\n### With subheading\n\nexport const withSubHeading = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-card \n  heading=\"Card heading\" \n  subheading=\"Card subheading\" \n  message=\"This is an example of a card component with text included.\">\n  <svg slot=\"icon\">\n    ...\n  </svg>\n</ic-card>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcCard \n  heading=\"Card heading\"\n  subheading=\"Card subheading\"\n  message=\"This is an example of a card component with text included.\">\n  <SlottedSVG slot=\"icon\" ... >\n    ...\n  </SlottedSVG>\n</IcCard>`,\n  },\n];\n\n<ComponentPreview snippets={withSubHeading}>\n  <IcCard\n    heading=\"Card heading\"\n    subheading=\"Card subheading\"\n    message=\"This is an example of a card component with text included.\"\n  >\n    <CardIcon />\n  </IcCard>\n</ComponentPreview>\n\n### Interaction button\n\nexport const interactionButton = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-card \n  heading=\"Card heading\" \n  subheading=\"Card subheading\" \n  message=\"This is an example of an interactive card with interaction button.\">\n  <svg slot=\"icon\">\n    ...\n  </svg>\n  <ic-button variant=\"icon\" title=\"More information\" slot=\"interaction-button\">\n    <svg slot=\"icon\">\n      ...\n    </svg>\n  </ic-button>\n</ic-card>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcCard \n  heading=\"Card heading\"\n  subheading=\"Card subheading\"\n  message=\"This is an example of an interactive card with interaction button.\">\n  <SlottedSVG slot=\"icon\" ... >\n    ...\n  </SlottedSVG>\n  <IcButton variant=\"icon\" title=\"More information\" slot=\"interaction-button\">\n    <SlottedSVG slot=\"icon\" ... >\n      ...\n    </SlottedSVG>\n  </IcButton>\n</IcCard>`,\n  },\n];\n\n<ComponentPreview snippets={interactionButton}>\n  <IcCard\n    heading=\"Card heading\"\n    subheading=\"Card subheading\"\n    message=\"This is an example of an interactive card with interaction button.\"\n  >\n    <CardIcon />\n    <IcButton variant=\"icon\" title=\"More information\" slot=\"interaction-button\">\n      <InteractionIcon />\n    </IcButton>\n  </IcCard>\n</ComponentPreview>\n\n### Adornment\n\nexport const adornment = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-card \n  heading=\"Card heading\" \n  subheading=\"Card subheading\"\n  message=\"This is an example of a card with adornment.\">\n  <svg slot=\"icon\">\n    ...\n  </svg>\n  <ic-status-tag slot=\"adornment\" label=\"Neutral\" small=\"true\"></ic-status-tag>\n</ic-card>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcCard \n  heading=\"Card heading\" \n  subheading=\"Card subheading\" \n  message=\"This is an example of a card with adornment.\">\n  <SlottedSVG slot=\"icon\" ... >\n    ...\n  </SlottedSVG>\n  <IcStatusTag slot=\"adornment\" label=\"Neutral\" small />\n</IcCard>`,\n  },\n];\n\n<ComponentPreview snippets={adornment}>\n  <IcCard\n    heading=\"Card heading\"\n    subheading=\"Card subheading\"\n    message=\"This is an example of a card with adornment.\"\n  >\n    <CardIcon />\n    <IcStatusTag slot=\"adornment\" label=\"Neutral\" small />\n  </IcCard>\n</ComponentPreview>\n\n### Top image\n\nexport const topImage = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-card \n  heading=\"Card heading\"\n  subheading=\"Card subheading\" \n  message=\"This is an example of a card with a top image.\"\n  style=\"width:360px;\">\n  <svg slot=\"image-top\">\n    ...\n  </svg>\n  <svg slot=\"icon\">\n    ...\n  </svg>  \n  <ic-button variant=\"icon\" title=\"More information\" slot=\"interaction-button\">\n    <svg slot=\"icon\">\n      ...\n    </svg>\n  </ic-button>\n  <ic-status-tag slot=\"adornment\" label=\"Neutral\" small=\"true\"></ic-status-tag>\n</ic-card>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcCard \n  heading=\"Card heading\"\n  subheading=\"Card subheading\"\n  message=\"This is an example of a card with a top image.\"\n  style={{width: \"360px\"}}>\n  <SlottedSVG slot=\"image-top\" ... >\n    ...\n  </SlottedSVG>\n  <SlottedSVG slot=\"icon\" ... >\n    ...\n  </SlottedSVG>\n  <IcButton variant=\"icon\" title=\"More information\" slot=\"interaction-button\">\n    <SlottedSVG slot=\"icon\" ... >\n      ...\n    </SlottedSVG>\n  </IcButton> \n  <IcStatusTag slot=\"adornment\" label=\"Neutral\" small />\n</IcCard>`,\n  },\n];\n\n<ComponentPreview snippets={topImage}>\n  <IcCard\n    heading=\"Card heading\"\n    subheading=\"Card subheading\"\n    message=\"This is an example of a card component with a top image.\"\n    style={{ width: \"360px\" }}\n  >\n    <CardIcon />\n    <IcStatusTag slot=\"adornment\" label=\"Neutral\" small />\n    <IcButton variant=\"icon\" title=\"More information\" slot=\"interaction-button\">\n      <InteractionIcon />\n    </IcButton>\n    <svg\n      slot=\"image-top\"\n      style={{\n        height: \"100%\",\n        width: \"100%\",\n        maxHeight: \"20.375rem\",\n        maxWidth: \"20.375rem\",\n      }}\n      viewBox=\"0 0 1600 1250\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <rect fill=\"#ff7700\" width=\"1600\" height=\"1600\" y=\"-350\" />\n      <polygon fill=\"#cc0000\" points=\"957 450 539 900 1396 900\" />\n      <polygon fill=\"#aa0000\" points=\"957 450 872.9 900 1396 900\" />\n      <polygon fill=\"#c50022\" points=\"-60 900 398 662 816 900\" />\n      <polygon fill=\"#a3001b\" points=\"337 900 398 662 816 900\" />\n      <polygon fill=\"#be0044\" points=\"1203 546 1552 900 876 900\" />\n      <polygon fill=\"#9c0036\" points=\"1203 546 1552 900 1162 900\" />\n      <polygon fill=\"#b80066\" points=\"641 695 886 900 367 900\" />\n      <polygon fill=\"#960052\" points=\"587 900 641 695 886 900\" />\n      <polygon fill=\"#b10088\" points=\"1710 900 1401 632 1096 900\" />\n      <polygon fill=\"#8f006d\" points=\"1710 900 1401 632 1365 900\" />\n      <polygon fill=\"#aa00aa\" points=\"1210 900 971 687 725 900\" />\n      <polygon fill=\"#880088\" points=\"943 900 1210 900 971 687\" />\n    </svg>\n  </IcCard>\n</ComponentPreview>\n\n### Middle image\n\nexport const midImage = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-card \n  heading=\"Card heading\"\n  subheading=\"Card subheading\" \n  message=\"This is an example of a card with a middle image.\"\n  style=\"width:360px;\">\n  <svg slot=\"icon\">\n    ...\n  </svg>  \n  <ic-button variant=\"icon\" title=\"More information\" slot=\"interaction-button\">\n    <svg slot=\"icon\">\n      ...\n    </svg>\n  </ic-button>\n  <ic-status-tag slot=\"adornment\" label=\"Neutral\" small=\"true\"></ic-status-tag>\n  <svg slot=\"image-mid\">\n    ...\n  </svg>\n</ic-card>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcCard \n  heading=\"Card heading\"\n  subheading=\"Card subheading\"\n  message=\"This is an example of a card with a middle image.\"\n  style={{width: \"360px\"}}>\n  <SlottedSVG slot=\"icon\" ... >\n    ...\n  </SlottedSVG>\n  <IcButton variant=\"icon\" title=\"More information\" slot=\"interaction-button\">\n    <SlottedSVG slot=\"icon\" ... >\n      ...\n    </SlottedSVG>\n  </IcButton> \n  <IcStatusTag slot=\"adornment\" label=\"Neutral\" small />\n  <SlottedSVG slot=\"image-mid\" ... >\n    ...\n  </SlottedSVG>\n</IcCard>`,\n  },\n];\n\n<ComponentPreview snippets={midImage}>\n  <IcCard\n    heading=\"Card heading\"\n    subheading=\"Card subheading\"\n    message=\"This is an example of a card component with a middle image.\"\n    style={{ width: \"360px\" }}\n  >\n    <CardIcon />\n    <IcButton variant=\"icon\" title=\"More information\" slot=\"interaction-button\">\n      <InteractionIcon />\n    </IcButton>\n    <IcStatusTag slot=\"adornment\" label=\"Neutral\" small />\n    <svg\n      slot=\"image-mid\"\n      style={{\n        height: \"100%\",\n        width: \"100%\",\n        maxHeight: \"20.375rem\",\n        maxWidth: \"20.375rem\",\n      }}\n      viewBox=\"0 0 1600 1250\"\n    >\n      <rect fill=\"#ff7700\" width=\"1600\" height=\"1600\" y=\"-350\" />\n      <polygon fill=\"#cc0000\" points=\"957 450 539 900 1396 900\" />\n      <polygon fill=\"#aa0000\" points=\"957 450 872.9 900 1396 900\" />\n      <polygon fill=\"#c50022\" points=\"-60 900 398 662 816 900\" />\n      <polygon fill=\"#a3001b\" points=\"337 900 398 662 816 900\" />\n      <polygon fill=\"#be0044\" points=\"1203 546 1552 900 876 900\" />\n      <polygon fill=\"#9c0036\" points=\"1203 546 1552 900 1162 900\" />\n      <polygon fill=\"#b80066\" points=\"641 695 886 900 367 900\" />\n      <polygon fill=\"#960052\" points=\"587 900 641 695 886 900\" />\n      <polygon fill=\"#b10088\" points=\"1710 900 1401 632 1096 900\" />\n      <polygon fill=\"#8f006d\" points=\"1710 900 1401 632 1365 900\" />\n      <polygon fill=\"#aa00aa\" points=\"1210 900 971 687 725 900\" />\n      <polygon fill=\"#880088\" points=\"943 900 1210 900 971 687\" />\n    </svg>\n  </IcCard>\n</ComponentPreview>\n\n### Interaction controls\n\nexport const interactionControls = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-card \n  heading=\"Card heading\" \n  subheading=\"Card subheading\"\n  message=\"This is an example of an interactive card with interaction controls.\">\n  <svg slot=\"icon\">\n    ...\n  </svg>\n  <div slot=\"interaction-controls\" style=\"display:flex;gap:16px;\">\n    <ic-button variant=\"primary\">Learn more</ic-button>\n    <ic-button variant=\"secondary\">Hide</ic-button>\n  </div>\n</ic-card>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcCard \n  heading=\"Card heading\"\n  subheading=\"Card subheading\"\n  message=\"This is an example of an interactive card with interaction controls.\">\n  <SlottedSVG slot=\"icon\" ... >\n    ...\n  </SlottedSVG>\n  <div slot=\"interaction-controls\" style={{display: \"flex\", gap: \"16px\"}}>\n    <IcButton variant=\"primary\">Learn more</IcButton>\n    <IcButton variant=\"secondary\">Hide</IcButton>\n  </div>\n</IcCard>`,\n  },\n];\n\n<ComponentPreview snippets={interactionControls}>\n  <IcCard\n    heading=\"Card heading\"\n    subheading=\"Card subheading\"\n    message=\"This is an example of an interactive card with interaction controls.\"\n  >\n    <CardIcon />\n    <div slot=\"interaction-controls\" style={{ display: \"flex\", gap: \"16px\" }}>\n      <IcButton variant=\"primary\">Learn more</IcButton>\n      <IcButton variant=\"secondary\">Hide</IcButton>\n    </div>\n  </IcCard>\n</ComponentPreview>\n\n### Expandable\n\nexport const expandable = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-card \n  heading=\"Card heading\"\n  subheading=\"Card subheading\" \n  message=\"This is an example of an interactive card with an expandable content area.\"\n  expandable=\"true\">\n  <svg slot=\"icon\">\n    ...\n  </svg>\n  <div slot=\"interaction-controls\" style=\"display:flex;gap:16px;\">\n    <ic-button variant=\"primary\">Learn more</ic-button>\n    <ic-button variant=\"secondary\">Hide</ic-button>\n  </div>\n  <ic-typography slot=\"expanded-content\" variant=\"body\">\n    This is an example of the expanded content area\n  </ic-typography>\n</ic-card>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcCard \n  heading=\"Card heading\" \n  subheading=\"Card subheading\"\n  message=\"This is an example of an interactive card with an expandable content area.\"\n  expandable>\n  <SlottedSVG slot=\"icon\" ... >\n    ...\n  </SlottedSVG>\n  <div slot=\"interaction-controls\" style={{display: \"flex\", gap: \"16px\"}}>\n    <IcButton variant=\"primary\">Learn more</IcButton>\n    <IcButton variant=\"secondary\">Hide</IcButton>\n  </div>\n  <IcTypography slot=\"expanded-content\" variant=\"body\">\n    This is an example of the expanded content area\n  </IcTypography>\n</IcCard>`,\n  },\n];\n\n<ComponentPreview snippets={expandable}>\n  <IcCard\n    heading=\"Card heading\"\n    subheading=\"Card subheading\"\n    message=\"This is an example of an interactive card with an expandable content area.\"\n    expandable\n  >\n    <CardIcon />\n    <div slot=\"interaction-controls\" style={{ display: \"flex\", gap: \"16px\" }}>\n      <IcButton variant=\"primary\">Learn more</IcButton>\n      <IcButton variant=\"secondary\">Hide</IcButton>\n    </div>\n    <ic-typography slot=\"expanded-content\" variant=\"body\">\n      This is an example of the expanded content area\n    </ic-typography>\n  </IcCard>\n</ComponentPreview>\n\n### Clickable link\n\nexport const clickableLink = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-card \n  heading=\"Card heading\" \n  subheading=\"Card subheading\" \n  message=\"This is an example of a clickable card component rendered as a link.\"\n  clickable=\"true\"\n  href=\"#\">\n  <svg slot=\"icon\">\n    ...\n  </svg>\n</ic-card>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcCard \n  heading=\"Card heading\" \n  subheading=\"Card subheading\" \n  message=\"This is an example of a clickable card component rendered as a link.\" \n  clickable\n  href=\"#\">\n  <SlottedSVG slot=\"icon\" ... >\n    ...\n  </SlottedSVG>\n</IcCard>`,\n  },\n];\n\n<ComponentPreview snippets={clickableLink}>\n  <IcCard\n    heading=\"Card heading\"\n    subheading=\"Card subheading\"\n    message=\"This is an example of a clickable card component rendered as a link.\"\n    clickable=\"true\"\n    href=\"/components/cards/code\"\n  >\n    <CardIcon />\n  </IcCard>\n</ComponentPreview>\n\n### Clickable button\n\nexport const clickableBtn = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-card\n  id=\"clickable-card\"\n  heading=\"Card heading\" \n  subheading=\"Card subheading\" \n  message=\"This is an example of a clickable card component rendered as a button.\"\n  clickable=\"true\">\n  <svg slot=\"icon\">\n    ...\n  </svg>\n</ic-card>\n<script>\n  const card = document.querySelector('#clickable-card');\n  card.addEventListener('click', (ev) => {\n    console.log(ev);\n  })\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcCard \n  heading=\"Card heading\" \n  subheading=\"Card subheading\" \n  message=\"This is an example of a clickable card component rendered as a button.\" \n  clickable\n  onClick={(ev) => console.log(ev)}>\n  <SlottedSVG slot=\"icon\" ... >\n    ...\n  </SlottedSVG>\n</IcCard>`,\n  },\n];\n\n<ComponentPreview snippets={clickableBtn}>\n  <IcCard\n    heading=\"Card heading\"\n    subheading=\"Card subheading\"\n    message=\"This is an example of a clickable card component rendered as a button.\"\n    clickable=\"true\"\n    onClick={(ev) => console.log(ev)}\n  >\n    <CardIcon />\n  </IcCard>\n</ComponentPreview>\n\n### Disabled\n\nexport const disabled = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-card \n  heading=\"Card heading\"\n  subheading=\"Card subheading\"\n  message=\"This is an example of a disabled clickable card.\"\n  clickable=\"true\" \n  disabled=\"true\">\n  <svg slot=\"icon\">\n    ...\n  </svg>\n</ic-card>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcCard \n  heading=\"Card heading\"\n  subheading=\"Card subheading\" \n  message=\"This is an example of a disabled clickable card.\" \n  clickable\n  disabled>\n  <SlottedSVG slot=\"icon\" ... >\n    ...\n  </SlottedSVG>\n</IcCard>`,\n  },\n];\n\n<ComponentPreview snippets={disabled}>\n  <IcCard\n    heading=\"Card heading\"\n    subheading=\"Card subheading\"\n    message=\"This is an example of a disabled clickable card.\"\n    clickable\n    disabled\n  >\n    <CardIcon />\n  </IcCard>\n</ComponentPreview>\n\n### Full width\n\nexport const fullWidth = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-card \n  heading=\"Card heading\"\n  subheading=\"Card subheading\"\n  message=\"This is an example of a card component that fills it's parent container.\"\n  clickable=\"true\"> \n  <svg slot=\"icon\">\n    ...\n  </svg>\n</ic-card>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcCard \n  heading=\"Card heading\"\n  subheading=\"Card subheading\" \n  message=\"This is an example of a card component that fills it's parent container.\" \n  clickable>\n  <SlottedSVG slot=\"icon\" ... >\n    ...\n  </SlottedSVG>\n</IcCard>`,\n  },\n];\n\n<ComponentPreview snippets={fullWidth}>\n  <IcCard\n    heading=\"Card heading\"\n    subheading=\"Card subheading\"\n    message=\"This is an example of a card component that fills it's parent container.\"\n    clickable=\"true\"\n    fullWidth=\"true\"\n  >\n    <CardIcon />\n  </IcCard>\n</ComponentPreview>\n\n### Wrapped by link\n\nexport const wrapped = [\n  {\n    language: \"Web component\",\n    snippet: `<a href=\"\">\n  <ic-card \n    heading=\"Card heading\"\n    subheading=\"Card subheading\"\n    message=\"This is an example of a card component wrapped by a link.\"> \n    <svg slot=\"icon\">\n      ...\n    </svg>\n  </ic-card>\n</a>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<a href=\"\">\n  <IcCard \n    heading=\"Card heading\"\n    subheading=\"Card subheading\" \n    message=\"This is an example of a card component wrapped by a link.\">\n    <SlottedSVG slot=\"icon\" ... >\n      ...\n    </SlottedSVG>\n  </IcCard>\n</a>`,\n  },\n];\n\n<ComponentPreview snippets={wrapped}>\n  <a\n    href=\"/components/cards/code\"\n    style={{ textDecoration: \"none\", color: \"var(--ic-architechtural-black)\" }}\n  >\n    <IcCard\n      heading=\"Card heading\"\n      subheading=\"Card subheading\"\n      message=\"This is an example of a card component wrapped by a link.\"\n    >\n      <CardIcon />\n    </IcCard>\n  </a>\n</ComponentPreview>\n",
      "path": "/components/cards/code",
      "date": "2023-02-03",
      "title": "Card",
      "status": "BETA",
      "subTitle": "Cards are containers used to display structured information or interactive content.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/cards",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/cards"
        },
        {
          "title": "Code",
          "path": "/components/cards/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/cards/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/cards/code.mdx",
        "createdAt": "2023-04-14T11:24:28.569Z",
        "lastModified": "2023-04-14T11:24:28.569Z",
        "size": 19844,
        "formattedSize": "19.4 KB"
      }
    },
    {
      "id": "components__cards__guidancex",
      "contents": "\nimport { IcCard, IcButton } from \"@ukic/react\";\nimport cardsFig1 from \"./images/fig-1-card-anatomy.png\";\nimport cardsFig2 from \"./images/fig-2-heading-area-anatomy.png\";\nimport cardsFig3 from \"./images/fig-3-place-images-either-at-the-top-or-in-the-middle-of-cards-if-content-is-present.png\";\nimport cardsFig4 from \"./images/fig-4-dont-place-images-below-content.png\";\nimport cardsFig5 from \"./images/fig-5-interaction-area-anatomy.png\";\nimport cardsFig6 from \"./images/fig-6-dont-mix-card-variants-when-arranged-in-a-group.png\";\nimport cardsFig7 from \"./images/fig-7-dont-vertically-align-cards-with-different-widths.png\";\nimport cardsFig10 from \"./images/fig-10-use-the-show-less-show-more-pattern-when-adding-long-portions-of-text-to-the-content-area.png\";\nimport cardsFig11 from \"./images/fig-11-avoid-displaying-lengthy-descriptions-in-the-content-area.png\";\n\n## Component variants\n\nThere are three variants of cards:\n\n- Interactive cards\n- Static cards\n- Clickable cards\n\n<ComponentPreview>\n  <IcCard\n    heading=\"This is the card heading\"\n    subheading=\"This is the subheading\"\n    message=\"This is an example of an interactive card\"\n    expandable\n    style={{ width: \"360px\" }}\n  >\n    <IcStatusTag slot=\"adornment\" label=\"Neutral\" small />\n    <IcButton variant=\"icon\" title=\"More information\" slot=\"interaction-button\">\n      <svg\n        slot=\"icon\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"16\"\n        height=\"16\"\n        fill=\"currentColor\"\n        class=\"bi bi-three-dots-vertical\"\n        viewBox=\"0 0 16 16\"\n      >\n        <path d=\"M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\" />\n      </svg>\n    </IcButton>\n    <svg\n      slot=\"image-mid\"\n      style={{\n        height: \"100%\",\n        width: \"100%\",\n        maxHeight: \"20.375rem\",\n        maxWidth: \"20.375rem\",\n      }}\n      viewBox=\"0 0 1600 1250\"\n    >\n      <rect fill=\"#ff7700\" width=\"1600\" height=\"1600\" y=\"-350\" />\n      <polygon fill=\"#cc0000\" points=\"957 450 539 900 1396 900\" />\n      <polygon fill=\"#aa0000\" points=\"957 450 872.9 900 1396 900\" />\n      <polygon fill=\"#c50022\" points=\"-60 900 398 662 816 900\" />\n      <polygon fill=\"#a3001b\" points=\"337 900 398 662 816 900\" />\n      <polygon fill=\"#be0044\" points=\"1203 546 1552 900 876 900\" />\n      <polygon fill=\"#9c0036\" points=\"1203 546 1552 900 1162 900\" />\n      <polygon fill=\"#b80066\" points=\"641 695 886 900 367 900\" />\n      <polygon fill=\"#960052\" points=\"587 900 641 695 886 900\" />\n      <polygon fill=\"#b10088\" points=\"1710 900 1401 632 1096 900\" />\n      <polygon fill=\"#8f006d\" points=\"1710 900 1401 632 1365 900\" />\n      <polygon fill=\"#aa00aa\" points=\"1210 900 971 687 725 900\" />\n      <polygon fill=\"#880088\" points=\"943 900 1210 900 971 687\" />\n    </svg>\n    <svg\n      slot=\"icon\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height=\"24px\"\n      viewBox=\"0 0 24 24\"\n      width=\"24px\"\n      fill=\"#000000\"\n    >\n      <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n      <path d=\"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\" />\n    </svg>\n    <div slot=\"interaction-controls\" style={{ display: \"flex\", gap: \"16px\" }}>\n      <IcButton variant=\"primary\">Learn more</IcButton>\n      <IcButton variant=\"secondary\">Hide</IcButton>\n    </div>\n    <IcTypography slot=\"expanded-content\" variant=\"body\">\n      This is an example of an expanded content area\n    </IcTypography>\n  </IcCard>\n</ComponentPreview>\n\n### Interactive cards\n\nInteractive cards contain different types of content and actions. The container itself is not interactive but can have interactive components.\n\n### Clickable cards\n\nClickable cards provide a single action that is triggered by clicking anywhere on the card.\n\n### Static cards\n\nStatic cards are non-interactive and contain static content only.\n\n## Anatomy\n\nThe following section describes the different areas of content on a card.\n\n<DoDontCaution\n  imageSrc={cardsFig1}\n  imageAlt=\"A diagram showing the positioning of the different areas within a card. The areas are a heading area, an image area, a content area, an interaction area, and an expandable area.\"\n  state=\"none\"\n  caption=\"A card includes a heading area, an image area, a content area, an interaction area, and an expandable area.\"\n/>\n\n### 1. Heading area\n\n<DoDontCaution\n  imageSrc={cardsFig2}\n  imageAlt=\"A diagram showing the positioning of the different sections within the heading area. The area is split up into three different rows. The first row houses section 'A' on the left, section 'B' in the middle, and section 'E' on the right. The second row houses section 'C', and the third row houses section 'D'.\"\n  state=\"none\"\n  caption=\"A card's heading area includes five elements.\"\n/>\n\nThe heading area can contain:\n\n- A: Icon/Avatar\n- B: Heading\n- C: Subtitle\n- D: Adornment, for example [status tags](/components/status-tags)\n- E: More options icon button (only for interactive cards)\n\n### 2. Image\n\nInclude an image either at the top or in the middle of the card. Don't place images below content if this is included in the card.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={cardsFig3}\n    imageAlt=\"Two example cards vertically aligned, where the top card displays an image above the heading area and content area, and the bottom card displays an image below the heading area and above the content area.\"\n    state=\"good\"\n    caption=\"Place images either at the top or in the middle of cards if content is present.\"\n  />\n  <DoDontCaution\n    imageSrc={cardsFig4}\n    imageAlt=\"An example card where an image is displayed below the heading and content area.\"\n    state=\"bad\"\n    caption=\"Don't place images below content.\"\n  />\n</DoubleDoDontCaution>\n\n### 3. Content area\n\nAdd a descriptive message within the card content section. Interactive and static cards can include a “See more” link to expand hidden content.\n\nSince clickable cards can only contain one interaction, text can't be hidden.\n\n### 4. Interaction area (interactive cards only)\n\n<DoDontCaution\n  imageSrc={cardsFig5}\n  imageAlt=\"A diagram showing the positioning of the different sections within the interaction area. The area features one row with two different sections, 'A' on the left and 'E' on the far right.\"\n  state=\"none\"\n  caption=\"A card's interaction area includes two elements.\"\n/>\n\nAdd interactive components to the interaction area at the bottom of the card (A). Avoid using too many interactions. The interaction area is only found in interactive cards.\n\nUse any type of button in the interaction area to provide actions.\n\nInclude an expand button (E) if you include content in the [expandable area](anchor link to expandable area section on page).\n\n### 5. Expandable area (interactive cards only)\n\nUse an expandable area to hold content which either doesn't fit in the collapsed card or doesn't align to the above areas.\n\nThis area can be expanded by clicking the “expand” button found on the interaction bar.\n\n## Layout and placement\n\n### Grouping\n\nWhen arranging multiple cards together, try to use the same card variant for each.\n\n<DoDontCaution\n  imageSrc={cardsFig6}\n  imageAlt=\"An image showing a three static cards, one interactive card, and one clickable card arranged in a group.\"\n  state=\"caution\"\n  caption=\"Avoid mixing card variants when arranged in a group.\"\n/>\n\n### Sizing\n\nWhen cards are shown in columns make sure cards are vertically aligned and maintain the same width for all cards.\n\nWhen arranging cards in rows, try to match the vertical height of the cards by including similar amounts of content so that they automatically align horizontally.\n\n<DoDontCaution\n  imageSrc={cardsFig7}\n  imageAlt=\"An image showing six cards arranged into three rows and two columns, and the width of the cards changes for each row.\"\n  state=\"bad\"\n  caption=\"Don't vertically align cards with different widths.\"\n/>\n\n## Content\n\nKeep headings, subheadings and adornments clear and concise.\n\n### Image\n\nUse the pre-defined aspect ratios for images in cards. These are:\n\n- 16:9\n- 1:1\n- 9:16\n- 4:1\n- 4:3\n- 3:4\n\nSet an image to fit within the image container to show the whole image, but this may introduce empty areas in the image container if the image does not match the container aspect ratio. Alternatively, set the image to fill the image container, but be aware this may crop some of the image’s content.\n\nUse a custom image aspect ratio if your image doesn't fit into one of the pre-defined options.\n\nImages should always feature an `alt` attribute. Set the `alt` equal to a descriptive alternative when an image is informational.\n\n### Content area\n\nIf placing several lines of text in the content area, use a “see more” link to make the content expandable.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={cardsFig10}\n    imageAlt=\"An example card titled ‘Your order' with two rows of content in the content area. The second line displays truncated content and a 'See more' clickable text button.\"\n    state=\"good\"\n    caption=\"Use a ‘see more’ link when adding long text to the content area.\"\n  />\n  <DoDontCaution\n    imageSrc={cardsFig11}\n    imageAlt=\"An example card titled 'Your order' with nine rows of content in the content area.\"\n    state=\"caution\"\n    caption=\"Avoid displaying lengthy descriptions in the content area.\"\n  />\n</DoubleDoDontCaution>\n\n## Custom cards\n\nCards can also be used as custom containers if the pre-defined options don't meet your needs. When designing a custom card, make sure to respect the general anatomy and structure of cards as defined in this document.\n\nAny interactive components must be placed either within the interaction bar, or the expandable area. Make sure the interactive area is always placed at the bottom of a collapsed card.\n\nCards support one single image. If you need to place two or more images, place the additional images in the expandable area.\n\nDon't include any interactive components within a clickable card as these will interfere with the clickable card’s own action.\n",
      "path": "/components/cards",
      "navPriority": 5,
      "date": "2023-02-03",
      "title": "Card",
      "status": "BETA",
      "subTitle": "Cards are containers used to display structured information or interactive content.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/cards",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/cards"
        },
        {
          "title": "Code",
          "path": "/components/cards/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/cards/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/cards/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.569Z",
        "lastModified": "2023-04-14T11:24:28.569Z",
        "size": 10678,
        "formattedSize": "10.4 KB"
      }
    },
    {
      "id": "components__checkboxes__accessibilityx",
      "contents": "\n## Easy to use for everyone\n\nWhen interacting with checkboxes on a keyboard, the **tab** key moves the focus to each checkbox within a checklist. The checkbox is then checked using the **space** key when the field is focused.\n\nWhen child fields are displayed beneath checkboxes, the field acts as the child of the checkbox. The field should be included within the focus order so that it's focused directly after the checkbox it belongs to.\n\nWhen a child field is dynamically displayed after checking a checkbox, then it should be announced as required due to the user’s selection.\n\n## For Assistive Technology\n\nThe label of a checkbox group is announced by a screen reader before the checkbox options are announced.\n\nScreen readers will read out the label of the checkbox as well as whether it's checked or not. Checking the checkbox will result in it being read out again.\n\n## Based on\n\nThe checkbox component has been based on the following resources:\n\n- [Accessible Checkbox](https://www.a11ymatters.com/pattern/checkbox/), A11y Matters, accessed March 2022.\n- [Input type = checkbox](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox), MDN web docs, accessed March 2022.\n- [ARIA Checkbox role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/checkbox_role), MDN Web docs, accessed March 2022.\n- [Trouble tabbing to tabs and cheeky checking checkboxes](https://www.scottohara.me/blog/2018/11/02/tabbing-into-tabs.html), Scott O’hara, accessed March 2022.\n\n## Testing\n\nWe’ve tested this component against WCAG 2.1 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/checkboxes/accessibility",
      "date": "2023-02-03",
      "title": "Checkbox",
      "status": "BETA",
      "subTitle": "Use checkboxes as part of a form, in dialogs and in control areas such as filters or settings.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/checkboxes",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/checkboxes"
        },
        {
          "title": "Code",
          "path": "/components/checkboxes/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/checkboxes/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/checkboxes/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.577Z",
        "lastModified": "2023-04-14T11:24:28.577Z",
        "size": 2224,
        "formattedSize": "2.2 KB"
      }
    },
    {
      "id": "components__checkboxes__codex",
      "contents": "\nimport { IcCheckboxGroup, IcCheckbox, IcTextField } from \"@ukic/react\";\n\n## Component demo\n\nexport const snippetsDefault = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-checkbox-group label=\"Make changes to your order.\" name=\"default\">\n  <ic-checkbox value=\"extra\" label=\"Extra shot (50p)\"></ic-checkbox>\n  <ic-checkbox value=\"Soya milk\" label=\"Soya milk\" checked ></ic-checkbox>\n  <ic-checkbox value=\"keep cup\" label=\"Takeaway cup (Reusable keep cups only)\" disabled=\"true\" ></ic-checkbox>\n</ic-checkbox-group>\n<script>\n  const checkboxGroup = document.querySelector('ic-checkbox-group');\n  checkboxGroup.addEventListener('icChange', (ev) => console.log('icChange', ev.detail.value));\n  const checkboxes = document.querySelector('ic-checkbox');\n  checkboxes.forEach((checkbox) => {\n    checkbox.addEventListener('icCheck', (ev) => {\n      console.log('icCheck', ev);\n    })\n  })\n</script>\n`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcCheckboxGroup label=\"Make changes to your order.\" name=\"default\" onIcChange={(ev) => console.log(\"onIcChange\", ev.detail.value)}>\n  <IcCheckbox value=\"extra\" label=\"Extra shot (50p)\" onIcCheck={(ev) => console.log(\"onIcCheck\", ev)} />\n  <IcCheckbox value=\"Soya milk\" label=\"Soya milk\" checked />\n  <IcCheckbox value=\"keep cup\" label=\"Takeaway cup (Reusable keep cups only)\" disabled />\n</IcCheckboxGroup>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsDefault} style={{ marginTop: \"24px\" }}>\n  <IcCheckboxGroup\n    label=\"Make changes to your order.\"\n    name=\"default\"\n    onIcChange={(ev) => console.log(\"onIcChange\", ev.detail.value)}\n  >\n    <IcCheckbox\n      value=\"extra\"\n      label=\"Extra shot (50p)\"\n      onIcCheck={(ev) => console.log(\"onIcCheck\", ev)}\n    />\n    <IcCheckbox value=\"Soya milk\" label=\"Soya milk\" checked />\n    <IcCheckbox\n      value=\"keep cup\"\n      label=\"Takeaway cup (Reusable keep cups only)\"\n      disabled\n    />\n  </IcCheckboxGroup>\n</ComponentPreview>\n\n## Checkbox group details\n\n<ComponentDetails component=\"ic-checkbox-group\" />\n\n## Checkbox details\n\n<ComponentDetails component=\"ic-checkbox\" />\n\n## Variants\n\n### Hidden label\n\nexport const snippetsHiddenLabel = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-checkbox-group label=\"This is a label\" hide-label=\"true\" name=\"1\">\n  <ic-checkbox value=\"valueName1\" label=\"Unselected / Default\"></ic-checkbox>\n  <ic-checkbox value=\"valueName2\" label=\"Selected / Default\" checked=\"true\"></ic-checkbox>\n</ic-checkbox-group>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcCheckboxGroup label=\"This is a label\" hideLabel name=\"1\">\n  <IcCheckbox value=\"valueName1\" label=\"Unselected / Default\" />\n  <IcCheckbox value=\"valueName2\" label=\"Selected / Default\" checked />\n</IcCheckboxGroup>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsHiddenLabel} style={{ marginTop: \"24px\" }}>\n  <IcCheckboxGroup label=\"This is a label\" hideLabel name=\"1\">\n    <IcCheckbox value=\"valueName1\" label=\"Unselected / Default\" />\n    <IcCheckbox value=\"valueName2\" label=\"Selected / Default\" checked />\n  </IcCheckboxGroup>\n</ComponentPreview>\n\n### Helper text\n\nexport const snippetsHelperText = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-checkbox-group label=\"This is a label\" name=\"1\" helper-text=\"Helper text\">\n  <ic-checkbox value=\"valueName1\" label=\"Unselected / Default\"></ic-checkbox>\n  <ic-checkbox value=\"valueName2\" label=\"Selected / Default\" checked=\"true\"></ic-checkbox>\n</ic-checkbox-group>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcCheckboxGroup label=\"This is a label\" name=\"1\" helperText=\"Helper text\">\n  <IcCheckbox value=\"valueName1\" label=\"Unselected / Default\" />\n  <IcCheckbox value=\"valueName2\" label=\"Selected / Default\" checked />\n</IcCheckboxGroup>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsHelperText} style={{ marginTop: \"24px\" }}>\n  <IcCheckboxGroup label=\"This is a label\" name=\"1\" helperText=\"Helper text\">\n    <IcCheckbox value=\"valueName1\" label=\"Unselected / Default\" />\n    <IcCheckbox value=\"valueName2\" label=\"Selected / Default\" checked />\n  </IcCheckboxGroup>\n</ComponentPreview>\n\n### Conditional\n\nexport const snippetsConditional = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-checkbox-group label=\"Which coffee do you like best?\" name=\"conditional\">\n  <ic-checkbox value=\"americano\" label=\"Americano\"></ic-checkbox>\n  <ic-checkbox value=\"espresso\" label=\"Espresso\"></ic-checkbox>\n  <ic-checkbox value=\"flatwhite\" label=\"Flat white\"></ic-checkbox>\n  <ic-checkbox value=\"latte\" label=\"Latte\"></ic-checkbox>\n  <ic-checkbox value=\"cappuccino\" label=\"Cappuccino\"></ic-checkbox>\n  <ic-checkbox value=\"other\" label=\"Other\">\n    <ic-text-field\n      slot=\"additional-field\"\n      label=\"Please let us know...\"\n    ></ic-text-field>\n  </ic-checkbox>\n</ic-checkbox-group>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcCheckboxGroup label=\"Which coffee do you like best?\" name=\"conditional\">\n  <IcCheckbox value=\"americano\" label=\"Americano\" />\n  <IcCheckbox value=\"espresso\" label=\"Espresso\" />\n  <IcCheckbox value=\"flatwhite\" label=\"Flat white\" />\n  <IcCheckbox value=\"latte\" label=\"Latte\" />\n  <IcCheckbox value=\"cappuccino\" label=\"Cappuccino\" />\n  <IcCheckbox value=\"other\" label=\"Other\">\n    <IcTextField\n      slot=\"additional-field\"\n      label=\"Please let us know...\"\n    />\n  </IcCheckbox>\n</IcCheckboxGroup>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsConditional} style={{ marginTop: \"24px\" }}>\n  <IcCheckboxGroup label=\"Which coffee do you like best?\" name=\"conditional\">\n    <IcCheckbox value=\"americano\" label=\"Americano\" />\n    <IcCheckbox value=\"espresso\" label=\"Espresso\" />\n    <IcCheckbox value=\"flatwhite\" label=\"Flat white\" />\n    <IcCheckbox value=\"latte\" label=\"Latte\" />\n    <IcCheckbox value=\"cappuccino\" label=\"Cappuccino\" />\n    <IcCheckbox value=\"other\" label=\"Other\">\n      <IcTextField slot=\"additional-field\" label=\"Please let us know...\" />\n    </IcCheckbox>\n  </IcCheckboxGroup>\n</ComponentPreview>\n\n### Conditional dynamic\n\nexport const snippetsConditionalDynamic = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-checkbox-group label=\"Which coffee do you like best?\" name=\"dynamic\">\n  <ic-checkbox value=\"americano\" label=\"Americano\"></ic-checkbox>\n  <ic-checkbox value=\"espresso\" label=\"Espresso\"></ic-checkbox>\n  <ic-checkbox value=\"flatwhite\" label=\"Flat white\"></ic-checkbox>\n  <ic-checkbox value=\"latte\" label=\"Latte\"></ic-checkbox>\n  <ic-checkbox value=\"cappuccino\" label=\"Cappuccino\"></ic-checkbox>\n  <ic-checkbox additional-field-display=\"dynamic\" value=\"other\" label=\"Other\">\n    <ic-text-field\n      slot=\"additional-field\"\n      label=\"Please let us know...\"\n    ></ic-text-field>\n  </ic-checkbox>\n</ic-checkbox-group>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcCheckboxGroup label=\"Which coffee do you like best?\" name=\"dynamic\">\n  <IcCheckbox value=\"americano\" label=\"Americano\" />\n  <IcCheckbox value=\"espresso\" label=\"Espresso\" />\n  <IcCheckbox value=\"flatwhite\" label=\"Flat white\" />\n  <IcCheckbox value=\"latte\" label=\"Latte\" />\n  <IcCheckbox value=\"cappuccino\" label=\"Cappuccino\" />\n  <IcCheckbox additionalFieldDisplay=\"dynamic\" value=\"other\" label=\"Other\">\n    <IcTextField\n      slot=\"additional-field\"\n      label=\"Please let us know...\"\n    />\n  </IcCheckbox>\n</IcCheckboxGroup>`,\n  },\n];\n\n<ComponentPreview\n  snippets={snippetsConditionalDynamic}\n  style={{ marginTop: \"24px\" }}\n>\n  <IcCheckboxGroup label=\"Which coffee do you like best?\" name=\"dynamic\">\n    <IcCheckbox value=\"americano\" label=\"Americano\" />\n    <IcCheckbox value=\"espresso\" label=\"Espresso\" />\n    <IcCheckbox value=\"flatwhite\" label=\"Flat white\" />\n    <IcCheckbox value=\"latte\" label=\"Latte\" />\n    <IcCheckbox value=\"cappuccino\" label=\"Cappuccino\" />\n    <IcCheckbox additionalFieldDisplay=\"dynamic\" value=\"other\" label=\"Other\">\n      <IcTextField slot=\"additional-field\" label=\"Please let us know...\" />\n    </IcCheckbox>\n  </IcCheckboxGroup>\n</ComponentPreview>\n\n### Validation\n\nexport const snippetsValidation = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-checkbox-group label=\"This is a label\" name=\"1\" validation-status=\"error\" validation-text=\"Error message\">\n  <ic-checkbox value=\"valueName1\" label=\"Unselected / Default\"></ic-checkbox>\n  <ic-checkbox value=\"valueName2\" label=\"Selected / Default\" checked=\"true\"></ic-checkbox>\n</ic-checkbox-group>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcCheckboxGroup label=\"This is a label\" name=\"1\" validationStatus=\"error\" validationText=\"Error message\">\n  <IcCheckbox value=\"valueName1\" label=\"Unselected / Default\" />\n  <IcCheckbox value=\"valueName2\" label=\"Selected / Default\" checked />\n</IcCheckboxGroup>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsValidation} style={{ marginTop: \"24px\" }}>\n  <IcCheckboxGroup\n    label=\"This is a label\"\n    name=\"1\"\n    validationStatus=\"error\"\n    validationText=\"Error message\"\n  >\n    <IcCheckbox value=\"valueName1\" label=\"Unselected / Default\" />\n    <IcCheckbox value=\"valueName2\" label=\"Selected / Default\" checked />\n  </IcCheckboxGroup>\n</ComponentPreview>\n\n### Indeterminate\n\nexport const snippetsIndeterminate = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-checkbox-group label=\"Liked things\" name=\"1\">\n  <ic-checkbox value=\"drinks\" label=\"Drinks\" checked=\"true\" indeterminate=\"true\">\n    <ic-checkbox-group label=\"Coffee\" hide-label=\"true\" slot=\"additional-field\" name=\"2\">\n      <ic-checkbox value=\"tea\" label=\"Tea\"></ic-checkbox>\n      <ic-checkbox value=\"coffee\" label=\"Coffee\" checked=\"true\" indeterminate=\"true\">\n        <ic-checkbox-group label=\"Coffees\" hide-label=\"true\" slot=\"additional-field\" name=\"3\">\n          <ic-checkbox value=\"mocha\" label=\"Mocha\"></ic-checkbox>\n          <ic-checkbox value=\"espresso\" label=\"Espresso\" checked=\"true\"></ic-checkbox>\n          <ic-checkbox value=\"cappuccino\" label=\"cappuccino\"></ic-checkbox>\n        </ic-checkbox-group>\n      </ic-checkbox>\n      <ic-checkbox value=\"juice\" label=\"Juice\"></ic-checkbox>\n    </ic-checkbox-group>\n  </ic-checkbox>\n</ic-checkbox-group>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcCheckboxGroup label=\"Liked things\" name=\"1\">\n  <IcCheckbox value=\"drinks\" label=\"Drinks\" checked indeterminate>\n    <IcCheckboxGroup name=\"2\" label=\"Coffee\" hideLabel slot=\"additional-field\">\n      <IcCheckbox value=\"tea\" label=\"Tea\" />\n      <IcCheckbox value=\"coffee\" label=\"Coffee\" checked indeterminate>\n        <IcCheckboxGroup label=\"Coffees\" hideLabel slot=\"additional-field\" name=\"3\">\n          <IcCheckbox value=\"mocha\" label=\"Mocha\" />\n          <IcCheckbox value=\"espresso\" label=\"Espresso\" checked />\n          <IcCheckbox value=\"cappuccino\" label=\"cappuccino\" />\n        </IcCheckboxGroup>\n      </IcCheckbox>\n      <IcCheckbox value=\"juice\" label=\"Juice\" />\n    </IcCheckboxGroup>\n  </IcCheckbox>\n</IcCheckboxGroup>`,\n  },\n];\n\n<ComponentPreview\n  snippets={snippetsIndeterminate}\n  style={{ marginTop: \"24px\" }}\n>\n  <IcCheckboxGroup label=\"Liked things\" name=\"1\">\n    <IcCheckbox value=\"drinks\" label=\"Drinks\" checked indeterminate>\n      <IcCheckboxGroup\n        name=\"2\"\n        label=\"Coffee\"\n        hideLabel\n        slot=\"additional-field\"\n      >\n        <IcCheckbox value=\"tea\" label=\"Tea\" />\n        <IcCheckbox value=\"coffee\" label=\"Coffee\" checked indeterminate>\n          <IcCheckboxGroup\n            label=\"Coffees\"\n            hideLabel\n            slot=\"additional-field\"\n            name=\"3\"\n          >\n            <IcCheckbox value=\"mocha\" label=\"Mocha\" />\n            <IcCheckbox value=\"espresso\" label=\"Espresso\" checked />\n            <IcCheckbox value=\"cappuccino\" label=\"cappuccino\" />\n          </IcCheckboxGroup>\n        </IcCheckbox>\n        <IcCheckbox value=\"juice\" label=\"Juice\" />\n      </IcCheckboxGroup>\n    </IcCheckbox>\n  </IcCheckboxGroup>\n</ComponentPreview>\n",
      "path": "/components/checkboxes/code",
      "date": "2023-02-06",
      "title": "Checkbox",
      "status": "BETA",
      "subTitle": "Use checkboxes as part of a form, in dialogs and in control areas such as filters or settings.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/checkboxes",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/checkboxes"
        },
        {
          "title": "Code",
          "path": "/components/checkboxes/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/checkboxes/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/checkboxes/code.mdx",
        "createdAt": "2023-04-14T11:24:28.577Z",
        "lastModified": "2023-04-14T11:24:28.577Z",
        "size": 12277,
        "formattedSize": "12.0 KB"
      }
    },
    {
      "id": "components__checkboxes__guidancex",
      "contents": "\nimport { IcCheckboxGroup, IcCheckbox } from \"@ukic/react\";\nimport checkboxFig1 from \"./images/fig-1-use-the-checklist-to-provide-a-number-of-options.png\";\nimport checkboxFig2 from \"./images/fig-2-use-single-checkboxes-to-allow-a-person-to-agree-to-a-statement.png\";\nimport checkboxFig3 from \"./images/fig-3-a-nested-checklist-that-shows-indeterminate-states-of-a-parent-checkbox-when-only-some-of-its-children-are-selected.png\";\nimport checkboxFig4 from \"./images/fig-4-use-dense-sizing-options-for-compact-layouts.png\";\nimport checkboxFig5 from \"./images/fig-5-checklist-error-state-shown-correctly.png\";\nimport checkboxFig6 from \"./images/fig-6-single-checkbox-error-state-shown-correctly.png\";\nimport checkboxFig7 from \"./images/fig-7-checkbox-child-input-error-shown-correctly.png\";\nimport checkboxFig8 from \"./images/fig-8-checkbox-child-input-error-shown-incorrectly.png\";\nimport checkboxFig9 from \"./images/fig-9-use-clear-and-concise-wording-in-checkbox-labels.png\";\nimport checkboxFig10 from \"./images/fig-10-do-not-use-ambiguous-wording.png\";\n\n## Introduction\n\nAn example of the checkbox component.\n\n<ComponentPreview>\n  <IcCheckboxGroup label=\"Make changes to your order.\" name=\"1\">\n    <IcCheckbox value=\"extra\" label=\"Extra shot (50p)\" />\n    <IcCheckbox value=\"Soya milk\" label=\"Soya milk\" checked />\n    <IcCheckbox\n      value=\"keep cup\"\n      label=\"Takeaway cup (Reusable keep cups only)\"\n      disabled\n    />\n  </IcCheckboxGroup>\n</ComponentPreview>\n\n## When to use\n\nUse checkboxes to allow a user to select any number of options from a list. Checkboxes are grouped into a checkbox group to provide multiple options. Any number of options can be selected and any type of checkbox can be included within the checkbox group.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={checkboxFig1}\n    imageAlt=\"A checklist asking the question ‘What are your favourite types of coffee?’ with six options where two are checked.\"\n    state=\"good\"\n    caption=\"Use the checkbox group to provide a number of options that can be selected.\"\n  />\n</DoubleDoDontCaution>\n\nUse a single checkbox on its own to allow a user to agree with a statement. For example, use a single checkbox to allow a user to mark whether they agree to a terms and conditions statement.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={checkboxFig2}\n    imageAlt=\"A single unchecked checkbox with a label that reads “I agree to the terms and conditions, and privacy statement”.\"\n    state=\"good\"\n    caption=\"Use single checkboxes to allow a person to agree to a statement.\"\n  />\n</DoubleDoDontCaution>\n\nUse a checkbox with a conditional field to display a related additional element when that checkbox is selected. The conditional field can be set to static so that it is always visible and becomes enabled once the checkbox is selected. If the conditional field is set to dynamic the field is displayed only when the checkbox is selected.\n\n## When not to use\n\nDon’t use checkboxes when only one option from a list can be selected. For single select lists, use [radio buttons](/components/radio).\n\n## Interaction behaviour\n\nCheckboxes have three possible selection states: selected, unselected, and indeterminate.\n\nDisplay the indeterminate selection state when the selection of child elements is mixed. Use the indeterminate checkbox to quickly select or de-select all child elements with one click.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={checkboxFig3}\n    imageAlt=\"A checkbox group asking ‘Which hot drinks do you like?’. A checkbox with label ‘coffee’ shows its indeterminate state as only one of its two child checkboxes is selected.\"\n    state=\"good\"\n    caption=\"A nested checkbox group that shows an indeterminate state on a parent checkbox when only some of its children are selected.\"\n  />\n</DoubleDoDontCaution>\n\nCheckboxes are selected or unselected by clicking any part of the checkbox, including the label.\n\n### Sizing\n\nUse small sized checkbox groups for compact layouts. Always use small components with other small input components.\n\n<DoDontCaution\n  imageSrc={checkboxFig4}\n  imageAlt=\"Two forms containing a checklist and a text input. One uses default sizing resulting in larger spacing between components. The other uses small sizing that reduces space between components and results in a shorter vertical height for the same form.\"\n  state=\"good\"\n  caption=\"Use small sizing for compact layouts.\"\n/>\n\n### Validation\n\nThere are two types of errors that can occur on a checkbox: a checkbox input error or an error on a checkbox’s conditional field.\n\nA checkbox input error is when the checkbox or checkbox group component itself is responsible for the error. This is shown using the checkbox error state.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={checkboxFig5}\n    imageAlt=\"A checklist asking 'What are your favourite types of coffee?' with helper text stating 'Select at least one'. Six options are shown but all are unchecked. An error message is displayed below the checklist reading 'Please select at least one option'.\"\n    state=\"good\"\n    caption=\"Checkbox group error state shown correctly.\"\n  />\n  <DoDontCaution\n    imageSrc={checkboxFig6}\n    imageAlt=\"An unchecked checkbox with label 'I agree to the terms and conditions and privacy statement' alongside a submit button. An error state is shown after the checkbox reading 'Please agree before continuing'.\"\n    state=\"good\"\n    caption=\"Single checkbox error state shown correctly.\"\n  />\n</DoubleDoDontCaution>\n\nFor errors on a checkbox’s conditional field, the error is shown only on the conditional field itself and not the wider checkbox or checkbox group component\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={checkboxFig7}\n    imageAlt=\"A checklist asking ‘What are your favourite types of coffee’. Six options are shown and one labelled ‘Flat white’ is selected and shows a conditional field that asks ‘How frothy do you like it?’. An error message is displayed below the conditional field reading ‘Please provide an answer’.\"\n    state=\"good\"\n    caption=\"Checkbox conditional field error shown correctly.\"\n  />\n  <DoDontCaution\n    imageSrc={checkboxFig8}\n    imageAlt=\"A checklist asking ‘What are your favourite types of coffee?’. Six options are shown and one labelled ‘Flat white’ is selected and shows a child field that asks ‘How frothy do you like it?’. An error message is displayed below the child field reading ‘Please provide an answer’. Another error message is displayed below the checklist repeating the same error message.\"\n    state=\"bad\"\n    caption=\"Checkbox conditional field error shown incorrectly. Only the field needs to show the error state and not the parent checkbox or checkbox group.\"\n  />\n</DoubleDoDontCaution>\n\n## Content\n\n### Labels\n\nFollow the [content style guidelines](/styles/content-style) for checkbox group labels as well as each individual checkbox label. Use the checkbox group label to ask the question, and use the checkbox options to provide possible answers.\n\nMake sure to use labels that make it easy to understand what selecting the checkbox represents. Avoid using ambiguous labels that make it unclear whether to select a checkbox or not.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={checkboxFig9}\n    imageAlt=\"A short form asking the user to agree to the terms and conditions. A single unchecked checkbox with label ‘I agree to the terms and conditions and privacy statement’ is shown alongside a submit button.\"\n    state=\"good\"\n    caption=\"Use clear and concise wording in checkbox labels that makes it easy to understand what selecting the box represents.\"\n  />\n  <DoDontCaution\n    imageSrc={checkboxFig10}\n    imageAlt=\"A short form asking the user to agree to the terms and conditions. A single unchecked checkbox with label ‘These are our terms and conditions and privacy statement’ is shown alongside a submit button.\"\n    state=\"bad\"\n    caption=\"Don’t use ambiguous wording that makes it hard to understand what selecting the box represents.\"\n  />\n</DoubleDoDontCaution>\n\n## Related components\n\n- [Radio button](/components/radio)\n",
      "path": "/components/checkboxes",
      "navPriority": 6,
      "date": "2023-02-03",
      "title": "Checkbox",
      "status": "BETA",
      "subTitle": "Use checkboxes as part of a form, in dialogs or in control areas such as filters or settings.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/checkboxes",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/checkboxes"
        },
        {
          "title": "Code",
          "path": "/components/checkboxes/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/checkboxes/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/checkboxes/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.577Z",
        "lastModified": "2023-04-14T11:24:28.577Z",
        "size": 8721,
        "formattedSize": "8.5 KB"
      }
    },
    {
      "id": "components__chips__accessibilityx",
      "contents": "\n## Easy to use for everyone\n\nChips can have `aria-labelledby` or `aria-label` tags that provide additional content to the visible label. However, the visible label must be included within the accessible label.\n\nWhen an interactive chip is disabled, the `aria-disabled` tag is set to `true`.\n\nMake sure that focus is moved to an intuitive element of the page after a chip is dismissed.\n\n## For Assistive Technology\n\nDismissible chips use the role of button as opposed to link in order to help users of assistive technologies understand that the button is performing an action on the page instead of navigating them to a new location. Users should be aware that activating the button will remove the chip from the list.\n\n## Based on\n\nThe chips component has been based on the following resources:\n\n- [ARIA: button role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/button_role), MDN web docs, accessed July 2022.\n- [Pills](https://www.lightningdesignsystem.com/components/pills/), Lightning Design System, accessed July 2022.\n- [Accessibility in Angular Chips component](https://ej2.syncfusion.com/angular/documentation/chips/accessibility/), Syncfusion, accessed July 2022.\n- [Accessibility: WAI-ARIA support](https://www.telerik.com/kendo-react-ui/components/buttons/chiplist/accessibility/), KendoReact, accessed July 2022.\n\n## Testing\n\nWe've tested this component against WCAG 2.1 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/chips/accessibility",
      "date": "2023-02-03",
      "title": "Chip",
      "status": "BETA",
      "subTitle": "Chips are used to filter and present data.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/chips",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/chips"
        },
        {
          "title": "Code",
          "path": "/components/chips/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/chips/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/chips/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.581Z",
        "lastModified": "2023-04-14T11:24:28.581Z",
        "size": 1982,
        "formattedSize": "1.9 KB"
      }
    },
    {
      "id": "components__chips__codex",
      "contents": "\nimport { IcChip } from \"@ukic/react\";\n\n## Component demo\n\nexport const snippetsDefault = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-chip label=\"No icon\"></ic-chip>\n<ic-chip label=\"Small\" size=\"small\">\n  <svg slot=\"icon\" ... />\n</ic-chip>\n<ic-chip label=\"Default\">\n  <svg slot=\"icon\" ... />\n</ic-chip>\n<ic-chip label=\"Large\" size=\"large\">\n  <svg slot=\"icon\" ... />\n</ic-chip>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcChip label=\"No icon\" />\n<IcChip label=\"Small\" size=\"small\">\n  <SlottedSVG slot=\"icon\" ... />\n</IcChip>\n<IcChip label=\"Default\">\n  <SlottedSVG slot=\"icon\" ... />\n</IcChip>\n<IcChip label=\"Large\" size=\"large\">\n  <SlottedSVG slot=\"icon\" ... />\n</IcChip>`,\n  },\n];\n\n<ComponentPreview\n  style={{\n    gap: \"8px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  }}\n  snippets={snippetsDefault}\n>\n  <IcChip label=\"No icon\" />\n  <IcChip label=\"Small\" size=\"small\">\n    <svg\n      slot=\"icon\"\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"currentColor\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M10 0C4.48 0 0 4.48 0 10C0 15.52 4.48 20 10 20C15.52 20 20 15.52 20 10C20 4.48 15.52 0 10 0ZM10 3C11.66 3 13 4.34 13 6C13 7.66 11.66 9 10 9C8.34 9 7 7.66 7 6C7 4.34 8.34 3 10 3ZM10 17.2C7.5 17.2 5.29 15.92 4 13.98C4.03 11.99 8 10.9 10 10.9C11.99 10.9 15.97 11.99 16 13.98C14.71 15.92 12.5 17.2 10 17.2Z\" />\n    </svg>\n  </IcChip>\n  <IcChip label=\"Default\">\n    <svg\n      slot=\"icon\"\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"currentColor\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M10 0C4.48 0 0 4.48 0 10C0 15.52 4.48 20 10 20C15.52 20 20 15.52 20 10C20 4.48 15.52 0 10 0ZM10 3C11.66 3 13 4.34 13 6C13 7.66 11.66 9 10 9C8.34 9 7 7.66 7 6C7 4.34 8.34 3 10 3ZM10 17.2C7.5 17.2 5.29 15.92 4 13.98C4.03 11.99 8 10.9 10 10.9C11.99 10.9 15.97 11.99 16 13.98C14.71 15.92 12.5 17.2 10 17.2Z\" />\n    </svg>\n  </IcChip>\n  <IcChip label=\"Large\" size=\"large\">\n    <svg\n      slot=\"icon\"\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"currentColor\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M10 0C4.48 0 0 4.48 0 10C0 15.52 4.48 20 10 20C15.52 20 20 15.52 20 10C20 4.48 15.52 0 10 0ZM10 3C11.66 3 13 4.34 13 6C13 7.66 11.66 9 10 9C8.34 9 7 7.66 7 6C7 4.34 8.34 3 10 3ZM10 17.2C7.5 17.2 5.29 15.92 4 13.98C4.03 11.99 8 10.9 10 10.9C11.99 10.9 15.97 11.99 16 13.98C14.71 15.92 12.5 17.2 10 17.2Z\" />\n    </svg>\n  </IcChip>\n</ComponentPreview>\n\n## Chip details\n\n<ComponentDetails component=\"ic-chip\" />\n\n## Variants\n\n### Outline\n\nexport const snippetsOutline = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-chip label=\"Small\" size=\"small\" appearance=\"outline\">\n  <svg slot=\"icon\" ... />\n</ic-chip>\n<ic-chip label=\"Default\" appearance=\"outline\">\n  <svg slot=\"icon\" ... />\n</ic-chip>\n<ic-chip label=\"Large\" size=\"large\" appearance=\"outline\">\n  <svg slot=\"icon\" ... />\n</ic-chip>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcChip label=\"Small\" size=\"small\" appearance=\"outline\">\n  <SlottedSVG slot=\"icon\" ... />\n</IcChip>\n<IcChip label=\"Default\" appearance=\"outline\">\n  <SlottedSVG slot=\"icon\" ... />\n</IcChip>\n<IcChip label=\"Large\" size=\"large\" appearance=\"outline\">\n  <SlottedSVG slot=\"icon\" ... />\n</IcChip>`,\n  },\n];\n\n<ComponentPreview\n  style={{\n    gap: \"8px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  }}\n  snippets={snippetsOutline}\n>\n  <IcChip label=\"Small\" size=\"small\" appearance=\"outline\">\n    <svg\n      slot=\"icon\"\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"currentColor\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M10 0C4.48 0 0 4.48 0 10C0 15.52 4.48 20 10 20C15.52 20 20 15.52 20 10C20 4.48 15.52 0 10 0ZM10 3C11.66 3 13 4.34 13 6C13 7.66 11.66 9 10 9C8.34 9 7 7.66 7 6C7 4.34 8.34 3 10 3ZM10 17.2C7.5 17.2 5.29 15.92 4 13.98C4.03 11.99 8 10.9 10 10.9C11.99 10.9 15.97 11.99 16 13.98C14.71 15.92 12.5 17.2 10 17.2Z\" />\n    </svg>\n  </IcChip>\n  <IcChip label=\"Default\" appearance=\"outline\">\n    <svg\n      slot=\"icon\"\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"currentColor\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M10 0C4.48 0 0 4.48 0 10C0 15.52 4.48 20 10 20C15.52 20 20 15.52 20 10C20 4.48 15.52 0 10 0ZM10 3C11.66 3 13 4.34 13 6C13 7.66 11.66 9 10 9C8.34 9 7 7.66 7 6C7 4.34 8.34 3 10 3ZM10 17.2C7.5 17.2 5.29 15.92 4 13.98C4.03 11.99 8 10.9 10 10.9C11.99 10.9 15.97 11.99 16 13.98C14.71 15.92 12.5 17.2 10 17.2Z\" />\n    </svg>\n  </IcChip>\n  <IcChip label=\"Large\" size=\"large\" appearance=\"outline\">\n    <svg\n      slot=\"icon\"\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"currentColor\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M10 0C4.48 0 0 4.48 0 10C0 15.52 4.48 20 10 20C15.52 20 20 15.52 20 10C20 4.48 15.52 0 10 0ZM10 3C11.66 3 13 4.34 13 6C13 7.66 11.66 9 10 9C8.34 9 7 7.66 7 6C7 4.34 8.34 3 10 3ZM10 17.2C7.5 17.2 5.29 15.92 4 13.98C4.03 11.99 8 10.9 10 10.9C11.99 10.9 15.97 11.99 16 13.98C14.71 15.92 12.5 17.2 10 17.2Z\" />\n    </svg>\n  </IcChip>\n</ComponentPreview>\n\n### Dismissible\n\nexport const snippetsDismissible = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-chip label=\"Default\" dismissible=\"true\" id='my-chip'>\n  <svg slot=\"icon\" ... />\n</ic-chip>\n<ic-chip label=\"Default\" appearance=\"outline\" dismissible=\"true\">\n  <svg slot=\"icon\" ... />\n</ic-chip>\n<script>\n  const chip = document.querySelector('#my-chip');\n  chip.addEventListener('icDismiss', (ev) => console.log(ev));\n</script>\n`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcChip label=\"Default\" dismissible onIcDismiss={(ev) => console.log(ev)}>\n  <SlottedSVG slot=\"icon\" ... />\n</IcChip>\n<IcChip label=\"Default\" appearance=\"outline\" dismissible>\n  <SlottedSVG slot=\"icon\" ... />\n</IcChip>`,\n  },\n];\n\n<ComponentPreview\n  style={{\n    gap: \"8px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  }}\n  snippets={snippetsDismissible}\n>\n  <IcChip label=\"Default\" dismissible onIcDismiss={(ev) => console.log(ev)}>\n    <svg\n      slot=\"icon\"\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"currentColor\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M10 0C4.48 0 0 4.48 0 10C0 15.52 4.48 20 10 20C15.52 20 20 15.52 20 10C20 4.48 15.52 0 10 0ZM10 3C11.66 3 13 4.34 13 6C13 7.66 11.66 9 10 9C8.34 9 7 7.66 7 6C7 4.34 8.34 3 10 3ZM10 17.2C7.5 17.2 5.29 15.92 4 13.98C4.03 11.99 8 10.9 10 10.9C11.99 10.9 15.97 11.99 16 13.98C14.71 15.92 12.5 17.2 10 17.2Z\" />\n    </svg>\n  </IcChip>\n  <IcChip\n    label=\"Default\"\n    appearance=\"outline\"\n    dismissible\n    onIcDismiss={(ev) => console.log(ev)}\n  >\n    <svg\n      slot=\"icon\"\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"currentColor\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M10 0C4.48 0 0 4.48 0 10C0 15.52 4.48 20 10 20C15.52 20 20 15.52 20 10C20 4.48 15.52 0 10 0ZM10 3C11.66 3 13 4.34 13 6C13 7.66 11.66 9 10 9C8.34 9 7 7.66 7 6C7 4.34 8.34 3 10 3ZM10 17.2C7.5 17.2 5.29 15.92 4 13.98C4.03 11.99 8 10.9 10 10.9C11.99 10.9 15.97 11.99 16 13.98C14.71 15.92 12.5 17.2 10 17.2Z\" />\n    </svg>\n  </IcChip>\n</ComponentPreview>\n\n### Disabled\n\nexport const snippetsDisabled = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-chip label=\"Default\" dismissible=\"true\" disabled=\"true\">\n  <svg slot=\"icon\" ... />\n</ic-chip>\n<ic-chip label=\"Default\" appearance=\"outline\" dismissible=\"true\" disabled=\"true\">\n  <svg slot=\"icon\" ... />\n</ic-chip>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcChip label=\"Default\" dismissible disabled>\n  <SlottedSVG slot=\"icon\" ... />\n</IcChip>\n<IcChip label=\"Default\" appearance=\"outline\" dismissible disabled>\n  <SlottedSVG slot=\"icon\" ... />\n</IcChip>`,\n  },\n];\n\n<ComponentPreview\n  style={{\n    gap: \"8px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  }}\n  snippets={snippetsDisabled}\n>\n  <IcChip label=\"Default\" dismissible disabled>\n    <svg\n      slot=\"icon\"\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"currentColor\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M10 0C4.48 0 0 4.48 0 10C0 15.52 4.48 20 10 20C15.52 20 20 15.52 20 10C20 4.48 15.52 0 10 0ZM10 3C11.66 3 13 4.34 13 6C13 7.66 11.66 9 10 9C8.34 9 7 7.66 7 6C7 4.34 8.34 3 10 3ZM10 17.2C7.5 17.2 5.29 15.92 4 13.98C4.03 11.99 8 10.9 10 10.9C11.99 10.9 15.97 11.99 16 13.98C14.71 15.92 12.5 17.2 10 17.2Z\" />\n    </svg>\n  </IcChip>\n  <IcChip label=\"Default\" appearance=\"outline\" dismissible disabled>\n    <svg\n      slot=\"icon\"\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"currentColor\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M10 0C4.48 0 0 4.48 0 10C0 15.52 4.48 20 10 20C15.52 20 20 15.52 20 10C20 4.48 15.52 0 10 0ZM10 3C11.66 3 13 4.34 13 6C13 7.66 11.66 9 10 9C8.34 9 7 7.66 7 6C7 4.34 8.34 3 10 3ZM10 17.2C7.5 17.2 5.29 15.92 4 13.98C4.03 11.99 8 10.9 10 10.9C11.99 10.9 15.97 11.99 16 13.98C14.71 15.92 12.5 17.2 10 17.2Z\" />\n    </svg>\n  </IcChip>\n</ComponentPreview>\n",
      "path": "/components/chips/code",
      "date": "2023-02-06",
      "title": "Chip",
      "status": "BETA",
      "subTitle": "Chips are used to filter and present data.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/chips",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/chips"
        },
        {
          "title": "Code",
          "path": "/components/chips/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/chips/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/chips/code.mdx",
        "createdAt": "2023-04-14T11:24:28.581Z",
        "lastModified": "2023-04-14T11:24:28.581Z",
        "size": 9611,
        "formattedSize": "9.4 KB"
      }
    },
    {
      "id": "components__chips__guidancex",
      "contents": "\nimport { IcChip } from \"@ukic/react\";\nimport chipsFig1 from \"./images/fig-1-use-dismissible-chips-for-filtering-multiple-item.png\";\nimport chipsFig2 from \"./images/fig-2-do-use-static-chip-to-display-descriptive-non-interactive-information.png\";\nimport chipsFig3 from \"./images/fig-3-do-not-replace-status-tags-for-static-chips.png\";\nimport chipsFig4 from \"./images/fig-4-do-use-status-tags-to-display-status.png\";\nimport chipsVid1 from \"./images/anim-1-do-allow-users-to-re-select-the-item-after-it-has-been-dismissed.mp4\";\nimport chipsVid2 from \"./images/anim-2-do-not-use-dismissible-chips-when-the-user-will-not-be-able-to-re-select-the-dismissed-item.mp4\";\n\n## Component variants\n\n<ComponentPreview style={{ gap: \"8px\" }}>\n  <IcChip label=\"Default\" dismissible>\n    <svg\n      slot=\"icon\"\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"currentColor\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M10 0C4.48 0 0 4.48 0 10C0 15.52 4.48 20 10 20C15.52 20 20 15.52 20 10C20 4.48 15.52 0 10 0ZM10 3C11.66 3 13 4.34 13 6C13 7.66 11.66 9 10 9C8.34 9 7 7.66 7 6C7 4.34 8.34 3 10 3ZM10 17.2C7.5 17.2 5.29 15.92 4 13.98C4.03 11.99 8 10.9 10 10.9C11.99 10.9 15.97 11.99 16 13.98C14.71 15.92 12.5 17.2 10 17.2Z\" />\n    </svg>\n  </IcChip>\n  <IcChip label=\"Default\">\n    <svg\n      slot=\"icon\"\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"currentColor\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M10 0C4.48 0 0 4.48 0 10C0 15.52 4.48 20 10 20C15.52 20 20 15.52 20 10C20 4.48 15.52 0 10 0ZM10 3C11.66 3 13 4.34 13 6C13 7.66 11.66 9 10 9C8.34 9 7 7.66 7 6C7 4.34 8.34 3 10 3ZM10 17.2C7.5 17.2 5.29 15.92 4 13.98C4.03 11.99 8 10.9 10 10.9C11.99 10.9 15.97 11.99 16 13.98C14.71 15.92 12.5 17.2 10 17.2Z\" />\n    </svg>\n  </IcChip>\n</ComponentPreview>\n\nThere are two types of chips: dismissible chips and static chips. Dismissible chips have both filled and outline variants and are interactive, whereas static chips simply present information and aren't actionable.\n\n### Dismissible chips\n\nUse a dismissible chip to show selected data from a user action that can be cleared by dismissing the chip. This is often used in the context of filtering and selection.\n\n#### Filled\n\nUse filled dismissible chips to provide high emphasis on the displayed information\n\n#### Outlined\n\nUse outlined dismissible chips to provide low emphasis on the displayed information\n\n### Static chips\n\nUse static chips to display information that does not need clearing. They aren't interactive so don't present any action and they can't be dismissed.\n\n## When to use\n\n### Dismissible chips\n\nUse dismissible chips when you need to choose multiple items from a list but need to show items after they've been chosen.\n\nCommon use cases include:\n\n- A list showing which filters have been selected for a search.\n- Choosing multiple recipients of a message.\n\n<DoDontCaution\n  imageSrc={chipsFig1}\n  imageAlt=\"A correct example of a series of dismissible chips being used in a multi-select dropdown to display a list of selected items.\"\n  state=\"good\"\n  caption=\"Use dismissible chips for filtering multiple items.\"\n/>\n\n### Static chips\n\nUse static chips when you need to simply display a piece of information with no interaction, such as a label.\n\nCommon use cases include:\n\n- Labelling or drawing attention to a particular card or row because of its state.\n\n- Displaying the current location of an item.\n\n<DoDontCaution\n  imageSrc={chipsFig2}\n  imageAlt=\"A correct example of three static chips labelled 'Published 18 May 2021', '#UI', and '#Components' right below the header of a page titled 'Guidance'.\"\n  state=\"good\"\n  caption=\"Use static chips to display descriptive, non-interactive information.\"\n/>\n\n## When not to use\n\n### Dismissible chips\n\nDon't use dismissible chips where the user can't re-select the item presented in the chip.\n\nFor example, if used to show a selected filter, after dismissing the chip and clearing the filter, it can be applied again later.\n\n<video\n  width=\"100%\"\n  muted\n  controls\n  loop\n  title=\"An animation showing the user dismissing a chip labelled 'Roasted' and the option not re-appearing in the filter section.\"\n>\n  <source src={chipsVid1} type=\"video/mp4\" />\n</video>\n\nDon't use dismissible chips when the user will not be able to re-select the dismissed item.\n\n<video\n  width=\"100%\"\n  muted\n  controls\n  loop\n  title=\"An animation showing the behaviour of a dismissible chip as it re-appears in the filter section when the user dismisses it.\"\n>\n  <source src={chipsVid2} type=\"video/mp4\" />\n</video>\n\nAllow users to re-select the item after it has been dismissed.\n\n### Static chips\n\nDon't use static chips to show status. Use [status tags](/components/status-tags) instead.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={chipsFig4}\n    imageAlt=\"Three chips, of which a neutral tag labelled 'Idle, a warning tag labelled 'Offline', and success tag labelled 'Online' displaying the status of three coffee machines.\"\n    state=\"good\"\n    caption=\"Use status tags to display status.\"\n  />\n  <DoDontCaution\n    imageSrc={chipsFig3}\n    imageAlt=\"Three static chips labelled 'Idle', 'Offline', and 'Online' displaying the status of three coffee machines.\"\n    state=\"bad\"\n    caption=\"Don't use static chips to denote status.\"\n  />\n</DoubleDoDontCaution>\n\n## Layout and placement\n\n### Chip grouping\n\nWhen using chips in a group, make sure they are left aligned and are positioned next to each other in a row.\n\nOnly position chips on multiple rows if there isn't enough horizontal space to show them on one, or if they are segmented into labelled groups.\n\n## Content\n\n### Labels\n\nUse concise labels as longer labels will be truncated if it forces the chip to exceed the maximum width.\n\n### Icons\n\nUse an icon on the left of a dismissible or static chip to provide additional meaning.\n\nWhen including an icon in a chip make sure that the icon is understandable and relevant to the information presented.\n\nAlways provide alternative descriptions for icons. Don't use icons if they aren't necessary.\n\n## Related components\n\n- [Status tags](/components/status-tags)\n",
      "path": "/components/chips",
      "navPriority": 7,
      "date": "2023-02-03",
      "title": "Chip",
      "status": "BETA",
      "subTitle": "Chips are used to filter and present data.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/chips",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/chips"
        },
        {
          "title": "Code",
          "path": "/components/chips/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/chips/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/chips/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.581Z",
        "lastModified": "2023-04-14T11:24:28.581Z",
        "size": 6611,
        "formattedSize": "6.5 KB"
      }
    },
    {
      "id": "components__classification-banner__accessibilityx",
      "contents": "\nimport { IcClassificationBanner } from \"@ukic/react\";\n\n<IcClassificationBanner />\n\n## Easy to use for everyone\n\nClassification banners use colours that have been designed for maximum legibility across a range of colour vision impairments.\n\n## For Assistive Technology\n\nFor screen reader users, classification banners feature a hidden label: “The protective marking of this page is:”. The classification banner is also announced as a landmark region.\n\n## Testing\n\nWe’ve tested this component against WCAG 2.1 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/classification-banner/accessibility",
      "date": "2023-02-03",
      "title": "Classification banner",
      "status": "BETA",
      "subTitle": "Classification banners are used to show the data classification (also known as protective marking) of an app.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/classification-banner",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/classification-banner"
        },
        {
          "title": "Code",
          "path": "/components/classification-banner/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/classification-banner/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/classification-banner/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.589Z",
        "lastModified": "2023-04-14T11:24:28.589Z",
        "size": 1271,
        "formattedSize": "1.2 KB"
      }
    },
    {
      "id": "components__classification-banner__codex",
      "contents": "\nimport { IcClassificationBanner } from \"@ukic/react\";\n\n<IcClassificationBanner />\n\nexport const snippets = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-classification-banner></ic-classification-banner>\n<ic-classification-banner classification=\"official\"></ic-classification-banner>\n<ic-classification-banner classification=\"official-sensitive\"></ic-classification-banner>\n<ic-classification-banner classification=\"secret\"></ic-classification-banner>\n<ic-classification-banner classification=\"top-secret\"></ic-classification-banner>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcClassificationBanner inline />\n<IcClassificationBanner classification=\"official\"/>\n<IcClassificationBanner classification=\"official-sensitive\"/>\n<IcClassificationBanner classification=\"secret\"/>\n<IcClassificationBanner classification=\"top-secret\"/>`,\n  },\n];\n\n## Component demo\n\n<ComponentPreview snippets={snippets} style={{ gap: \"8px\" }}>\n  <IcClassificationBanner inline />\n  <IcClassificationBanner classification=\"official\" inline />\n  <IcClassificationBanner classification=\"official-sensitive\" inline />\n  <IcClassificationBanner classification=\"secret\" inline />\n  <IcClassificationBanner classification=\"top-secret\" inline />\n</ComponentPreview>\n\n## Classification banner details\n\n<ComponentDetails component=\"ic-classification-banner\" />\n\n## Variants\n\nexport const snippetsVariants = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-classification-banner classification=\"official\" up-to=\"true\" country=\"us\" additional-selectors=\"ukic\"></ic-classification-banner>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcClassificationBanner classification=\"official\" upTo=\"true\" country=\"us\" additionalSelectors=\"ukic\"/>`,\n  },\n];\n\n### Up to, country and additional selectors\n\n<ComponentPreview snippets={snippetsVariants} style={{ gap: \"8px\" }}>\n  <IcClassificationBanner\n    classification=\"official\"\n    inline\n    upTo=\"true\"\n    country=\"us\"\n    additionalSelectors=\"ukic\"\n  />\n</ComponentPreview>\n",
      "path": "/components/classification-banner/code",
      "date": "2023-02-03",
      "title": "Classification banner",
      "status": "BETA",
      "subTitle": "Classification banners are used to show the data classification (also known as protective marking) of an app.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/classification-banner",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/classification-banner"
        },
        {
          "title": "Code",
          "path": "/components/classification-banner/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/classification-banner/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/classification-banner/code.mdx",
        "createdAt": "2023-04-14T11:24:28.589Z",
        "lastModified": "2023-04-14T11:24:28.589Z",
        "size": 2636,
        "formattedSize": "2.6 KB"
      }
    },
    {
      "id": "components__classification-banner__guidancex",
      "contents": "\nimport { IcClassificationBanner } from \"@ukic/react\";\n\n## Introduction\n\nProtective markings indicate the level of sensitivity of classified or controlled information.\n\n<ComponentPreview style={{ gap: \"8px\" }}>\n  <IcClassificationBanner inline />\n  <IcClassificationBanner classification=\"official\" inline />\n  <IcClassificationBanner classification=\"official-sensitive\" inline />\n  <IcClassificationBanner classification=\"secret\" inline />\n  <IcClassificationBanner classification=\"top-secret\" inline />\n</ComponentPreview>\n\n<IcClassificationBanner />\n\n## When to use\n\nAll apps, except public ones, require a classification banner. When multiple pieces of information require different markings, use classifications banners on each component.\n\n## Layout and placement\n\nPlace a single banner at the bottom of the viewport. The banner is always fixed and should not scroll with the page.\n\nWhen printing or exporting a page, the protective marking must appear at the top and bottom of each page in the printed or exported document.\n\n## Content\n\nIf there is information on a single page that has multiple different classifications, display the maximum classification with the text prefix of `UP TO`.\n\n## Colour\n\nDon’t alter or customise the [classification banner colours](/styles/colour#classification) as they've been designed to meet accessibility requirements.\n\n## Accessibility consideration\n\nMake sure the classification banner is the first item that is read out to people who use screen readers. Put the component at the top of the DOM/HTML.\n",
      "path": "/components/classification-banner",
      "navPriority": 8,
      "date": "2023-02-03",
      "title": "Classification banner",
      "status": "BETA",
      "subTitle": "Classification banners are used to show the data classification (also known as protective marking) of an app.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/classification-banner",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/classification-banner"
        },
        {
          "title": "Code",
          "path": "/components/classification-banner/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/classification-banner/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/classification-banner/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.589Z",
        "lastModified": "2023-04-14T11:24:28.589Z",
        "size": 2188,
        "formattedSize": "2.1 KB"
      }
    },
    {
      "id": "components__data-entity__accessibilityx",
      "contents": "\n## Easy to use for everyone\n\nThe data entity component is descriptive and designed to inform the user in a comprehensive format about their inputs before making a submission. By including an interaction area, it provides users with a direct link or action to interact with an individual row.\n\n## For Assistive Technology\n\nThe data entity can either be interactive or non-interactive. It is therefore included in the tab-indexing for keyboard navigation as individual entity items, allowing it to be read out by screen readers using the aria-current attribute.\n\n## Based on\n\nThe data entity component has been based on the following resources:\n\n- [Check answers](https://design-system.service.gov.uk/patterns/check-answers/), GOV.UK Design System, accessed September 2022.\n- [A live service is not the end of the story](https://dwpdigital.blog.gov.uk/2016/07/08/a-live-service-is-not-the-end-of-the-story/), DWP Digital, accessed September 2022.\n- [Help users to check answers](https://ons-design-system.netlify.app/patterns/check-answers/), ONS, accessed September 2022.\n\n## Testing\n\nWe’ve tested this component against WCAG 2.1 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/data-entity/accessibility",
      "date": "2023-02-03",
      "title": "Data entity",
      "status": "BETA",
      "subTitle": "The data entity component displays a group of related data in a consistent and easy to consume way.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/data-entity",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/data-entity"
        },
        {
          "title": "Code",
          "path": "/components/data-entity/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/data-entity/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/data-entity/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.589Z",
        "lastModified": "2023-04-14T11:24:28.589Z",
        "size": 1801,
        "formattedSize": "1.8 KB"
      }
    },
    {
      "id": "components__data-entity__codex",
      "contents": "\nimport {\n  IcDataEntity,\n  IcDataRow,\n  IcLink,\n  IcTypography,\n  IcTextField,\n  IcButton,\n  IcStatusTag,\n} from \"@ukic/react\";\n\n## Component demo\n\nexport const snippets = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-data-entity heading=\"Personal details\">\n    <ic-data-row label=\"Name\" value=\"Michael Johnson\">\n      <ic-link href=\"#\" slot=\"end-component\">\n        Edit\n      </ic-link>\n    </ic-data-row>\n    <ic-data-row label=\"Date of birth\" value=\"16 October 1995\">\n      <ic-link href=\"#\" slot=\"end-component\">\n        Edit\n      </ic-link>\n    </ic-data-row>\n    <ic-data-row label=\"Telephone\" value=\"07449 7654873\">\n      <ic-link href=\"#\" slot=\"end-component\">\n        Edit\n      </ic-link>\n    </ic-data-row>\n    <ic-data-row label=\"Email\" value=\"mjohnson@coffee.gov\">\n      <ic-link href=\"#\" slot=\"end-component\">\n        Edit\n      </ic-link>\n    </ic-data-row>\n    <ic-data-row label=\"Address\">\n      <ic-typography variant=\"body\" slot=\"value\">\n        383 Coffee Drive\n        <br />\n        London\n        <br />\n        SW7 988\n        <br />\n        United Kingdom\n      </ic-typography>\n      <ic-link href=\"#\" slot=\"end-component\">\n        Edit\n      </ic-link>\n    </ic-data-row>\n    <ic-data-row label=\"Travel records\" value=\"Johnson_X46w32.pdf\">\n      <ic-button variant=\"icon\" aria-label=\"Download\" slot=\"end-component\">\n          <svg>...</svg>\n      </ic-button>\n    </ic-data-row>\n  </ic-data-entity>`,\n  },\n  {\n    language: \"React\",\n    snippet: `  <IcDataEntity heading=\"Personal details\">\n    <IcDataRow label=\"Name\" value=\"Michael Johnson\">\n      <IcLink href=\"#\" slot=\"end-component\">\n        Edit\n      </IcLink>\n    </IcDataRow>\n    <IcDataRow label=\"Date of birth\" value=\"16 October 1995\">\n      <IcLink href=\"#\" slot=\"end-component\">\n        Edit\n      </IcLink>\n    </IcDataRow>\n    <IcDataRow label=\"Telephone\" value=\"07449 7654873\">\n      <IcLink href=\"#\" slot=\"end-component\">\n        Edit\n      </IcLink>\n    </IcDataRow>\n    <IcDataRow label=\"Email\" value=\"mjohnson@coffee.gov\">\n      <IcLink href=\"#\" slot=\"end-component\">\n        Edit\n      </IcLink>\n    </IcDataRow>\n    <IcDataRow label=\"Address\">\n      <IcTypography variant=\"body\" slot=\"value\">\n        383 Coffee Drive\n        <br />\n        London\n        <br />\n        SW7 988\n        <br />\n        United Kingdom\n      </IcTypography>\n      <IcLink href=\"#\" slot=\"end-component\">\n        Edit\n      </IcLink>\n    </IcDataRow>\n    <IcDataRow label=\"Travel records\" value=\"Johnson_X46w32.pdf\">\n      <IcButton variant=\"icon\" aria-label=\"Download\" slot=\"end-component\">\n        <svg>...</svg>\n      </IcButton>\n    </IcDataRow>\n  </IcDataEntity>`,\n  },\n];\n\n<ComponentPreview snippets={snippets}>\n  <IcDataEntity heading=\"Personal details\">\n    <IcDataRow label=\"Name\" value=\"Michael Johnson\">\n      <IcLink href=\"#\" slot=\"end-component\">\n        Edit\n      </IcLink>\n    </IcDataRow>\n    <IcDataRow label=\"Date of birth\" value=\"16 October 1995\">\n      <IcLink href=\"#\" slot=\"end-component\">\n        Edit\n      </IcLink>\n    </IcDataRow>\n    <IcDataRow label=\"Telephone\" value=\"07449 7654873\">\n      <IcLink href=\"#\" slot=\"end-component\">\n        Edit\n      </IcLink>\n    </IcDataRow>\n    <IcDataRow label=\"Email\" value=\"mjohnson@coffee.gov\">\n      <IcLink href=\"#\" slot=\"end-component\">\n        Edit\n      </IcLink>\n    </IcDataRow>\n    <IcDataRow label=\"Address\">\n      <IcTypography variant=\"body\" slot=\"value\">\n        383 Coffee Drive\n        <br />\n        London\n        <br />\n        SW7 988\n        <br />\n        United Kingdom\n      </IcTypography>\n      <IcLink href=\"#\" slot=\"end-component\">\n        Edit\n      </IcLink>\n    </IcDataRow>\n    <IcDataRow label=\"Travel records\" value=\"Johnson_X46w32.pdf\">\n      <IcButton variant=\"icon\" aria-label=\"Download\" slot=\"end-component\">\n        <svg viewBox=\"0 0 24 24\" height=\"24px\" width=\"24px\">\n          <path\n            d=\"M5,20H19V18H5M19,9H15V3H9V9H5L12,16L19,9Z\"\n            fill=\"currentColor\"\n          />\n        </svg>\n      </IcButton>\n    </IcDataRow>\n  </IcDataEntity>\n</ComponentPreview>\n\n## Data row details\n\n<ComponentDetails component=\"ic-data-row\" />\n\n## Data entity details\n\n<ComponentDetails component=\"ic-data-entity\" />\n\n## Variants\n\n### With status tags\n\nexport const withStatusTags = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-data-entity heading=\"Personal details\">\n    <ic-data-row label=\"Name\" value=\"Michael Johnson\">\n      <ic-status-tag\n        status=\"success\"\n        label=\"confirmed\"\n        variant=\"secondary\"\n        slot=\"end-component\"\n      />\n    </ic-data-row>\n    <ic-data-row label=\"Date of birth\" value=\"16 October 1995\">\n      <ic-status-tag\n        status=\"warning\"\n        label=\"in review\"\n        variant=\"secondary\"\n        slot=\"end-component\"\n      />\n    </ic-data-row>\n    <ic-data-row label=\"Telephone\" value=\"07449 7654873\">\n      <ic-status-tag\n        status=\"warning\"\n        label=\"in review\"\n        variant=\"secondary\"\n        slot=\"end-component\"\n      />\n    </ic-data-row>\n    <ic-data-row label=\"Email\" value=\"mjohnson@coffee.gov\">\n      <ic-status-tag\n        status=\"success\"\n        label=\"confirmed\"\n        variant=\"secondary\"\n        slot=\"end-component\"\n      />\n    </ic-data-row>\n    <ic-data-row label=\"Address\">\n      <ic-typography variant=\"body\" slot=\"value\">\n        383 Coffee Drive\n        <br />\n        London\n        <br />\n        SW7 988\n        <br />\n        United Kingdom\n      </ic-typography>\n      <ic-status-tag\n        label=\"not confirmed\"\n        variant=\"secondary\"\n        slot=\"end-component\"\n      />\n    </ic-data-row>\n  </ic-data-entity>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcDataEntity heading=\"Personal details\">\n    <IcDataRow label=\"Name\" value=\"Michael Johnson\">\n      <IcStatusTag\n        status=\"success\"\n        label=\"confirmed\"\n        variant=\"secondary\"\n        slot=\"end-component\"\n      />\n    </IcDataRow>\n    <IcDataRow label=\"Date of birth\" value=\"16 October 1995\">\n      <IcStatusTag\n        status=\"warning\"\n        label=\"in review\"\n        variant=\"secondary\"\n        slot=\"end-component\"\n      />\n    </IcDataRow>\n    <IcDataRow label=\"Telephone\" value=\"07449 7654873\">\n      <IcStatusTag\n        status=\"warning\"\n        label=\"in review\"\n        variant=\"secondary\"\n        slot=\"end-component\"\n      />\n    </IcDataRow>\n    <IcDataRow label=\"Email\" value=\"mjohnson@coffee.gov\">\n      <IcStatusTag\n        status=\"success\"\n        label=\"confirmed\"\n        variant=\"secondary\"\n        slot=\"end-component\"\n      />\n    </IcDataRow>\n    <IcDataRow label=\"Address\">\n      <IcTypography variant=\"body\" slot=\"value\">\n        383 Coffee Drive\n        <br />\n        London\n        <br />\n        SW7 988\n        <br />\n        United Kingdom\n      </IcTypography>\n      <IcStatusTag\n        label=\"not confirmed\"\n        variant=\"secondary\"\n        slot=\"end-component\"\n      />\n    </IcDataRow>\n  </IcDataEntity>`,\n  },\n];\n\n<ComponentPreview snippets={withStatusTags}>\n  <IcDataEntity heading=\"Personal details\">\n    <IcDataRow label=\"Name\" value=\"Michael Johnson\">\n      <IcStatusTag\n        status=\"success\"\n        label=\"confirmed\"\n        variant=\"secondary\"\n        slot=\"end-component\"\n      />\n    </IcDataRow>\n    <IcDataRow label=\"Date of birth\" value=\"16 October 1995\">\n      <IcStatusTag\n        status=\"warning\"\n        label=\"in review\"\n        variant=\"secondary\"\n        slot=\"end-component\"\n      />\n    </IcDataRow>\n    <IcDataRow label=\"Telephone\" value=\"07449 7654873\">\n      <IcStatusTag\n        status=\"warning\"\n        label=\"in review\"\n        variant=\"secondary\"\n        slot=\"end-component\"\n      />\n    </IcDataRow>\n    <IcDataRow label=\"Email\" value=\"mjohnson@coffee.gov\">\n      <IcStatusTag\n        status=\"success\"\n        label=\"confirmed\"\n        variant=\"secondary\"\n        slot=\"end-component\"\n      />\n    </IcDataRow>\n    <IcDataRow label=\"Address\">\n      <IcTypography variant=\"body\" slot=\"value\">\n        383 Coffee Drive\n        <br />\n        London\n        <br />\n        SW7 988\n        <br />\n        United Kingdom\n      </IcTypography>\n      <IcStatusTag\n        label=\"not confirmed\"\n        variant=\"secondary\"\n        slot=\"end-component\"\n      />\n    </IcDataRow>\n  </IcDataEntity>\n</ComponentPreview>\n\n### Editable example\n\nexport const editableExample = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-data-entity heading=\"Personal details\">\n  <ic-data-row label=\"Name\"> \n    <ic-text-field \n      slot=\"value\" \n      label=\"Name\" \n      value=\"Michael Johnson\" \n      readonly \n      hide-label \n      full-width\n    />\n  </ic-data-row>\n  <ic-data-row label=\"Date of birth\">\n    <ic-text-field \n      slot=\"value\" \n      label=\"Date of birth\" \n      value=\"16 October 1995\" \n      readonly \n      hide-label \n      full-width\n    />\n  </ic-data-row>\n  <ic-data-row label=\"Telephone\">\n    <ic-text-field \n      slot=\"value\" \n      label=\"Telephone\" \n      value=\"07449 7654873\" \n      readonly \n      hide-label \n      full-width\n    />\n  </ic-data-row>\n  <ic-data-row label=\"Email\">\n    <ic-text-field \n      slot=\"value\" \n      label=\"Email\" \n      value=\"mjohnson@coffee.gov\" \n      readonly \n      hide-label \n      full-width\n    />\n  </ic-data-row>\n  <ic-data-row label=\"Address\">\n    <ic-text-field \n      slot=\"value\" \n      label=\"Address\" \n      value=\"383 Coffee Drive, London, SW7 988, United Kingdom\"  \n      readonly \n      hide-label \n      full-width\n    />\n  </ic-data-row>\n</ic-data-entity>\n<ic-button id='confirm-button' style=\"margin-right: var(--ic-space-md);margin-top: var(--ic-space-lg);\">\n  Confirm\n</ic-button>\n<ic-button id='edit-button' variant=\"secondary\" style=\"margin-top: var(--ic-space-lg);\">\n  Edit\n</ic-button>\n<script>\n  const textFields = document.querySelectorAll('ic-text-field');\n  const confirmBtn = document.querySelector('#confirm-button');\n  confirmBtn.addEventListener('click', () => {\n    textFields.forEach((textField) => {\n      textField.setAttribute('readonly', '');\n    };\n  });\n  const editBtn = document.querySelector('#edit-button');\n  editBtn.addEventListener('click', () => {\n    textFields.forEach((textField) => {\n      textField.removeAttribute('readonly');\n    };\n  });\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcDataEntity heading=\"Personal details\">\n  <IcDataRow label=\"Name\">\n    <IcTextField\n      slot=\"value\"\n      label=\"Name\"\n      value=\"Michael Johnson\"\n      readonly\n      hide-label\n      full-width\n    />\n  </IcDataRow>\n  <IcDataRow label=\"Date of birth\" value=\"16 October 1995\">\n    <IcTextField\n      slot=\"value\"\n      label=\"Date of birth\"\n      value=\"16 October 1995\"\n      readonly\n      hide-label\n      full-width\n    />\n  </IcDataRow>\n  <IcDataRow label=\"Telephone\" value=\"07449 7654873\">\n    <IcTextField\n      slot=\"value\"\n      label=\"Telephone\"\n      value=\"07449 7654873\"\n      readonly\n      hide-label\n      full-width\n    />\n  </IcDataRow>\n  <IcDataRow label=\"Email\" value=\"mjohnson@coffee.gov\">\n    <IcTextField\n      slot=\"value\"\n      label=\"Email\"\n      value=\"mjohnson@coffee.gov\"\n      readonly\n      hide-label\n      full-width\n    />\n  </IcDataRow>\n  <IcDataRow label=\"Address\">\n    <IcTextField\n      slot=\"value\"\n      label=\"Address\"\n      value=\"383 Coffee Drive, London, SW7 988, United Kingdom\"\n      readonly\n      hide-label\n      full-width\n    />\n  </IcDataRow>\n</IcDataEntity>\n<IcButton\n  onClick={() => {\n    const textFields = document.querySelectorAll('ic-text-field');\n    textFields.forEach((textField) => {\n      textField.setAttribute('readonly', '');\n    })\n  }}\n  style={{\n    marginRight: \"var(--ic-space-md)\",\n    marginTop: \"var(--ic-space-lg)\",\n  }}\n>\n  Confirm\n</IcButton>\n<IcButton\n  onClick={() => {\n    const textFields = document.querySelectorAll('ic-text-field');\n    textFields.forEach((textField) => {\n      textField.removeAttribute('readonly');\n    }\n  }}\n  variant=\"secondary\"\n  style={{ marginTop: \"var(--ic-space-lg)\" }}\n>\n  Edit\n</IcButton>`,\n  },\n];\n\n<ComponentPreview snippets={editableExample} style={{ display: \"block\" }}>\n  <IcDataEntity heading=\"Personal details\">\n    <IcDataRow label=\"Name\">\n      <IcTextField\n        slot=\"value\"\n        label=\"Name\"\n        value=\"Michael Johnson\"\n        readonly\n        hide-label\n        full-width\n      />\n    </IcDataRow>\n    <IcDataRow label=\"Date of birth\" value=\"16 October 1995\">\n      <IcTextField\n        slot=\"value\"\n        label=\"Date of birth\"\n        value=\"16 October 1995\"\n        readonly\n        hide-label\n        full-width\n      />\n    </IcDataRow>\n    <IcDataRow label=\"Telephone\" value=\"07449 7654873\">\n      <IcTextField\n        slot=\"value\"\n        label=\"Telephone\"\n        value=\"07449 7654873\"\n        readonly\n        hide-label\n        full-width\n      />\n    </IcDataRow>\n    <IcDataRow label=\"Email\" value=\"mjohnson@coffee.gov\">\n      <IcTextField\n        slot=\"value\"\n        label=\"Email\"\n        value=\"mjohnson@coffee.gov\"\n        readonly\n        hide-label\n        full-width\n      />\n    </IcDataRow>\n    <IcDataRow label=\"Address\">\n      <IcTextField\n        slot=\"value\"\n        label=\"Address\"\n        value=\"383 Coffee Drive, London, SW7 988, United Kingdom\"\n        readonly\n        hide-label\n        full-width\n      />\n    </IcDataRow>\n  </IcDataEntity>\n  <IcButton\n    onClick={() => {\n      const textFields = document.querySelectorAll(\"ic-text-field\");\n      textFields.forEach((textField) => {\n        textField.setAttribute(\"readonly\", \"\");\n      });\n    }}\n    style={{\n      marginRight: \"var(--ic-space-md)\",\n      marginTop: \"var(--ic-space-lg)\",\n    }}\n  >\n    Confirm\n  </IcButton>\n  <IcButton\n    onClick={() => {\n      const textFields = document.querySelectorAll(\"ic-text-field\");\n      textFields.forEach((textField) => {\n        textField.removeAttribute(\"readonly\");\n      });\n    }}\n    variant=\"secondary\"\n    style={{ marginTop: \"var(--ic-space-lg)\" }}\n  >\n    Edit\n  </IcButton>\n</ComponentPreview>\n",
      "path": "/components/data-entity/code",
      "date": "2023-02-06",
      "title": "Data entity",
      "status": "BETA",
      "subTitle": "The data entity component displays a group of related data in a consistent and easy to consume way.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/data-entity",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/data-entity"
        },
        {
          "title": "Code",
          "path": "/components/data-entity/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/data-entity/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/data-entity/code.mdx",
        "createdAt": "2023-04-14T11:24:28.589Z",
        "lastModified": "2023-04-14T11:24:28.589Z",
        "size": 14493,
        "formattedSize": "14.2 KB"
      }
    },
    {
      "id": "components__data-entity__guidancex",
      "contents": "\nimport { IcDataEntity, IcDataRow } from \"@ukic/react\";\nimport dataEntityFig1 from \"./images/fig-1-assign-interactions-to-individual-rows-within-the-interaction-area,-or-the-full-data-entity-table-by-using-buttons-at-the-end-of-the-table.png\";\nimport dataEntityFig2 from \"./images/fig-2-make-sure-the-data-in-the-cell-displays-in-its-correct-format.png\";\nimport dataEntityFig3 from \"./images/fig-3-do-not-pass-non-text-data-in-a-text-format.png\";\nimport dataEntityFig4 from \"./images/fig-4-set-the-width-of-all-data-entity-tables-on-a-page-to-the-same-size.png\";\nimport dataEntityFig5 from \"./images/fig-5-do-not-set-different-widths-for-different-data-entity-tables.png\";\nimport dataEntityFig6 from \"./images/fig-6-make-sure-that-a-data-entity-table-always-has-a-section-header.png\";\nimport dataEntityFig7 from \"./images/fig-7-do-not-omit-section-headers-from-data-entity-tables.png\";\n\n## Introduction\n\nAn example of the data entity component.\n\n<ComponentPreview>\n  <IcDataEntity heading=\"Order details\">\n    <IcDataRow label=\"Drink\" value=\"Espresso\" />\n    <IcDataRow label=\"Order name\" value=\"Michael\" />\n    <IcDataRow label=\"Price\" value=\"£2.80\" />\n  </IcDataEntity>\n</ComponentPreview>\n\n## Interaction behaviour\n\nUse the interaction area in a data entity row to provide an action to that row's data. For example, providing an edit link could display an edit screen so that the value can be changed.\n\nTo include interactions which affect the whole data entity, design a pattern using buttons with clear labels.\n\n<DoDontCaution\n  imageSrc={dataEntityFig1}\n  imageAlt=\"A data entity titled ‘Personal details’ with six rows. The first five include an ‘edit’ link button, while the sixth includes a download icon button. At the end of the data table there are two buttons, one labelled ‘submit’, and the second labelled ‘edit’.\"\n  state=\"good\"\n  caption=\"Assign interactions to individual rows within the interaction area, or the full data entity by using buttons at the end of the table.\"\n/>\n\n## Content\n\nCells display the following types of data in a specific format:\n\n- Text\n- Numbers\n- Date\n- Telephone\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={dataEntityFig2}\n    imageAlt=\"A data entity titled ‘details’ with four rows. The first row has a text entry in a text format, the second has a number in a number format, the third has a date in the correct date format, and the fourth has a telephone in the correct telephone format.\"\n    state=\"good\"\n    caption=\"Make sure the data in the cell displays in its correct format.\"\n  />\n  <DoDontCaution\n    imageSrc={dataEntityFig3}\n    imageAlt=\"A data entity titled ‘details’ with four rows. All four rows are displayed in normal text formatting even though they display a date, number and telephone.\"\n    state=\"bad\"\n    caption=\"Don’t pass non-text data in a text format.\"\n  />\n</DoubleDoDontCaution>\n\n## Sizing\n\nWhen multiple data entities are present on a page, make sure to size them all equally.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={dataEntityFig4}\n    imageAlt=\"An image of two data entities. The top component, labelled ‘personal details’ is the same width as the bottom one, labelled ‘order details’.\"\n    state=\"good\"\n    caption=\"Set the width of all data entities on a page to the same size.\"\n  />\n  <DoDontCaution\n    imageSrc={dataEntityFig5}\n    imageAlt=\"An image of two data entities. The top component, labelled ‘personal details’ is wider than the bottom one, labelled ‘order details’.\"\n    state=\"bad\"\n    caption=\"Don’t set different widths for different data entities.\"\n  />\n</DoubleDoDontCaution>\n\n## Layout and placement\n\nAlways include a section header, even when using a single row.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={dataEntityFig6}\n    imageAlt=\"An image of a data entity titled ‘Payment details’ with three rows.\"\n    state=\"good\"\n    caption=\"Make sure that a data entity always has a section header.\"\n  />\n  <DoDontCaution\n    imageSrc={dataEntityFig7}\n    imageAlt=\"An image of a data entity with three rows, but no title.\"\n    state=\"bad\"\n    caption=\"Don’t omit section headers from data entities.\"\n  />\n</DoubleDoDontCaution>\n",
      "path": "/components/data-entity",
      "navPriority": 9,
      "date": "2023-02-03",
      "title": "Data entity",
      "status": "BETA",
      "subTitle": "The data entity component displays a group of related data in a consistent and easy to consume way.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/data-entity",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/data-entity"
        },
        {
          "title": "Code",
          "path": "/components/data-entity/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/data-entity/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/data-entity/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.589Z",
        "lastModified": "2023-04-14T11:24:28.589Z",
        "size": 4762,
        "formattedSize": "4.7 KB"
      }
    },
    {
      "id": "components__footer__accessibilityx",
      "contents": "\n## Easy to use for everyone\n\nThe footer acts as a container for additional information and links. All footer content needs to align to that component's accessibility guidelines.\n\n## For Assistive Technology\n\nAs above, all content of the footer should follow their relevant assistive technology guidelines.\n\nAny logos that are included in the footer need to have alt-text assigned. The alt-text should simply be the name of the organisation or entity that the logo describes.\n\nThe footer uses the HTML footer page region to allow quick navigation between page regions when using assistive technology. It assigns the `contentinfo` ARIA landmark to adhere to proper page structure and semantics.\n\n## Based on\n\nThe footer component has been based on the following resources:\n\n- [Page Regions](https://www.w3.org/WAI/tutorials/page-structure/regions/), W3, accessed March 2022.\n- [ARIA: contentinfo role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/contentinfo_role), MDN web docs, accessed March 2022.\n\n## Testing\n\nWe’ve tested this component against WCAG 2.1 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/footer/accessibility",
      "date": "2023-02-03",
      "title": "Footer",
      "status": "BETA",
      "subTitle": "Footers are placed at the bottom of the page and can be used for additional links not found in the main navigation.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/footer",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/footer"
        },
        {
          "title": "Code",
          "path": "/components/footer/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/footer/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/footer/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.593Z",
        "lastModified": "2023-04-14T11:24:28.593Z",
        "size": 1740,
        "formattedSize": "1.7 KB"
      }
    },
    {
      "id": "components__footer__codex",
      "contents": "\nimport { IcFooter, IcFooterLink, IcFooterLinkGroup } from \"@ukic/react\";\n\nimport { NavLink, MemoryRouter } from \"react-router-dom\";\n\n## Component demo\n\nexport const snippets = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-footer\n    description=\"The UK Intelligence Community Design System (ICDS) is a joint project by MI6, GCHQ, MI5, and partners.\"\n    caption=\"All content is available under the Open Government Licence v3.0, except source code and code examples which are available under the MIT Licence.\">\n    <ic-footer-link slot=\"link\" href=\"/\">\n      Accessibility\n    </ic-footer-link>\n    <ic-footer-link slot=\"link\" href=\"/\">\n      Styles\n    </ic-footer-link>\n    <ic-footer-link slot=\"link\" href=\"/\">\n      Components\n    </ic-footer-link>\n    <ic-footer-link slot=\"link\" href=\"/\">\n      Patterns\n    </ic-footer-link>\n</ic-footer>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcFooter\n    description=\"The UK Intelligence Community Design System (ICDS) is a joint project by MI6, GCHQ, MI5, and partners.\"\n    caption=\"All content is available under the Open Government Licence v3.0, except source code and code examples which are available under the MIT Licence.\">\n    <IcFooterLink slot=\"link\" href=\"/\">\n      Accessibility\n    </IcFooterLink>\n    <IcFooterLink slot=\"link\" href=\"/\">\n      Styles\n    </IcFooterLink>\n    <IcFooterLink slot=\"link\" href=\"/\">\n      Components\n    </IcFooterLink>\n    <IcFooterLink slot=\"link\" href=\"/\">\n      Patterns\n    </IcFooterLink>\n</IcFooter>`,\n  },\n];\n\n<ComponentPreview snippets={snippets}>\n  <IcFooter\n    description=\"The UK Intelligence Community Design System (ICDS) is a joint project by MI6, GCHQ, MI5, and partners.\"\n    caption=\"All content is available under the Open Government Licence v3.0, except source code and code examples which are available under the MIT Licence.\"\n  >\n    <IcFooterLink slot=\"link\" href=\"/\">\n      Accessibility\n    </IcFooterLink>\n    <IcFooterLink slot=\"link\" href=\"/\">\n      Styles\n    </IcFooterLink>\n    <IcFooterLink slot=\"link\" href=\"/\">\n      Components\n    </IcFooterLink>\n    <IcFooterLink slot=\"link\" href=\"/\">\n      Patterns\n    </IcFooterLink>\n  </IcFooter>\n</ComponentPreview>\n\n## Footer details\n\n<ComponentDetails component=\"ic-footer\" />\n\n## Footer link details\n\n<ComponentDetails component=\"ic-footer-link\" />\n\n## Footer link group details\n\n<ComponentDetails component=\"ic-footer-link-group\" />\n\n## Variants\n\n### Grouped links\n\nexport const snippetsGroupedLinks = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-footer\n    group-links=\"true\"\n    description=\"The ICDS is maintained by the Design Practice Team. If you've got a question or want to feedback, \n          please get in touch.\">\n    <ic-footer-link-group slot=\"link\" group-title=\"Grouped heading\">\n      <ic-footer-link href=\"/\">Accessibility</ic-footer-link>\n      <ic-footer-link href=\"/\">Styles</ic-footer-link>\n      <ic-footer-link href=\"/\">Components</ic-footer-link>\n      <ic-footer-link href=\"/\">Patterns</ic-footer-link>\n    </ic-footer-link-group>\n    <ic-footer-link-group slot=\"link\" group-title=\"Grouped heading\">\n      <ic-footer-link href=\"/\">Accessibility</ic-footer-link>\n      <ic-footer-link href=\"/\">Styles</ic-footer-link>\n      <ic-footer-link href=\"/\">Components</ic-footer-link>\n      <ic-footer-link href=\"/\">Patterns</ic-footer-link>\n    </ic-footer-link-group>\n    <ic-footer-link-group slot=\"link\" group-title=\"Grouped heading\">\n      <ic-footer-link href=\"/\">Accessibility</ic-footer-link>\n      <ic-footer-link href=\"/\">Styles</ic-footer-link>\n      <ic-footer-link href=\"/\">Components</ic-footer-link>\n      <ic-footer-link href=\"/\">Patterns</ic-footer-link>\n    </ic-footer-link-group>\n  </ic-footer>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcFooter\n    groupLinks\n    description=\"The ICDS is maintained by the Design Practice Team. If you've got a question or want to feedback, \n          please get in touch.\">\n    <IcFooterLinkGroup slot=\"link\" groupTitle=\"Grouped heading\">\n      <IcFooterLink href=\"/\">Accessibility</IcFooterLink>\n      <IcFooterLink href=\"/\">Styles</IcFooterLink>\n      <IcFooterLink href=\"/\">Components</IcFooterLink>\n      <IcFooterLink href=\"/\">Patterns</IcFooterLink>\n    </IcFooterLinkGroup>\n    <IcFooterLinkGroup slot=\"link\" groupTitle=\"Grouped heading\">\n      <IcFooterLink href=\"/\">Accessibility</IcFooterLink>\n      <IcFooterLink href=\"/\">Styles</IcFooterLink>\n      <IcFooterLink href=\"/\">Components</IcFooterLink>\n      <IcFooterLink href=\"/\">Patterns</IcFooterLink>\n    </IcFooterLinkGroup>\n    <IcFooterLinkGroup slot=\"link\" groupTitle=\"Grouped heading\">\n      <IcFooterLink href=\"/\">Accessibility</IcFooterLink>\n      <IcFooterLink href=\"/\">Styles</IcFooterLink>\n      <IcFooterLink href=\"/\">Components</IcFooterLink>\n      <IcFooterLink href=\"/\">Patterns</IcFooterLink>\n    </IcFooterLinkGroup>\n  </IcFooter>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsGroupedLinks}>\n  <IcFooter\n    groupLinks\n    description=\"The ICDS is maintained by the Design Practice Team. If you've got a question or want to feedback, \n          please get in touch.\"\n  >\n    <IcFooterLinkGroup slot=\"link\" groupTitle=\"Grouped heading\">\n      <IcFooterLink href=\"/\">Accessibility</IcFooterLink>\n      <IcFooterLink href=\"/\">Styles</IcFooterLink>\n      <IcFooterLink href=\"/\">Components</IcFooterLink>\n      <IcFooterLink href=\"/\">Patterns</IcFooterLink>\n    </IcFooterLinkGroup>\n    <IcFooterLinkGroup slot=\"link\" groupTitle=\"Grouped heading\">\n      <IcFooterLink href=\"/\">Accessibility</IcFooterLink>\n      <IcFooterLink href=\"/\">Styles</IcFooterLink>\n      <IcFooterLink href=\"/\">Components</IcFooterLink>\n      <IcFooterLink href=\"/\">Patterns</IcFooterLink>\n    </IcFooterLinkGroup>\n    <IcFooterLinkGroup slot=\"link\" groupTitle=\"Grouped heading\">\n      <IcFooterLink href=\"/\">Accessibility</IcFooterLink>\n      <IcFooterLink href=\"/\">Styles</IcFooterLink>\n      <IcFooterLink href=\"/\">Components</IcFooterLink>\n      <IcFooterLink href=\"/\">Patterns</IcFooterLink>\n    </IcFooterLinkGroup>\n  </IcFooter>\n</ComponentPreview>\n\n### Logo links\n\nexport const snippetsLogoLinks = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-footer description=\"The ICDS is maintained by the Design Practice Team. If you've got a question or want to feedback, please get in touch.\">\n  <ic-footer-link slot=\"link\" href=\"/\">Accessibility</ic-footer-link>\n  <ic-footer-link slot=\"link\" href=\"/\">Styles</ic-footer-link>\n  <ic-footer-link slot=\"link\" href=\"/\">Components</ic-footer-link>\n  <ic-footer-link slot=\"link\" href=\"/\">Patterns</ic-footer-link>\n    <div slot=\"logo\">\n      <ic-footer-link href=\"/\">\n        <svg ...></svg>\n      </ic-footer-link>\n      <ic-footer-link href=\"/\">\n        <svg ...></svg>\n      </ic-footer-link>\n    </div>\n</ic-footer>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcFooter description=\"The ICDS is maintained by the Design Practice Team. If you've got a question or want to feedback, please get in touch.\">\n  <IcFooterLink slot=\"link\" href=\"/\">Accessibility</IcFooterLink>\n  <IcFooterLink slot=\"link\" href=\"/\">Styles</IcFooterLink>\n  <IcFooterLink slot=\"link\" href=\"/\">Components</IcFooterLink>\n  <IcFooterLink slot=\"link\" href=\"/\">Patterns</IcFooterLink>\n  <div slot=\"logo\">\n    <IcFooterLink href=\"/\">\n      <svg ...></svg>\n    </IcFooterLink>\n    <IcFooterLink href=\"/\">\n      <svg ...></svg>\n    </IcFooterLink>\n  </div>\n</IcFooter>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsLogoLinks}>\n  <IcFooter description=\"The ICDS is maintained by the Design Practice Team. If you've got a question or want to feedback, please get in touch.\">\n    <IcFooterLink slot=\"link\" href=\"/\">\n      Accessibility\n    </IcFooterLink>\n    <IcFooterLink slot=\"link\" href=\"/\">\n      Styles\n    </IcFooterLink>\n    <IcFooterLink slot=\"link\" href=\"/\">\n      Components\n    </IcFooterLink>\n    <IcFooterLink slot=\"link\" href=\"/\">\n      Patterns\n    </IcFooterLink>\n    <div\n      slot=\"logo\"\n      style={{\n        display: \"flex\",\n        gap: \"var(--ic-space-lg)\",\n      }}\n    >\n      <IcFooterLink href=\"/\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          height=\"48px\"\n          viewBox=\"0 0 24 24\"\n          width=\"48px\"\n          fill=\"#FFFFFF\"\n        >\n          <path\n            d=\"M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z\"\n            fill=\"currentColor\"\n          />\n        </svg>\n      </IcFooterLink>\n      <IcFooterLink href=\"/\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          height=\"48px\"\n          viewBox=\"0 0 24 24\"\n          width=\"48px\"\n          fill=\"#FFFFFF\"\n        >\n          <path\n            d=\"M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z\"\n            fill=\"currentColor\"\n          />\n        </svg>\n      </IcFooterLink>\n    </div>\n  </IcFooter>\n</ComponentPreview>\n\n### With React Router\n\nexport const withReactRouter = [\n  {\n    language: \"React\",\n    snippet: `<MemoryRouter initialEntries={[\"/\"]}>\n  <Routes>\n      <Route path=\"/\" element={() => <IcTypography>This is the home page</IcTypography>} />\n      <Route path=\"/daily-tippers\" element={() => <IcTypography>This page is about daily tippers</IcTypography>} />\n  </Routes>\n  <IcFooter description=\"The ICDS is maintained by the Design Practice Team. If you've got a question or want to feedback, please get in touch.\" caption=\"This information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation.\" \n  > \n    <IcFooterLink slot=\"link\">\n      <NavLink to=\"/\">Home</NavLink>\n    </IcFooterLink>\n    <IcFooterLink slot=\"link\">\n      <NavLink to=\"/daily-tippers\">Daily Tippers</NavLink>\n    </IcFooterLink>\n    <div slot=\"logo\" style={{\n    width: \"100px\",\n    height: \"100px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: \"var(--ic-theme-primary)\",\n    color: \"var(--ic-theme-text)\"\n  }}>\n      Logo\n    </div>\n  </IcFooter>\n</MemoryRouter>\n    `,\n  },\n];\n\n<ComponentPreview\n  snippets={withReactRouter}\n  style={{ flexDirection: \"column\" }}\n>\n  <MemoryRouter initialEntries={[\"/\"]}>\n    <IcFooter\n      description=\"The ICDS is maintained by the Design Practice Team. If you've got a question or want to feedback, please get in touch.\"\n      caption=\"This information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation.\"\n    >\n      <IcFooterLink slot=\"link\">\n        <NavLink to=\"/\">Home</NavLink>\n      </IcFooterLink>\n      <IcFooterLink slot=\"link\">\n        <NavLink to=\"/daily-tippers\">Daily Tippers</NavLink>\n      </IcFooterLink>\n      <div\n        slot=\"logo\"\n        style={{\n          width: \"100px\",\n          height: \"100px\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          backgroundColor: \"var(--ic-theme-primary)\",\n          color: \"var(--ic-theme-text)\",\n        }}\n      >\n        Logo\n      </div>\n    </IcFooter>\n  </MemoryRouter>\n</ComponentPreview>\n",
      "path": "/components/footer/code",
      "date": "2023-02-03",
      "title": "Footer",
      "status": "BETA",
      "subTitle": "Footers are placed at the bottom of the page and can be used for additional links not found in the main navigation.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/footer",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/footer"
        },
        {
          "title": "Code",
          "path": "/components/footer/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/footer/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/footer/code.mdx",
        "createdAt": "2023-04-14T11:24:28.593Z",
        "lastModified": "2023-04-14T11:24:28.593Z",
        "size": 11666,
        "formattedSize": "11.4 KB"
      }
    },
    {
      "id": "components__footer__guidancex",
      "contents": "\nimport { IcFooter, IcFooterLink } from \"@ukic/react\";\nimport footerFig1 from \"./images/fig-1-colours.png\";\nimport footerFig2 from \"./images/fig-2-not-full-width.png\";\nimport footerFig3 from \"./images/fig-3-below-the-fold.png\";\nimport footerFig4 from \"./images/fig-4-above-the-fold.png\";\nimport footerFig5 from \"./images/fig-5-app-drawer-layouts.png\";\nimport footerFig6 from \"./images/fig-6-left-aligned.png\";\nimport footerFig7 from \"./images/fig-7-centred.png\";\nimport footerFig8 from \"./images/fig-8-full-width.png\";\nimport footerFig9 from \"./images/fig-9-single-line-links.png\";\nimport footerFig10 from \"./images/fig-10-grouped-links.png\";\nimport footerFig11 from \"./images/fig-11-desktop-logos.png\";\nimport footerFig12 from \"./images/fig-12-correct-copy.png\";\nimport footerFig13 from \"./images/fig-13-incorrect-copy.png\";\n\n## Introduction\n\nAn example of the footer component.\n\n<ComponentPreview>\n  <IcFooter\n    description=\"The UK Intelligence Community Design System (ICDS) is a joint project by MI6, GCHQ, MI5, and partners.\"\n    caption=\"All content is available under the Open Government Licence v3.0, except source code and code examples which are available under the MIT Licence.\"\n  >\n    <IcFooterLink slot=\"link\" href=\"#\">\n      Accessibility\n    </IcFooterLink>\n    <IcFooterLink slot=\"link\" href=\"#\">\n      Styles\n    </IcFooterLink>\n    <IcFooterLink slot=\"link\" href=\"#\">\n      Components\n    </IcFooterLink>\n    <IcFooterLink slot=\"link\" href=\"#\">\n      Patterns\n    </IcFooterLink>\n  </IcFooter>\n</ComponentPreview>\n\n## When to use\n\nThere are two types of footer that display links in different ways. These are single line footers and grouped footers\n\nUse a footer on every page so that the required legal information is displayed.\n\n### Single line\n\nUse single line footers when eight or fewer links are required and there is no need to split those links into groups.\n\n### Grouped\n\nUse grouped footers when more than eight links are required or the links can be grouped meaningfully.\n\n## Colour\n\nThe background colour of the footer reflects the chosen theme colour for the application. Set the global theme colour token to change the footer’s appearance.\n\n<DoDontCaution\n  imageSrc={footerFig1}\n  imageAlt=\"A footer using automatically generated secondary and tertiary shades of the app’s theme colour as the background colours for the footer’s link section and logo section respectively.\"\n  state=\"good\"\n  caption=\"Change the global theme colour token to change the footer’s appearance.\"\n/>\n\n## Sizing\n\nThe footer always extends to the full width of the viewport.\n\nDon’t embed the footer within another container that is not full width.\n\n<DoDontCaution\n  imageSrc={footerFig2}\n  imageAlt=\"A footer positioned centred between two other content areas that sit to the left and right of the footer.\"\n  state=\"bad\"\n  caption=\"Don’t place the footer within other content. Always make sure it's the full width of the viewport.\"\n/>\n\n## Layout and placement\n\n### Placement\n\nAlways place the footer at the bottom of the page and below the fold, meaning users should scroll to see it.\n\n<DoDontCaution\n  imageSrc={footerFig3}\n  imageAlt=\"A footer component placed below the fold within a page design.\"\n  state=\"good\"\n  caption=\"Footer placed correctly below the fold on a page.\"\n/>\n\n<DoDontCaution\n  imageSrc={footerFig4}\n  imageAlt=\"A footer component placed above the fold within a page design.\"\n  state=\"bad\"\n  caption=\"Footer placed incorrectly above the fold.\"\n/>\n\nPosition the footer adjacent to the [side navigation](/components/side-nav) if your app uses one.\n\n<DoDontCaution\n  imageSrc={footerFig5}\n  imageAlt=\"An example app showing a side navigation component with a footer component positioned on the right and adjacent to the side navigation.\"\n  state=\"good\"\n  caption=\"Place the footer adjacent to the side navigation.\"\n/>\n\n### Alignment\n\nThe footer can be set to left-aligned, centred or full width.\n\nUse left-aligned to align footer content to the left of the main body of the page. This works well with apps that use the side navigation.\n\n<DoDontCaution\n  imageSrc={footerFig6}\n  imageAlt=\"A footer component with its content left aligned.\"\n  state=\"good\"\n  caption=\"A footer with its content left aligned.\"\n/>\n\nUse centred alignment to centre footer content to the main body of the page.\n\n<DoDontCaution\n  imageSrc={footerFig7}\n  imageAlt=\"A footer component with its content centre aligned.\"\n  state=\"good\"\n  caption=\"A footer with its content centre aligned.\"\n/>\n\nUse full-width to position footer content so that it spans the full width of the viewport.\n\n<DoDontCaution\n  imageSrc={footerFig8}\n  imageAlt=\"A footer component with its content aligned to the full width of the viewport.\"\n  state=\"good\"\n  caption=\"A footer with its content aligned to the full width of the viewport.\"\n/>\n\n## Content\n\n### Links\n\nFooters provide a set of links that can be accessed from every page within an app. Specify either single links or grouped links when using a footer.\n\nGive link groups clear labels when using grouped links.\n\nOrder the links so that the most important links appear at the top left of the links section.\n\n<DoDontCaution\n  imageSrc={footerFig9}\n  imageAlt=\"A footer showing a single set of links. The four links include ‘Accessibility statement’, ‘Privacy’, ‘Cookies’ and ‘Contribute’.\"\n  state=\"good\"\n  caption=\"A footer with a single set of links.\"\n/>\n\n<DoDontCaution\n  imageSrc={footerFig10}\n  imageAlt=\"A footer showing two groups of links. The two link groups are titled ‘Services’ and ‘Policy’ and each group includes a set of links.\"\n  state=\"good\"\n  caption=\"A footer with grouped links.\"\n/>\n\n### Logos\n\nFooters can include a number of different logos. The logos appear at the bottom of the footer. Choose the correct variant (ie. light or dark) of your logo to match the selected theme colour background.\n\n<DoDontCaution\n  imageSrc={footerFig11}\n  imageAlt=\"A footer displaying four different logos on a large screen.\"\n  state=\"good\"\n  caption=\"A footer displaying four different logos on a large screen.\"\n/>\n\n### Additional information\n\nProvide additional information in either the top section above the links or in the bottom section below the logos. Any additional information provided should be concise and easy to understand.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={footerFig12}\n    imageAlt=\"A footer component showing concise and easily understandable information. It reads ‘The ICDS is maintained by the Design Practice Team. If you’ve got a question or want to feedback, please get in touch.’\"\n    state=\"good\"\n    caption=\"Concise and easily understandable information shown in the footer.\"\n  />\n  <DoDontCaution\n    imageSrc={footerFig13}\n    imageAlt=\"A footer component showing overly lengthy information. It reads ‘The ICDS is maintained by the Design Practice Team. If you’ve got a question or want to feedback, please get in touch. The best way to contact the team would be through Microsoft Teams between the hours of 9am to 5pm, Monday to Friday. We will strive to get back to you as soon as possible.’\"\n    state=\"bad\"\n    caption=\"The information included in the footer is too long.\"\n  />\n</DoubleDoDontCaution>\n",
      "path": "/components/footer",
      "navPriority": 10,
      "date": "2023-02-03",
      "title": "Footer",
      "status": "BETA",
      "subTitle": "Footers are placed at the bottom of the page and can be used for additional links not found in the main navigation.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/footer",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/footer"
        },
        {
          "title": "Code",
          "path": "/components/footer/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/footer/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/footer/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.593Z",
        "lastModified": "2023-04-14T11:24:28.593Z",
        "size": 7777,
        "formattedSize": "7.6 KB"
      }
    },
    {
      "id": "components__hero__accessibilityx",
      "contents": "\nimport heroFig17 from \"./images/fig-17-focus-order.png\";\n\n## Easy to use for everyone\n\nHero images use text elements that use semantic headings to provide proper order to the page content.\n\nAs hero banners can have different colour backgrounds, we've made sure that the foreground colours adjust automatically to ensure that the correct colour contrast standards are met.\n\nWhere images are used, alt-text should always be provided to give a description of the images content.\n\nWhen using images as the background of the hero, safe areas describe where to leave space in an image so that the foreground content is not interfered with.\n\n## For Assistive Technology\n\nThe hero banner uses slots to allow different types of components to be added. Where these components are interactive, then their normal focus behaviour is used.\n\nThe hero's content is ordered for focus in the following way:\n\n- Title section including any subtitles\n- Interaction area\n- Right-hand section\n\n<DoDontCaution\n  imageSrc={heroFig17}\n  imageAlt=\"A diagram of the hero banners main sections. The title section is labelled as first, the interaction section as second and the right-hand section as third.\"\n  state=\"none\"\n  caption=\"The hero's content is ordered with the title section first, then the interaction section, then the right-hand section.\"\n/>\n\n## Testing\n\nWe've tested this component against WCAG 2.1 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/hero/accessibility",
      "date": "2023-02-03",
      "title": "Hero",
      "status": "BETA",
      "subTitle": "A large banner found at the top of page used to introduce page content, provide key actions and add personality.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/hero",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/hero"
        },
        {
          "title": "Code",
          "path": "/components/hero/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/hero/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/hero/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.601Z",
        "lastModified": "2023-04-14T11:24:28.601Z",
        "size": 2024,
        "formattedSize": "2.0 KB"
      }
    },
    {
      "id": "components__hero__codex",
      "contents": "\nimport { IcHero, IcButton, IcSearchBar, IcCard } from \"@ukic/react\";\n\n## Component demo\n\nexport const snippets = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-hero\n  heading=\"New coffee launches 14 September 2022\"\n  subheading=\"Brand new flavours now available! Irresistible. Caramel. Decadence. Sugary.\"\n>\n  <ic-button variant=\"primary\" slot=\"interaction\">Order now</ic-button>\n  <ic-button variant=\"secondary\" slot=\"interaction\">Submit new flavour</ic-button>\n</ic-hero>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcHero\n  heading=\"New coffee launches 14 September 2022\"\n  subheading=\"Brand new flavours now available! Irresistible. Caramel. Decadence. Sugary.\"\n>\n  <IcButton variant=\"primary\" slot=\"interaction\">Order now</IcButton>\n  <IcButton variant=\"secondary\" slot=\"interaction\">Submit new flavour</IcButton>\n</IcHero>`,\n  },\n];\n\n<ComponentPreview snippets={snippets}>\n  <IcHero\n    heading=\"New coffee launches 14 September 2022\"\n    subheading=\"Brand new flavours now available! Irresistible. Caramel. Decadence. Sugary.\"\n  >\n    <IcButton variant=\"primary\" slot=\"interaction\">\n      Order now\n    </IcButton>\n    <IcButton variant=\"secondary\" slot=\"interaction\">\n      Submit new flavour\n    </IcButton>\n  </IcHero>\n</ComponentPreview>\n\n## Hero details\n\n<ComponentDetails component=\"ic-hero\" />\n\n## Variants\n\n### Centre aligned\n\nexport const snippetsCentre = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-hero\n  heading=\"New coffee launches 14 September 2022\"\n  subheading=\"Brand new flavours now available! Irresistible. Caramel. Decadence. Sugary.\" aligned=\"center\"\n>\n  <ic-button variant=\"primary\" slot=\"interaction\">Order now</ic-button>\n  <ic-button variant=\"secondary\" slot=\"interaction\">Submit new flavour</ic-button>\n</ic-hero>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcHero\n  heading=\"New coffee launches 14 September 2022\"\n  subheading=\"Brand new flavours now available! Irresistible. Caramel. Decadence. Sugary.\" aligned=\"center\"\n>\n  <IcButton variant=\"primary\" slot=\"interaction\">Order now</IcButton>\n  <IcButton variant=\"secondary\" slot=\"interaction\">Submit new flavour</IcButton>\n</IcHero>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsCentre}>\n  <IcHero\n    heading=\"New coffee launches 14 September 2022\"\n    subheading=\"Brand new flavours now available! Irresistible. Caramel. Decadence. Sugary.\"\n    aligned=\"center\"\n  >\n    <IcButton variant=\"primary\" slot=\"interaction\">\n      Order now\n    </IcButton>\n    <IcButton variant=\"secondary\" slot=\"interaction\">\n      Submit new flavour\n    </IcButton>\n  </IcHero>\n</ComponentPreview>\n\n### Content centre aligned\n\nexport const snippetsContentCentre = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-hero\n  heading=\"New coffee launches 14 September 2022\"\n  subheading=\"Brand new flavours now available! Irresistible. Caramel. Decadence. Sugary.\" aligned=\"center\" content-aligned=\"center\"\n>\n  <ic-button variant=\"primary\" slot=\"interaction\">Order now</ic-button>\n  <ic-button variant=\"secondary\" slot=\"interaction\">Submit new flavour</ic-button>\n</ic-hero>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcHero\n  heading=\"New coffee launches 14 September 2022\"\n  subheading=\"Brand new flavours now available! Irresistible. Caramel. Decadence. Sugary.\" aligned=\"center\" contentAligned=\"center\"\n>\n  <IcButton variant=\"primary\" slot=\"interaction\">Order now</IcButton>\n  <IcButton variant=\"secondary\" slot=\"interaction\">Submit new flavour</IcButton>\n</IcHero>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsContentCentre}>\n  <IcHero\n    heading=\"New coffee launches 14 September 2022\"\n    subheading=\"Brand new flavours now available! Irresistible. Caramel. Decadence. Sugary.\"\n    aligned=\"center\"\n    contentAligned=\"center\"\n  >\n    <IcButton variant=\"primary\" slot=\"interaction\">\n      Order now\n    </IcButton>\n    <IcButton variant=\"secondary\" slot=\"interaction\">\n      Submit new flavour\n    </IcButton>\n  </IcHero>\n</ComponentPreview>\n\n### Secondary heading and search\n\nexport const snippetsSecondHeadingSearch = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-hero\n  heading=\"New coffee launches 14 September 2022\"\n  subheading=\"Brand new flavours now available! Irresistible. Caramel. Decadence. Sugary.\"\n  secondary-heading=\"Secondary Heading\" \n  secondary-subheading=\"This is a secondary description.\"\n>\n  <ic-search-bar slot=\"interaction\" label=\"Search for coffee\" hide-label=\"true\"></ic-search-bar>\n</ic-hero>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcHero\n  heading=\"New coffee launches 14 September 2022\"\n  subheading=\"Brand new flavours now available! Irresistible. Caramel. Decadence. Sugary.\"\n  secondaryHeading=\"Secondary Heading\" \n  secondarySubheading=\"This is a secondary description.\"\n>\n  <IcSearchBar slot=\"interaction\" label=\"Search for coffee\" hideLabel/>\n</IcHero>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsSecondHeadingSearch}>\n  <IcHero\n    heading=\"New coffee launches 14 September 2022\"\n    subheading=\"Brand new flavours now available! Irresistible. Caramel. Decadence. Sugary.\"\n    secondaryHeading=\"Secondary Heading\"\n    secondarySubheading=\"This is a secondary description.\"\n  >\n    <IcSearchBar slot=\"interaction\" label=\"Search for coffee\" hideLabel />\n  </IcHero>\n</ComponentPreview>\n\n### Card right content\n\nexport const snippetsCard = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-hero \n  heading=\"Hero heading\" \n  subheading=\"Hero description. This is a Hero component, it should be used as a page heading.\" \n  card-heading=\"Latest announcement\" \n  card-message=\"This is some example text that can be included in the card copy\" \n  aligned=\"full-width\"\n>\n  <ic-button variant=\"primary\" slot=\"interaction\">Button</ic-button>\n  <ic-button variant=\"secondary\" slot=\"interaction\">Button</ic-button>\n  <ic-card\n    heading=\"Latest announcement\"\n    message=\"This is some example text that can be included in the card copy.\"\n    slot=\"secondary\"\n    class=\"hero-card\"\n  ></ic-card>\n  <style>\n    .hero-card {\n      color: var(--ic-theme-text);\n      width: 300px;\n    }\n  </style>\n</ic-hero>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcHero \n  heading=\"Hero heading\" \n  subheading=\"Hero description. This is a Hero component, it should be used as a page heading.\" \n  cardHeading=\"Latest announcement\" \n  cardMessage=\"This is some example text that can be included in the card copy\" \n  aligned=\"full-width\"\n>\n  <IcButton variant=\"primary\" slot=\"interaction\">Button</IcButton>\n  <IcButton variant=\"secondary\" slot=\"interaction\">Button</IcButton>\n  <IcCard\n    heading=\"Latest announcement\"\n    message=\"This is some example text that can be included in the card copy.\"\n    slot=\"secondary\"\n    class=\"hero-card\"\n    style={{\n      color: \"var(--ic-theme-text)\",\n      width: \"300px\"\n    }}\n  />\n</IcHero>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsCard}>\n  <IcHero\n    heading=\"Hero heading\"\n    subheading=\"Hero description. This is a Hero component, it should be used as a page heading.\"\n    cardHeading=\"Latest announcement\"\n    cardMessage=\"This is some example text that can be included in the card copy\"\n    aligned=\"full-width\"\n  >\n    <IcButton variant=\"primary\" slot=\"interaction\">\n      Button\n    </IcButton>\n    <IcButton variant=\"secondary\" slot=\"interaction\">\n      Button\n    </IcButton>\n    <IcCard\n      heading=\"Latest announcement\"\n      message=\"This is some example text that can be included in the card copy.\"\n      slot=\"secondary\"\n      class=\"hero-card\"\n      style={{\n        color: \"var(--ic-theme-text\",\n        width: \"300px\",\n      }}\n    />\n  </IcHero>\n</ComponentPreview>\n\n### Image right content\n\nexport const snippetsImage = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-hero \n  heading=\"Hero heading\" \n  subheading=\"Hero description. This is a Hero component, it should be used as a page heading.\" \n  aligned=\"full-width\"\n>\n  <ic-button variant=\"primary\" slot=\"interaction\">Button</ic-button>\n  <ic-button variant=\"secondary\" slot=\"interaction\">Button</ic-button>\n  <svg slot=\"secondary\" ...></svg>\n</ic-hero>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcHero \n  heading=\"Hero heading\" \n  subheading=\"Hero description. This is a Hero component, it should be used as a page heading.\" \n  aligned=\"full-width\"\n>\n  <IcButton variant=\"primary\" slot=\"interaction\">Button</IcButton>\n  <IcButton variant=\"secondary\" slot=\"interaction\">Button</IcButton>\n  <SlottedSVG slot=\"secondary\" ... />\n</IcHero>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsImage}>\n  <IcHero\n    heading=\"Hero heading\"\n    subheading=\"Hero description. This is a Hero component, it should be used as a page heading.\"\n    aligned=\"full-width\"\n  >\n    <IcButton variant=\"primary\" slot=\"interaction\">\n      Button\n    </IcButton>\n    <IcButton variant=\"secondary\" slot=\"interaction\">\n      Button\n    </IcButton>\n    <svg\n      slot=\"secondary\"\n      style={{\n        width: \"300px\",\n      }}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 1600 900\"\n    >\n      <rect fill=\"#ff7700\" width=\"1600\" height=\"900\" />\n      <polygon fill=\"#cc0000\" points=\"957 450 539 900 1396 900\" />\n      <polygon fill=\"#aa0000\" points=\"957 450 872.9 900 1396 900\" />\n      <polygon fill=\"#c50022\" points=\"-60 900 398 662 816 900\" />\n      <polygon fill=\"#a3001b\" points=\"337 900 398 662 816 900\" />\n      <polygon fill=\"#be0044\" points=\"1203 546 1552 900 876 900\" />\n      <polygon fill=\"#9c0036\" points=\"1203 546 1552 900 1162 900\" />\n      <polygon fill=\"#b80066\" points=\"641 695 886 900 367 900\" />\n      <polygon fill=\"#960052\" points=\"587 900 641 695 886 900\" />\n      <polygon fill=\"#b10088\" points=\"1710 900 1401 632 1096 900\" />\n      <polygon fill=\"#8f006d\" points=\"1710 900 1401 632 1365 900\" />\n      <polygon fill=\"#aa00aa\" points=\"1210 900 971 687 725 900\" />\n      <polygon fill=\"#880088\" points=\"943 900 1210 900 971 687\" />\n    </svg>\n  </IcHero>\n</ComponentPreview>\n",
      "path": "/components/hero/code",
      "date": "2023-02-03",
      "title": "Hero",
      "status": "BETA",
      "subTitle": "A large banner found at the top of page used to introduce page content, provide key actions and add personality.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/hero",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/hero"
        },
        {
          "title": "Code",
          "path": "/components/hero/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/hero/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/hero/code.mdx",
        "createdAt": "2023-04-14T11:24:28.601Z",
        "lastModified": "2023-04-14T11:24:28.601Z",
        "size": 10390,
        "formattedSize": "10.1 KB"
      }
    },
    {
      "id": "components__hero__guidancex",
      "contents": "\nimport { IcHero, IcButton } from \"@ukic/react\";\nimport heroFig1 from \"./images/fig-1-dont-place-hero-banners-in-middle-of-page.png\";\nimport heroFig2 from \"./images/fig-2-hero-banners-automatically-use-personality-colour.png\";\nimport heroFig3 from \"./images/fig-3-use-grey-background-when-colour-is-not-appropriate.png\";\nimport heroFig4 from \"./images/fig-4-dont-place-hero-banners-not-full-width.png\";\nimport heroFig5 from \"./images/fig-5-hero-alignment-options.png\";\nimport heroFig6 from \"./images/fig-6-use-buttons-in-the-interaction-area.png\";\nimport heroFig7 from \"./images/fig-7-use-links-in-the-interaction-area.png\";\nimport heroFig8 from \"./images/fig-8-use-simple-inputs-in-the-interaction-area.png\";\nimport heroFig9 from \"./images/fig-9-don't-use-complex-forms-in-the-interaction-area.png\";\nimport heroFig10 from \"./images/fig-10-use-clickable-cards-for-latest-announcements.png\";\nimport heroFig11 from \"./images/fig-11-use-secondary-headings-for-more-info.png\";\nimport heroFig12 from \"./images/fig-12-use-empty-space-on-right-hand-side-to-emphasise-title.png\";\nimport heroFig13 from \"./images/fig-13-use-embedded-images.png\";\nimport heroFig14 from \"./images/fig-14-use-full-height-images.png\";\nimport heroFig15 from \"./images/fig-15-use-background imagery.png\";\nimport heroFig16 from \"./images/fig-16-use-safe-areas-when-using-background-imagery.png\";\n\n## Introduction\n\nAn example of the hero component.\n\n<ComponentPreview>\n  <IcHero\n    heading=\"New coffee launches 14 September 2022\"\n    subheading=\"Brand new flavours now available! Irresistible. Caramel. Decadence. Sugary.\"\n  >\n    <IcButton variant=\"primary\" appearance=\"light\" slot=\"interaction\">\n      Order now\n    </IcButton>\n    <IcButton variant=\"secondary\" appearance=\"light\" slot=\"interaction\">\n      Submit new flavour\n    </IcButton>\n  </IcHero>\n</ComponentPreview>\n\n## When to use\n\nUse the hero on a homepage to introduce your app or service and provide navigation to its main functions. Use the hero to catch a user's attention as it's often the first thing that they see.\n\n## When not to use\n\nDon't use hero banners part way through page content to introduce sections. They should always appear at the top of the page to act as an introduction to the full page.\n\n<DoDontCaution\n  imageSrc={heroFig1}\n  imageAlt=\"An example application with some content at the top of the page, then a hero banner introducing a section, and then more content.\"\n  state=\"bad\"\n  caption=\"Don't position hero banners part way through a page. Always position them at the top of page content.\"\n/>\n\n## Colour\n\nHero banners use an automatic secondary variant of an app's chosen theme colour.\n\n<DoDontCaution\n  imageSrc={heroFig2}\n  imageAlt=\"A hero banner with background colours based of the selected green theme colour.\"\n  state=\"none\"\n  caption=\"Hero banners automatically set their colour based on the selected theme colour.\"\n/>\n\n<DoDontCaution\n  imageSrc={heroFig3}\n  imageAlt=\"A hero banner with a grey background colour and black text.\"\n  state=\"none\"\n  caption=\"Set the hero background colour to grey when colour is not appropriate.\"\n/>\n\n## Sizing\n\nUse default sized hero for most applications. Use small sized hero banners for apps with compact layouts.\n\n## Layout and placement\n\nAlways position the hero banner at the top of the page and make it span the width of the container.\n\n<DoDontCaution\n  imageSrc={heroFig4}\n  imageAlt=\"A hero that is embedded within a container and doesn't span its full width.\"\n  state=\"bad\"\n  caption=\"Don't place the hero so that it does not span its container's full width.\"\n/>\n\nUse the alignment options to align the hero content to either full-width, left or centre of its container.\n\n<DoDontCaution\n  imageSrc={heroFig5}\n  imageAlt=\"Three examples of a hero with content aligned to the full-width of the container, the left of the container, and to the centre of the container.\"\n  state=\"none\"\n  caption=\"Use full-width, left or centre alignment to position the hero's content.\"\n/>\n\n## Content\n\n### Interaction area\n\nUse the hero's interaction slot to add interactive elements such as buttons, links or search bars.\n\nDon't add too much to the slot as it may become too busy. A hero should introduce the page, but not contain all of the page's content.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={heroFig6}\n    imageAlt=\"A hero that says 'Everything I brew, I brew it for you' with a button that says 'Explore'.\"\n    state=\"none\"\n    caption=\"Use buttons to provide actions in the interaction area.\"\n  />\n  <DoDontCaution\n    imageSrc={heroFig7}\n    imageAlt=\"A hero that says 'Everything I brew, I brew it for you' with a link that says 'Explore'.\"\n    state=\"none\"\n    caption=\"Use links to provide navigation from the interaction area.\"\n  />\n</DoubleDoDontCaution>\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={heroFig8}\n    imageAlt=\" A hero that says 'Everything I brew, I brew it for you' with a search bar in the interaction area.\"\n    state=\"none\"\n    caption=\"Use simple inputs to provide page level functions in the interaction area.\"\n  />\n  <DoDontCaution\n    imageSrc={heroFig9}\n    imageAlt=\"A hero that says 'Everything I brew, I brew it for you' with a text field, a text area and a button in the interaction area.\"\n    state=\"bad\"\n    caption=\"Don't use complex forms in the interaction area.\"\n  />\n</DoubleDoDontCaution>\n\n### Secondary area\n\nUse the hero's secondary area to add additional information or navigation options. For example, use a [clickable card](/components/cards) to provide a link to recent posts, use a secondary heading to give more info about the app, or keep it empty to help the main heading stand out\n\n<DoDontCaution\n  imageSrc={heroFig10}\n  imageAlt=\"A hero with a clickable card in the secondary area that says ‘Latest Announcement’.\"\n  state=\"none\"\n  caption=\"Use clickable cards to provide links to other pages.\"\n/>\n\n<DoDontCaution\n  imageSrc={heroFig11}\n  imageAlt=\"A hero with a secondary heading in the secondary area that says 'Grab a cuppa and make yourself at home'.\"\n  state=\"none\"\n  caption=\"Use a secondary heading in the secondary area to provide more information.\"\n/>\n\n<DoDontCaution\n  imageSrc={heroFig12}\n  imageAlt=\"A hero with a title that reads 'Everything I brew, I brew it for you' with no content in the secondary area.\"\n  state=\"none\"\n  caption=\"Keep the secondary area empty to provide more emphasis to the main hero heading.\"\n/>\n\n### Imagery\n\nUse imagery on a hero to add personality to your app. Either embed the image in the secondary area, specify a full-size image to fill the secondary area, or add an image to the hero background itself.\n\n<DoDontCaution\n  imageSrc={heroFig13}\n  imageAlt=\"A hero with an image of a coffee cup in the secondary area.\"\n  state=\"none\"\n  caption=\"Use embedded images in the secondary area.\"\n/>\n\n<DoDontCaution\n  imageSrc={heroFig14}\n  imageAlt=\"A hero with a full height image of a hand holding a coffee cup in the secondary area.\"\n  state=\"none\"\n  caption=\"Use full-height images in the secondary area for greater emphasis on the imagery.\"\n/>\n\n<DoDontCaution\n  imageSrc={heroFig15}\n  imageAlt=\"A hero with an image of a hexagon patterns as the background.\"\n  state=\"none\"\n  caption=\"Use an image as the hero's background to add personality.\"\n/>\n\nWhen using an image background, ensure that you include 'safe areas' in your image to avoid the image's content interfering with the hero's text content.\n\nAlways specify alt-text with any image that you use so that its content can be understood equally by everyone.\n\n<DoDontCaution\n  imageSrc={heroFig16}\n  imageAlt=\"A diagram showing safe areas for background imagery. The safe area appears on the left-hand side under where the hero's text content lives. The image content appears outside of the safe areas.\"\n  state=\"none\"\n  caption=\"Use safe areas with hero background images to avoid content interfering.\"\n/>\n",
      "path": "/components/hero",
      "navPriority": 11,
      "date": "2023-02-03",
      "title": "Hero",
      "status": "BETA",
      "subTitle": "A large banner found at the top of page used to introduce page content, provide key actions and add personality.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/hero",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/hero"
        },
        {
          "title": "Code",
          "path": "/components/hero/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/hero/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/hero/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.601Z",
        "lastModified": "2023-04-14T11:24:28.601Z",
        "size": 8407,
        "formattedSize": "8.2 KB"
      }
    },
    {
      "id": "components__indexx",
      "contents": "\n## Introduction\n\nComponents are reusable user interface elements. These are the basic building blocks of designs and are used in all digital apps and services.\n\nOur components use our [style tokens](/styles). They make it easier for people to use your app because they can easily recognise how things work.\n\nAll components have been tested to meet or exceed [accessibility requirements](/accessibility/requirement).\n\n## Contribute\n\nWe are expanding the Design System and UI Kit. You can check out the [roadmap](/community/roadmap) for what's coming. If you can help you can [read more on how to contribute](/community/contribute).\n",
      "path": "/components",
      "date": "2023-02-03",
      "title": "Components",
      "subTitle": "This section introduces our reusable UI Kit components.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/index.mdx",
      "meta": {
        "relativePath": "components/index.mdx",
        "createdAt": "2023-04-14T11:24:28.613Z",
        "lastModified": "2023-04-14T11:24:28.613Z",
        "size": 879,
        "formattedSize": "879 Bytes"
      }
    },
    {
      "id": "components__links__accessibilityx",
      "contents": "\n## Easy to use for everyone\n\nLinks use the semantic `<a>` HTML element (anchor element) with an `href` attribute, to create a hyperlink.\n\n## For Assistive Technology\n\nMost screen readers will announce “link” before reading out a link. For example, a link labelled “Components” will be read out as “link components”.\n\n## Based on\n\nThe links component has been based on the following resources:\n\n- [Links and Hypertext](https://webaim.org/techniques/hypertext/), WebAIM, accessed July 2022.\n- [Links, Buttons, Submits, and Divs, Oh Hell](https://adrianroselli.com/2016/01/links-buttons-submits-and-divs-oh-hell.html), Adrian Roselli, accessed July 2022.\n- [The Anchor element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#accessibility), Mozilla, accessed July 2022.\n\n## Testing\n\nWe’ve tested this component against WCAG 2.1 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/links/accessibility",
      "date": "2023-02-03",
      "title": "Link",
      "status": "BETA",
      "subTitle": "Links can be used either as standalone components or inline with text.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/links",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/links"
        },
        {
          "title": "Code",
          "path": "/components/links/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/links/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/links/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.613Z",
        "lastModified": "2023-04-14T11:24:28.613Z",
        "size": 1456,
        "formattedSize": "1.4 KB"
      }
    },
    {
      "id": "components__links__codex",
      "contents": "\nimport { IcLink } from \"@ukic/react\";\n\nimport { MemoryRouter, NavLink } from \"react-router-dom\";\n\nexport const snippets = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-link href=\"/components/links/code\">Links code page</ic-link>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcLink href=\"/components/links/code\">Links code page</IcLink>`,\n  },\n];\n\n## Component demo\n\n<ComponentPreview snippets={snippets}>\n  <IcLink href=\"/components/links/code\">Links code page</IcLink>\n</ComponentPreview>\n\n## Link details\n\n<ComponentDetails component=\"ic-link\" />\n\n## Variants\n\n### With icon\n\nexport const snippetsIcon = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-link href=\"/\" show-icon=\"true\">This is a link</ic-link>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcLink href=\"/\" showIcon>This is a link</IcLink>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsIcon}>\n  <IcLink href=\"/\" showIcon>\n    This is a link\n  </IcLink>\n</ComponentPreview>\n\n### Light and dark\n\nexport const snippetsLightDark = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-link href=\"/\" appearance=\"dark\" show-icon=\"true\">This is a link</ic-link>\n<ic-link href=\"/\" appearance=\"light\" show-icon=\"true\">This is a link</ic-link>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcLink href=\"/\" appearance=\"dark\" showIcon>This is a link</IcLink>\n<IcLink href=\"/\" appearance=\"light\" showIcon>This is a link</IcLink>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsLightDark}>\n  <div\n    style={{\n      padding: \"8px\",\n    }}\n  >\n    <IcLink href=\"/\" appearance=\"dark\" showIcon>\n      This is a link\n    </IcLink>\n  </div>\n  <div\n    style={{\n      background: \"#333333\",\n      padding: \"8px\",\n    }}\n  >\n    <IcLink href=\"/\" appearance=\"light\" showIcon>\n      This is a link\n    </IcLink>\n  </div>\n</ComponentPreview>\n\n### With React Router\n\nexport const withReactRouter = [\n  {\n    language: \"React\",\n    snippet: `<MemoryRouter initialEntries={[\"/\"]}>\n  <div style={{display: \"flex\", flexDirection: \"row\", gap: \"8px\"}}>\n    <IcLink>\n      <NavLink to=\"/\" slot=\"router-item\">Home</NavLink>\n    </IcLink>\n    <IcLink>\n      <NavLink to=\"/daily-tippers\" slot=\"router-item\">Daily Tippers</NavLink>\n    </IcLink>\n  </div>\n  <IcSectionContainer>\n    <Routes>\n      <Route path=\"/\" element={() => <IcTypography>This is the home page</IcTypography>} />\n      <Route path=\"/daily-tippers\" element={() => <IcTypography>This page is about daily tippers</IcTypography>} />\n    </Routes>\n  </IcSectionContainer>\n</MemoryRouter>\n    `,\n  },\n];\n\n<ComponentPreview\n  snippets={withReactRouter}\n  style={{ flexDirection: \"column\" }}\n>\n  <MemoryRouter initialEntries={[\"/\"]}>\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"row\",\n        gap: \"8px\",\n      }}\n    >\n      <IcLink>\n        <NavLink to=\"/\" slot=\"router-item\">\n          Home\n        </NavLink>\n      </IcLink>\n      <IcLink>\n        <NavLink to=\"/daily-tippers\" slot=\"router-item\">\n          Daily Tippers\n        </NavLink>\n      </IcLink>\n    </div>\n  </MemoryRouter>\n</ComponentPreview>\n",
      "path": "/components/links/code",
      "date": "2023-02-03",
      "title": "Link",
      "status": "BETA",
      "subTitle": "Links can be used either as standalone components or inline with text.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/links",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/links"
        },
        {
          "title": "Code",
          "path": "/components/links/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/links/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/links/code.mdx",
        "createdAt": "2023-04-14T11:24:28.613Z",
        "lastModified": "2023-04-14T11:24:28.613Z",
        "size": 3532,
        "formattedSize": "3.4 KB"
      }
    },
    {
      "id": "components__links__guidancex",
      "contents": "\nimport { IcLink, IcTypography } from \"@ukic/react\";\nimport linksFig1 from \"./images/always-include-a-launch-icon-when-directing-users-to-an-external-address.png\";\nimport linksFig2 from \"./images/dont-use-a-default-link-for-links-which-open-a-new-tab-or-website.png\";\nimport linksFig3 from \"./images/use-a-button-when-displaying-a-clickable-action.png\";\nimport linksFig4 from \"./images/dont-use-a-link-to-initiate-an-action.png\";\nimport linksFig5 from \"./images/when-using-inline-links-always-use-a-different-colour-to-the-adjacent-text.png\";\nimport linksFig6 from \"./images/avoid-using-the-same-colour-style-as-the-adjacent-text.png\";\nimport linksFig7 from \"./images/use-the-monochromatic-variant-when-listing-standalone-links.png\";\nimport linksFig8 from \"./images/do-not-use-bad-link-text.png\";\n\n## Component variants\n\n### Standalone\n\nStandalone links are positioned separately from other text content.\n\nA standalone link can include a launch icon to the right of the link for clarity.\n\n<ComponentPreview>\n  <IcTypography>\n    <IcLink href=\"/components/links\" showIcon>\n      Links homepage\n    </IcLink>\n  </IcTypography>\n</ComponentPreview>\n\n### Inline\n\nInline links are contained within other text elements.\n\n<ComponentPreview>\n  <IcTypography>\n    Return to the <IcLink href=\"/components/links\">links homepage</IcLink>\n  </IcTypography>\n</ComponentPreview>\n\n## When to use\n\nUse links to navigate to a new page.\n\nLinks can be applied to any text element but will use the link styling.\n\nAlways show a launch icon when a link is set up to open a page in a new tab or window, or when directing to an external app.\n\n<DoDontCaution\n  imageSrc={linksFig1}\n  imageAlt=\"An example of a link labelled ‘Fairtrade Foundation” featuring a ‘launch’ icon to denote it will open a new tab or page.\"\n  caption=\"Always include an external link icon formed by a square and an arrow when directing users to an external address.\"\n  state=\"good\"\n/>\n\n<DoDontCaution\n  imageSrc={linksFig2}\n  imageAlt=\"An example of a link labelled ‘Fairtrade Foundation” not featuring an external link icon.\"\n  caption=\"Don’t use a default link for links which open a new tab or website.\"\n  state=\"bad\"\n/>\n\n## When not to use\n\nDon’t use a link to display an action on a page, use a [button](/components/buttons) instead.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={linksFig3}\n    imageAlt=\"An image of an example form featuring a group of radio buttons, with a submit button at the end.\"\n    caption=\"Use a button when displaying a clickable action.\"\n    state=\"good\"\n  />\n  <DoDontCaution\n    imageSrc={linksFig4}\n    imageAlt=\"An image of an example form featuring a group of radio buttons, and a link labelled ‘Submit’ at the end.\"\n    caption=\"Don’t use a link to initiate an action.\"\n    state=\"bad\"\n  />\n</DoubleDoDontCaution>\n\n## Colour\n\nOnce a link has been visited, the browser will remember this and the link will change to use the visited styling.\n\nYour browser is set to remember what links have been visited. Visited links feature a different colour style.\n\nAll other states will use specific [hyperlink styling](/styles/colour#links).\n\nUse default appearance links when used inline with other text. If the text appears on a different coloured background, use the light or dark appearance links to achieve good colour contrast.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={linksFig5}\n    imageAlt=\"An example paragraph with black text, featuring an inline link with blue colour styling.\"\n    caption=\"When using inline links, always use a different colour to the adjacent text.\"\n    state=\"good\"\n  />\n  <DoDontCaution\n    imageSrc={linksFig6}\n    imageAlt=\"An example paragraph with black text, featuring an inline link the same colour styling.\"\n    caption=\"Avoid using the same link appearance as the adjacent text. Only use the same appearance if the text is used on a dark background.\"\n    state=\"bad\"\n  />\n</DoubleDoDontCaution>\n\nUse the light or dark appearance links when listing a series of standalone links on different coloured backgrounds.\n\n<DoDontCaution\n  imageSrc={linksFig7}\n  imageAlt=\"An image of a footer with two navigation groups titled ‘Services’ and ‘Policy’ which house a list of several standalone links. Every text element in the footer is white, including the hyperlinks.\"\n  caption=\"Use light appearance links when displaying standalone links on a dark background.\"\n  state=\"good\"\n/>\n\n## Content\n\n### Link text\n\nAlways use a concise string of text in a link rather than displaying the full URL. Make sure the link text is descriptive enough to be relevant to the page the link points to.\n\nDon’t omit important descriptive information from the link text. Avoid using unnecessarily lengthy descriptions, but strike a balance between relevance and conciseness.\n\n<ComponentPreview state=\"good\" caption=\"test\">\n  <IcLink href=\"#\">About our coffees</IcLink>\n</ComponentPreview>\n\n<IcTypography\n  variant=\"label\"\n  style={{ marginTop: \"-16px\", marginBottom: \"24px\" }}\n>\n  Use concise but relevant links.\n</IcTypography>\n\n<DoDontCaution\n  imageSrc={linksFig8}\n  imageAlt=\"An example of three links. One reads ‘www.coffeeshop.com/about-our-coffees', the second reads ‘Let us tell you all about our speciality coffees’, and the third reads ‘Coffees’.\"\n  caption=\"Don’t use URLs in the link text, don’t use unnecessarily long link text, and don’t omit important descriptive information.\"\n  state=\"bad\"\n/>\n\n### Email addresses\n\nWhen linking to email addresses use the full email address in the link text. Don’t describe the contact without showing them email address.\n\n<ComponentPreview state=\"good\">\n  <IcLink href=\"mailto:info@icds.co.uk\">info@icds.co.uk</IcLink>\n</ComponentPreview>\n\n<IcTypography\n  variant=\"label\"\n  style={{ marginTop: \"-16px\", marginBottom: \"24px\" }}\n>\n  Show the full email address.\n</IcTypography>\n\n<ComponentPreview state=\"bad\">\n  <IcLink href=\"mailto:info@icds.co.uk\">ICDS team</IcLink>\n</ComponentPreview>\n\n<IcTypography\n  variant=\"label\"\n  style={{ marginTop: \"-16px\", marginBottom: \"24px\" }}\n>\n  Don’t embed labels when linking email addresses\n</IcTypography>\n\n## Accessibility considerations\n\nWhen reading a page, screen reader users might navigate to links independently of the adjacent content. Make sure links are descriptive enough that they make sense out of context.\n\nConsider that some screen readers allow users to view a full list of all links present on a page. This may be ordered either alphabetically, or in order of appearance. Make sure to label links with relevant information at the beginning of the string of text. For example, don’t embed “How to contact us”, but rather “Contact us”.\n",
      "path": "/components/links",
      "navPriority": 12,
      "date": "2023-02-03",
      "title": "Link",
      "status": "BETA",
      "subTitle": "Links can be used either as standalone components or inline with text.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/links",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/links"
        },
        {
          "title": "Code",
          "path": "/components/links/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/links/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/links/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.613Z",
        "lastModified": "2023-04-14T11:24:28.613Z",
        "size": 7197,
        "formattedSize": "7.0 KB"
      }
    },
    {
      "id": "components__loading-indicators__accessibilityx",
      "contents": "\n## Easy to use for everyone\n\nClear labels help convey that a process/component is loading.\n\nWe have ensured the loading indicators meet accessibility guidance around colour, speed and movement. Loading spinners should not flash which can be problematic for users with particular accessibility needs.\n\n## For Assistive Technology\n\nLoading indicators use the `aria-live` attribute to tell screen reader users that there is dynamic content on the page. `aria-busy` tells assistive tech that the container is getting new content. `aria-busy` will be false when the container isn't refreshing and will be equal to true when the content is reloading.\n\n`aria-live` takes three attributes: `off`, `polite`, and `assertive`. While polite doesn’t interrupt the screen reader if other content is being read, assertive will immediately read out the element’s content. Loading indicators use assertive to ensure screen reader users are provided with the same information as other users.\n\n## Based on\n\nThe loading indicator component has been based on the following resources:\n\n- [Accessible Loading Indicators—with No Extra Elements!](https://dockyard.com/blog/2020/03/02/accessible-loading-indicatorswith-no-extra-elements), James Steinbach, accessed March 2022.\n- [Loading: Accessibility](https://carbondesignsystem.com/components/loading/accessibility/), IBM, accessed March 2022.\n\n## Testing\n\nWe’ve tested this component against WCAG 2.1 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/loading-indicators/accessibility",
      "date": "2023-02-03",
      "title": "Loading indicator",
      "status": "BETA",
      "subTitle": "Loading indicators help inform users that a request is being processed. Circular and linear indicators provide flexibility in design.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/loading-indicators",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/loading-indicators"
        },
        {
          "title": "Code",
          "path": "/components/loading-indicators/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/loading-indicators/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/loading-indicators/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.617Z",
        "lastModified": "2023-04-14T11:24:28.617Z",
        "size": 2199,
        "formattedSize": "2.1 KB"
      }
    },
    {
      "id": "components__loading-indicators__codex",
      "contents": "\nimport { IcLoadingIndicator } from \"@ukic/react\";\n\n## Component demo\n\nexport const snippets = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-loading-indicator type=\"circular\" label=\"Loading...\" />\n<ic-loading-indicator type=\"linear\" label=\"Loading...\" />`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcLoadingIndicator type=\"circular\" label=\"Loading...\" />\n<IcLoadingIndicator type=\"linear\" label=\"Loading...\" />`,\n  },\n];\n\n<ComponentPreview\n  snippets={snippets}\n  style={{ flexDirection: \"column\", gap: \"8px\" }}\n>\n  <IcLoadingIndicator type=\"circular\" label=\"Loading...\" />\n  <IcLoadingIndicator type=\"linear\" label=\"Loading...\" />\n</ComponentPreview>\n\n## Loading indicator details\n\n<ComponentDetails component=\"ic-loading-indicator\" />\n\n## Variants\n\n### Sizes\n\nexport const snippetsSizes = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-loading-indicator type=\"circular\" label=\"Small\" size=\"small\"/>\n<ic-loading-indicator type=\"circular\" label=\"Large\" size=\"large\"/>\n<ic-loading-indicator type=\"linear\" label=\"Small\" size=\"small\"/>\n<ic-loading-indicator type=\"linear\" label=\"Large\" size=\"large\"/>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcLoadingIndicator type=\"circular\" label=\"Small\" size=\"small\" />\n<IcLoadingIndicator type=\"circular\" label=\"Large\" size=\"large\" />\n<IcLoadingIndicator type=\"linear\" label=\"Small\" size=\"small\" />\n<IcLoadingIndicator type=\"linear\" label=\"Large\" size=\"large\" />`,\n  },\n];\n\n<ComponentPreview\n  snippets={snippetsSizes}\n  style={{ flexDirection: \"column\", gap: \"8px\" }}\n>\n  <IcLoadingIndicator type=\"circular\" label=\"Small\" size=\"small\" />\n  <IcLoadingIndicator type=\"circular\" label=\"Large\" size=\"large\" />\n  <IcLoadingIndicator type=\"linear\" label=\"Small\" size=\"small\" />\n  <IcLoadingIndicator type=\"linear\" label=\"Large\" size=\"large\" />\n</ComponentPreview>\n\n### Icon\n\nexport const snippetsIcon = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-loading-indicator size=\"icon\"/>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcLoadingIndicator size=\"icon\" />`,\n  },\n];\n\n<ComponentPreview snippets={snippetsIcon}>\n  <IcLoadingIndicator size=\"icon\" />\n</ComponentPreview>\n\n### Determinate\n\nexport const snippetsDeterminate = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-loading-indicator type=\"circular\" label=\"Progress\" progress=\"30\" min=\"0\" max=\"100\"/>\n<ic-loading-indicator type=\"linear\" label=\"Progress\" progress=\"30\" min=\"0\" max=\"100\"/>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcLoadingIndicator type=\"circular\" label=\"Progress\" progress=\"30\" min=\"0\" max=\"100\" />\n<IcLoadingIndicator type=\"linear\" label=\"Progress\" progress=\"30\" min=\"0\" max=\"100\" />`,\n  },\n];\n\n<ComponentPreview\n  snippets={snippetsDeterminate}\n  style={{ flexDirection: \"column\", gap: \"8px\" }}\n>\n  <IcLoadingIndicator\n    type=\"circular\"\n    label=\"Progress\"\n    progress=\"30\"\n    min=\"0\"\n    max=\"100\"\n  />\n  <IcLoadingIndicator\n    type=\"linear\"\n    label=\"Progress\"\n    progress=\"30\"\n    min=\"0\"\n    max=\"100\"\n  />\n</ComponentPreview>\n\n### Light\n\nexport const snippetsLight = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-loading-indicator type=\"circular\" name=\"Loading\" appearance=\"light\"></ic-loading-indicator>\n<ic-loading-indicator type=\"linear\" name=\"Loading\" appearance=\"light\"></ic-loading-indicator>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcLoadingIndicator type=\"circular\" name=\"Loading\" appearance=\"light\" />\n<IcLoadingIndicator type=\"linear\" name=\"Loading\" appearance=\"light\"/>`,\n  },\n];\n\n<ComponentPreview\n  snippets={snippetsLight}\n  style={{ flexDirection: \"column\", gap: \"8px\", background: \"#333333\" }}\n>\n  <IcLoadingIndicator type=\"circular\" name=\"Loading\" appearance=\"light\" />\n  <IcLoadingIndicator type=\"linear\" name=\"Loading\" appearance=\"light\" />\n</ComponentPreview>\n\n### Changing label\n\nexport const snippetsChangingLabel = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-loading-indicator type=\"circular\" label=\"Loading.../Still loading...\" label-duration=\"4000\"></ic-loading-indicator>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcLoadingIndicator type=\"circular\" label=\"Loading.../Still loading...\" labelDuration=\"4000\" />`,\n  },\n];\n\n<ComponentPreview snippets={snippetsChangingLabel}>\n  <IcLoadingIndicator\n    type=\"circular\"\n    label=\"Loading.../Still loading...\"\n    labelDuration=\"4000\"\n  />\n</ComponentPreview>\n",
      "path": "/components/loading-indicators/code",
      "date": "2023-02-03",
      "title": "Loading indicator",
      "status": "BETA",
      "subTitle": "Loading indicators help inform users that a request is being processed. Circular and linear indicators provide flexibility in design.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/loading-indicators",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/loading-indicators"
        },
        {
          "title": "Code",
          "path": "/components/loading-indicators/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/loading-indicators/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/loading-indicators/code.mdx",
        "createdAt": "2023-04-14T11:24:28.617Z",
        "lastModified": "2023-04-14T11:24:28.617Z",
        "size": 4977,
        "formattedSize": "4.9 KB"
      }
    },
    {
      "id": "components__loading-indicators__guidancex",
      "contents": "\nimport { IcLoadingIndicator, IcTypography } from \"@ukic/react\";\nimport loadingIndicatorFig1 from \"./images/fig-1-use-clear-concise-and-specific-labels.png\";\nimport loadingIndicatorFig2 from \"./images/fig-2-do-not-make-labels-unnecessarily-long.png\";\nimport loadingIndicatorFig3 from \"./images/fig-3-always-centre-the-component.png\";\nimport loadingIndicatorFig4 from \"./images/fig-4-do-not-position-the-loading-indicators-on-other-parts-of-the-page-or-container.png\";\nimport loadingIndicatorFig5 from \"./images/fig-5-place-the-full-width-indicator-at-the-top-of-the-container.png\";\nimport loadingIndicatorFig6 from \"./images/fig-6-do-not-position-full-width-loading-indicators-on-other-parts-of-the-container.png\";\nimport loadingIndicatorFig7 from \"./images/fig-7-place-loading-indicators-in-modals-when-overlayed-on-other-content.png\";\nimport loadingIndicatorFig8 from \"./images/fig-8-do-not-place-loading-indicators-over-other-content.png\";\n\n## Component variants\n\nLoading indicators have two variants: radial and linear.\n\nLoading indicators can either be determinate or indeterminate:\n\n- Use **determinate** loading indicators when the percentage of completion can be determined.\n- Use **indeterminate** loading indicators when the process completion rate can't be determined.\n\n## Radial\n\nRadial loading indicators have four sizes:\n\n- Small\n- Default\n- Large\n- Icon\n\nThe icon size is available for use within other components.\n\n<ComponentPreview>\n  <IcLoadingIndicator type=\"circular\" progress=\"50\" max=\"100\" label=\"50%\" />\n</ComponentPreview>\n\n<IcTypography\n  variant=\"label\"\n  style={{ marginTop: \"-16px\", marginBottom: \"24px\" }}\n>\n  Radial determinate.\n</IcTypography>\n\n<ComponentPreview>\n  <IcLoadingIndicator type=\"circular\" label=\"Loading...\" />\n</ComponentPreview>\n\n<IcTypography\n  variant=\"label\"\n  style={{ marginTop: \"-16px\", marginBottom: \"24px\" }}\n>\n  Radial indeterminate.\n</IcTypography>\n\n## Linear\n\nLinear loading indicators have three sizes:\n\n- Small\n- Default\n- Large\n\nLinear loading indicators have two variants:\n\n- Default\n- Full-width\n\nLinear loading indicators can be set to full-width to span its container.\n\n<ComponentPreview>\n  <IcLoadingIndicator\n    style={{ width: \"240px\" }}\n    type=\"linear\"\n    label=\"50%\"\n    progress=\"50\"\n    max=\"100\"\n  />\n</ComponentPreview>\n\n<IcTypography\n  variant=\"label\"\n  style={{ marginTop: \"-16px\", marginBottom: \"24px\" }}\n>\n  Linear determinate.\n</IcTypography>\n\n<ComponentPreview>\n  <IcLoadingIndicator\n    style={{ width: \"240px\" }}\n    type=\"linear\"\n    label=\"Loading...\"\n    max=\"100\"\n  />\n</ComponentPreview>\n\n<IcTypography\n  variant=\"label\"\n  style={{ marginTop: \"-16px\", marginBottom: \"24px\" }}\n>\n  Linear indeterminate.\n</IcTypography>\n\n## When to use\n\nUse loading indicators when loading full pages or containers where the structure is unknown.\n\nUse determinate loading indicators wherever the percentage of completion can be calculated.\n\n## When not to use\n\nAvoid using loading indicators when loading full pages if the structure of the page loading is known. Instead, use the [skeleton](/components/skeleton) component.\n\n## Content\n\n### Labels\n\nDeterminate loading indicators feature the percentage completion rate in percentage points, 0 to 100%.\n\nIndeterminate loading indicators have a customisable label. The label can be set to change after a specified amount of time. Make sure to display each label for at least five seconds. Keep labels clear and concise. Where possible, provide specific labels to the process being performed.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={loadingIndicatorFig1}\n    imageAlt=\"A graphic of a radial loading indicator with the label of 'Submitting form...'.\"\n    state=\"good\"\n    caption=\"Use clear, concise, and specific labels.\"\n  />\n  <DoDontCaution\n    imageSrc={loadingIndicatorFig2}\n    imageAlt=\"A graphic of a radial loading indicator with the label of ‘The form is now being submitted... Please wait...’.\"\n    state=\"bad\"\n    caption=\"Don’t make labels unnecessarily long.\"\n  />\n</DoubleDoDontCaution>\n\n## Layout and placement\n\nLoading indicators always appear centred within their container. If the whole page is loading, position the loading indicator at the centre of the page. If the loading indicator is used inside another component, like a card, position the loading indicator at the centre of the component.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={loadingIndicatorFig3}\n    imageAlt=\"A graphic of a radial loading indicator positioned in the middle of a blank page.\"\n    state=\"good\"\n    caption=\"Always centre the component.\"\n  />\n  <DoDontCaution\n    imageSrc={loadingIndicatorFig4}\n    imageAlt=\"A graphic of a radial loading indicator positioned in the top left corner of a blank page.\"\n    state=\"bad\"\n    caption=\"Don’t position the loading indicators on other parts of the page or container.\"\n  />\n</DoubleDoDontCaution>\n\nWhen using the full-width variant of linear loading indicators, make sure to place this at the top of the component or page. Also, make sure that the loading indicator takes up the full width of the component or page.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={loadingIndicatorFig5}\n    imageAlt=\"A graphic of a full width loading indicator at the top of a page.\"\n    state=\"good\"\n    caption=\"Place the full width indicator at the top of the container.\"\n  />\n  <DoDontCaution\n    imageSrc={loadingIndicatorFig6}\n    imageAlt=\"A graphic of a full width loading indicator positioned in the centre of a container with a bigger width.\"\n    state=\"bad\"\n    caption=\"Don’t position full width loading indicators on other parts of the container. Make sure it has the same width of this container.\"\n  />\n</DoubleDoDontCaution>\n\nIf loading indicators are overlaid on other content, place them in a dialog.\n\n<DoDontCaution\n  imageSrc={loadingIndicatorFig7}\n  imageAlt=\"A loading indicator placed inside a modal dialog, overlaid on a page filled with content.\"\n  state=\"good\"\n  caption=\"Place loading indicators in dialogs when overlaid on other content.\"\n/>\n\n<DoDontCaution\n  imageSrc={loadingIndicatorFig8}\n  imageAlt=\"A loading indicator overlaid on a page filled with content.\"\n  state=\"bad\"\n  caption=\"Don’t place loading indicators over other content, even if changing the opacity of the background.\"\n/>\n",
      "path": "/components/loading-indicators",
      "navPriority": 13,
      "date": "2023-02-03",
      "title": "Loading indicator",
      "status": "BETA",
      "subTitle": "Loading indicators help inform users that a request is being processed. Radial and linear indicators provide flexibility in design.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/loading-indicators",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/loading-indicators"
        },
        {
          "title": "Code",
          "path": "/components/loading-indicators/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/loading-indicators/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/loading-indicators/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.617Z",
        "lastModified": "2023-04-14T11:24:28.617Z",
        "size": 6950,
        "formattedSize": "6.8 KB"
      }
    },
    {
      "id": "components__page-header__accessibilityx",
      "contents": "\n## Easy to use for everyone\n\nThe page header is the start of a page's content, so all `skip to content` links should direct the user here. The page header sits within a page's `main` landmark.\n\nWe've made sure that all interactive elements inside of a page header follow the logical tab order.\n\nEven when a page header is set to sticky scroll, it still sits in the normal tab order at the top of the page content.\n\nA page header's child components follow the accessibility considerations outlined in their own guidance.\n\n## For Assistive Technology\n\nPage header titling uses correct heading styles in order to achieve good semantic structure and provide information about structure and content relationships when using assistive technology.\n\n## Based on\n\nThe page header component has been based on the following resources:\n\n- [Accessible heading structure](https://www.a11yproject.com/posts/how-to-accessible-heading-structure/), A11y project, accessed March 2022.\n- [Semantic Structure: Regions, Headings and Lists](https://webaim.org/techniques/semanticstructure/), WebAIM, accessed March 2022.\n- [WCAG 2.1 1.3.1 Info and Relationships](https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships), W3, accessed March 2022.\n\n## Testing\n\nWe’ve tested this component against WCAG 2.1 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/page-header/accessibility",
      "date": "2023-02-03",
      "title": "Page header",
      "status": "BETA",
      "subTitle": "A page header defines the top of the page content and is a consistent way to show page context, key actions and secondary navigation.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/page-header",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/page-header"
        },
        {
          "title": "Code",
          "path": "/components/page-header/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/page-header/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/page-header/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.617Z",
        "lastModified": "2023-04-14T11:24:28.617Z",
        "size": 1998,
        "formattedSize": "2.0 KB"
      }
    },
    {
      "id": "components__page-header__codex",
      "contents": "\nimport {\n  IcPageHeader,\n  IcButton,\n  IcStatusTag,\n  IcStepper,\n  IcStep,\n  IcTextField,\n  IcNavigationItem,\n  IcBreadcrumb,\n  IcBreadcrumbGroup,\n  IcSectionContainer,\n} from \"@ukic/react\";\n\nimport { NavLink, MemoryRouter } from \"react-router-dom\";\n\n## Component demo\n\nexport const snippets = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-page-header heading=\"App title\" subheading=\"App information\"></ic-page-header>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcPageHeader heading=\"App title\" subheading=\"App information\" />`,\n  },\n];\n\n<ComponentPreview snippets={snippets} style={{ flexDirection: \"column\" }}>\n  <IcPageHeader heading=\"App title\" subheading=\"App information\" />\n</ComponentPreview>\n\n## Page header details\n\n<ComponentDetails component=\"ic-page-header\" />\n\n## Variants\n\n### With breadcrumb navigation\n\nexport const withBreadcrumbNavigation = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-page-header heading=\"Coffee recipes\" subheading=\"This is a page header component that has breadcrumb navigation.\">\n  <ic-status-tag slot=\"heading-adornment\" label=\"Beta\"></ic-status-tag>\n  <ic-breadcrumb-group slot=\"breadcrumbs\">\n    <ic-breadcrumb page-title=\"Breadcrumb 1\" href=\"#\"></ic-breadcrumb>\n    <ic-breadcrumb \n      current=\"true\" \n      page-title=\"Breadcrumb 2\" \n      href=\"#\"\n    >\n    </ic-breadcrumb>\n  </ic-breadcrumb-group>\n</ic-page-header>\n    `,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcPageHeader heading=\"Coffee recipes\" subheading=\"This is a page header component that has breadcrumb navigation.\">\n  <IcStatusTag slot=\"heading-adornment\" label=\"Beta\" />\n  <IcBreadcrumbGroup slot=\"breadcrumbs\">\n    <IcBreadcrumb pageTitle=\"Breadcrumb 1\" href=\"#\" />\n    <IcBreadcrumb \n      current\n      pageTitle=\"Breadcrumb 2\" \n      href=\"#\"\n    />\n  </IcBreadcrumbGroup>\n</IcPageHeader>\n    `,\n  },\n];\n\n<ComponentPreview\n  snippets={withBreadcrumbNavigation}\n  style={{ flexDirection: \"column\" }}\n>\n  <IcPageHeader\n    heading=\"Coffee recipes\"\n    subheading=\"This is a page header component that has breadcrumb navigation.\"\n  >\n    <IcStatusTag slot=\"heading-adornment\" label=\"Beta\" />\n    <IcBreadcrumbGroup slot=\"breadcrumbs\">\n      <IcBreadcrumb pageTitle=\"Breadcrumb 1\" href=\"#\" />\n      <IcBreadcrumb current pageTitle=\"Breadcrumb 2\" href=\"#\" />\n    </IcBreadcrumbGroup>\n  </IcPageHeader>\n</ComponentPreview>\n\n### With actions, input and stepper\n\nexport const withActionsInputStepper = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-page-header heading=\"Coffee recipes\" subheading=\"This is a page header component that has an input area, actions &amp; stepper.\" reverse-order=\"true\">\n  <ic-status-tag slot=\"heading-adornment\" label=\"Beta\"></ic-status-tag>\n  <ic-button slot=\"actions\" variant=\"primary\">Create coffee</ic-button>\n  <ic-button slot=\"actions\" variant=\"tertiary\">Filter coffee</ic-button>\n  <ic-stepper slot=\"stepper\">\n    <ic-step step-title=\"Warm kettle\" step-type=\"completed\"></ic-step>\n    <ic-step step-title=\"Warm milk\" step-subtitle=\"Optional\" step-type=\"completed\"></ic-step>\n    <ic-step step-title=\"Pour milk\" step-type=\"current\"></ic-step>\n  </ic-stepper>\n  <ic-text-field slot=\"input\" placeholder=\"Enter your input\" label=\"Input\" hide-label=\"true\" />\n</ic-page-header>\n    `,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcPageHeader heading=\"Coffee recipes\" subheading=\"This is a page header component that has an input area, actions and stepper.\" reverseOrder>\n  <IcStatusTag slot=\"heading-adornment\" label=\"Beta\" />\n  <IcButton slot=\"actions\" variant=\"primary\">\n    Create coffee\n  </IcButton>\n  <IcButton slot=\"actions\" variant=\"tertiary\">\n    Filter coffee\n  </IcButton>\n  <IcStepper slot=\"stepper\">\n    <IcStep stepTitle=\"Warm kettle\" stepType=\"completed\" />\n    <IcStep stepTitle=\"Warm milk\" stepSubtitle=\"Optional\" stepType=\"completed\" />\n      <IcStep stepTitle=\"Pour milk\" stepType=\"current\" />\n  </IcStepper>\n  <IcTextField slot=\"input\" placeholder=\"Enter your input\" label=\"Input\" hideLabel />\n</IcPageHeader>\n    `,\n  },\n];\n\n<ComponentPreview\n  snippets={withActionsInputStepper}\n  style={{ flexDirection: \"column\" }}\n>\n  <IcPageHeader\n    heading=\"Coffee recipes\"\n    subheading=\"This is a page header component that has an input area, actions and stepper.\"\n    reverseOrder\n  >\n    <IcStatusTag slot=\"heading-adornment\" label=\"Beta\" />\n    <IcButton slot=\"actions\" variant=\"primary\">\n      Create coffee\n    </IcButton>\n    <IcButton slot=\"actions\" variant=\"tertiary\">\n      Filter coffee\n    </IcButton>\n    <IcStepper slot=\"stepper\">\n      <IcStep stepTitle=\"Warm kettle\" stepType=\"completed\" />\n      <IcStep\n        stepTitle=\"Warm milk\"\n        stepSubtitle=\"Optional\"\n        stepType=\"completed\"\n      />\n      <IcStep stepTitle=\"Pour milk\" stepType=\"current\" />\n    </IcStepper>\n    <IcTextField\n      slot=\"input\"\n      placeholder=\"Enter your input\"\n      label=\"Input\"\n      hideLabel\n    />\n  </IcPageHeader>\n</ComponentPreview>\n\n### With actions, input and tabs\n\nexport const withActionsInputTabs = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-page-header \n  heading=\"Coffee recipes\" \n  subheading=\"This is a page header component that has an input area, actions &amp; tabs.\" \n  reverse-order=\"true\"\n>\n  <ic-status-tag slot=\"heading-adornment\" label=\"Beta\"></ic-status-tag>\n  <ic-button slot=\"actions\" variant=\"primary\">Create coffee</ic-button>\n  <ic-button slot=\"actions\" variant=\"tertiary\">Filter coffee</ic-button>\n  <ic-text-field slot=\"input\" placeholder=\"Enter your input\" label=\"Input\" hide-label=\"true\"></ic-text-field>\n  <ic-navigation-item \n    slot=\"tabs\" \n    label=\"All recipes\" \n    href=\"#\" \n    selected=\"true\"\n  >\n  </ic-navigation-item>\n  <ic-navigation-item \n    slot=\"tabs\" \n    label=\"Favourites\" \n    href=\"#\"\n  >\n  </ic-navigation-item>\n</ic-page-header>\n    `,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcPageHeader \n  heading=\"Coffee recipes\" \n  subheading=\"This is a page header component that has an input area, actions and tabs.\" \n  reverseOrder>\n  <IcStatusTag slot=\"heading-adornment\" label=\"Beta\" />\n  <IcButton slot=\"actions\" variant=\"primary\">\n    Create coffee\n  </IcButton>\n  <IcButton slot=\"actions\" variant=\"tertiary\">\n    Filter coffee\n  </IcButton>\n  <IcTextField \n    slot=\"input\" \n    placeholder=\"Enter your input\"\n    label=\"Input\" \n    hideLabel \n  />\n  <IcNavigationItem \n    slot=\"tabs\" \n    label=\"All recipes\" \n    href=\"#\" \n    selected \n  />\n  <IcNavigationItem \n    slot=\"tabs\" \n    label=\"Favourites\" \n    href=\"#\" \n  />\n</IcPageHeader>\n    `,\n  },\n];\n\n<ComponentPreview\n  snippets={withActionsInputTabs}\n  style={{ flexDirection: \"column\" }}\n>\n  <IcPageHeader\n    heading=\"Coffee recipes\"\n    subheading=\"This is a page header component that has an input area, actions and tabs.\"\n    reverseOrder\n  >\n    <IcStatusTag slot=\"heading-adornment\" label=\"Beta\" />\n    <IcButton slot=\"actions\" variant=\"primary\">\n      Create coffee\n    </IcButton>\n    <IcButton slot=\"actions\" variant=\"tertiary\">\n      Filter coffee\n    </IcButton>\n    <IcTextField\n      slot=\"input\"\n      placeholder=\"Enter your input\"\n      label=\"Input\"\n      hideLabel\n    />\n    <IcNavigationItem slot=\"tabs\" label=\"All recipes\" href=\"#\" selected />\n    <IcNavigationItem slot=\"tabs\" label=\"Favourites\" href=\"#\" />\n  </IcPageHeader>\n</ComponentPreview>\n\n### With React Router\n\nexport const withReactRouter = [\n  {\n    language: \"React\",\n    snippet: `<MemoryRouter initialEntries={[\"/\"]}>\n  <IcPageHeader\n    heading=\"Coffee recipes\"\n    subheading=\"This is a page header component that has an input area, actions and tabs. This page header uses React Router.\"\n    reverseOrder\n  >\n    <IcStatusTag slot=\"heading-adornment\" label=\"Beta\" />\n    <IcButton slot=\"actions\" variant=\"primary\"\n      >Create coffee\n      <SlottedSVG slot=\"icon\" ... />\n    </IcButton>\n    <IcButton slot=\"actions\" variant=\"tertiary\">Filter coffee</IcButton>\n    <IcNavigationItem slot=\"tabs\" selected>\n      <NavLink slot=\"navigation-item\" to=\"/\">All recipes</NavLink>\n    </IcNavigationItem>        \n    <IcNavigationItem slot=\"tabs\">\n      <NavLink slot=\"navigation-item\" to=\"/favourites\">Favourites</NavLink>\n    </IcNavigationItem>\n    <IcTextField \n      slot=\"input\" \n      placeholder=\"Enter your input\"\n      label=\"Input\" \n      hideLabel \n      style={{'@media (maxWidth: 576px)':{width: \"280px\"}}}\n    />\n  </IcPageHeader>\n  <IcSectionContainer>\n      <Routes>\n        <Route path=\"/\" element={() => <IcTypography>This page is about coffee recipes</IcTypography>}/>\n        <Route path=\"/favourites\" element={() => <IcTypography>All your favourite coffee recipes in one place</IcTypography>}/>\n      </Routes>\n  </IcSectionContainer>\n</MemoryRouter>\n    `,\n  },\n];\n\n<ComponentPreview\n  snippets={withReactRouter}\n  style={{ flexDirection: \"column\" }}\n>\n  <MemoryRouter initialEntries={[\"/\"]}>\n    <IcPageHeader\n      heading=\"Coffee recipes\"\n      subheading=\"This is a page header component that has an input area, actions and tabs. This page header uses React Router.\"\n      reverseOrder\n    >\n      <IcStatusTag slot=\"heading-adornment\" label=\"Beta\" />\n      <IcButton slot=\"actions\" variant=\"primary\">\n        Create coffee\n        <svg\n          slot=\"icon\"\n          width=\"24\"\n          height=\"24\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d=\"M19 13H13V19H11V13H5V11H11V5H13V11H19V13Z\"\n            fill=\"currentColor\"\n          />\n        </svg>\n      </IcButton>\n      <IcButton slot=\"actions\" variant=\"tertiary\">\n        Filter coffee\n      </IcButton>\n      <IcNavigationItem slot=\"tabs\" selected>\n        <NavLink slot=\"navigation-item\" to=\"/\">\n          All recipes\n        </NavLink>\n      </IcNavigationItem>\n      <IcNavigationItem slot=\"tabs\">\n        <NavLink slot=\"navigation-item\" to=\"/favourites\">\n          Favourites\n        </NavLink>\n      </IcNavigationItem>\n      <IcTextField\n        slot=\"input\"\n        placeholder=\"Enter your input\"\n        label=\"Input\"\n        hideLabel\n        style={{ \"@media (maxWidth: 576px)\": { width: \"280px\" } }}\n      />\n    </IcPageHeader>\n    <IcSectionContainer />\n  </MemoryRouter>\n</ComponentPreview>\n",
      "path": "/components/page-header/code",
      "date": "2023-02-03",
      "title": "Page header",
      "status": "BETA",
      "subTitle": "A page header defines the top of the page content and is a consistent way to show page context, key actions and secondary navigation.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/page-header",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/page-header"
        },
        {
          "title": "Code",
          "path": "/components/page-header/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/page-header/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/page-header/code.mdx",
        "createdAt": "2023-04-14T11:24:28.617Z",
        "lastModified": "2023-04-14T11:24:28.617Z",
        "size": 10780,
        "formattedSize": "10.5 KB"
      }
    },
    {
      "id": "components__page-header__guidancex",
      "contents": "\nimport {\n  IcPageHeader,\n  IcStatusTag,\n  IcButton,\n  IcTextField,\n  IcStepper,\n  IcStep,\n} from \"@ukic/react\";\nimport pageHeaderFig1 from \"./images/fig-1-page-header-anatomy.png\";\nimport pageHeaderFig2 from \"./images/fig-2-dont-use-global-actions-in-a-page-header.png\";\nimport pageHeaderFig3 from \"./images/fig-3-use-default-and-dense-sizing.png\";\nimport pageHeaderFig4 from \"./images/fig-4-set-width-of-page-header-to-match-width-of-main-content.png\";\nimport pageHeaderFig5 from \"./images/fig-5-dont-set-width-of-page-header-to-align-to-content.png\";\nimport pageHeaderFig6 from \"./images/fig-6-page-header-displayed-whilst-scroll-position-is-at-top-of-page.png\";\nimport pageHeaderFig7 from \"./images/fig-7-sticky-page-header-displayed-whilst-scrolled.png\";\nimport pageHeaderFig8 from \"./images/fig-8-centre-alignment.png\";\nimport pageHeaderFig9 from \"./images/fig-9-left-alignment.png\";\nimport pageHeaderFig10 from \"./images/fig-10-full-width.png\";\nimport pageHeaderFig11 from \"./images/fig-11-dont-mix-alignment.png\";\n\n## Introduction\n\nAn example of the page header component.\n\n<ComponentPreview>\n  <IcPageHeader\n    heading=\"Coffee recipes\"\n    subheading=\"This is a page header component that has an input area, actions and stepper.\"\n    reverseOrder\n  >\n    <IcStatusTag slot=\"heading-adornment\" label=\"Beta\" />\n    <IcButton slot=\"actions\" variant=\"primary\">\n      Create coffee\n    </IcButton>\n    <IcButton slot=\"actions\" variant=\"tertiary\">\n      Filter coffee\n    </IcButton>\n    <IcStepper slot=\"stepper\">\n      <IcStep stepTitle=\"Warm kettle\" stepType=\"completed\" />\n      <IcStep\n        stepTitle=\"Warm milk\"\n        stepSubtitle=\"Optional\"\n        stepType=\"completed\"\n      />\n      <IcStep stepTitle=\"Pour milk\" stepType=\"current\" />\n    </IcStepper>\n    <IcTextField\n      slot=\"input\"\n      placeholder=\"Enter your input\"\n      label=\"Input\"\n      hideLabel\n    />\n  </IcPageHeader>\n</ComponentPreview>\n\n## When to use\n\nUse a page header to display an introduction to the content of the page. Add additional elements to provide actions, navigation or inputs at the page level.\n\n<DoDontCaution\n  imageSrc={pageHeaderFig1}\n  imageAlt=\"A diagram showing the positioning of the content areas within a page header. The content areas are a breadcrumb area, a title area, an action area, an input area, and a navigation area. \"\n  state=\"none\"\n  caption=\"The anatomy of a page header that includes areas for breadcrumbs, titling, actions, inputs and additional navigation.  \"\n/>\n\n### With action\n\nUse [buttons](/components/buttons) when you need to provide actions that affect all content on the page. For example, to filter or to add a new record. Only use one primary button per page header. Use any type of button within the page header’s interaction area.\n\n### With input\n\nInclude an [input field](/components/search-bar) to search or filter data displayed on the page. Don’t overload the input area with components, consider placing them in the page content instead.\n\n### With breadcrumb navigation\n\nUse a [breadcrumb](/components/breadcrumbs) to show the current page’s position in the app’s hierarchy or show a link to the parent page.\n\n### With tab navigation\n\nUse [tabs](/components/tabs) if the content grouped by the header can be split into distinct categories.\n\n### With stepper\n\nUse a [stepper](/components/stepper) to show progress through a multi-step process.\n\n## When not to use\n\nDon’t use the page header to include global actions or global navigation, instead use the [top navigation](/components/top-nav) or [side navigation](/components/side-nav).\n\n<DoDontCaution\n  imageSrc={pageHeaderFig2}\n  imageAlt=\"An example app called ‘Better latte than never’ that displays a page titled ‘Top 5 reasons why coffee is a way better choice than tea’. The page’s page header contains an action button titled ‘Main menu’.\"\n  state=\"bad\"\n  caption=\"Don‘t use global actions within a page header.\"\n/>\n\n## Sizing\n\n<DoDontCaution\n  imageSrc={pageHeaderFig3}\n  imageAlt=\"A default sized page header with a large title that says ‘Grande Frappé’ and small sized page header with the same title displayed much smaller.\"\n  state=\"none\"\n  caption=\"An example of default and small sized page headers\"\n/>\n\nSet the width of the page header to match the width of the page’s main content.\n\n<DoDontCaution\n  imageSrc={pageHeaderFig4}\n  imageAlt=\"An example app titled ‘Better latte than never’ showing a page called ‘Top 5 reasons why coffee is better than tea’ with a page header that spans the full width of the content area.\"\n  state=\"good\"\n  caption=\"Set the width of the page header to fill the page’s main content area.  \"\n/>\n\n<DoDontCaution\n  imageSrc={pageHeaderFig5}\n  imageAlt=\"An example app titled ‘Better latte than never’ showing a page called ‘Top 5 reasons why coffee is better than tea’ with a page header that is indented from the page margins to align with the page’s example content.\"\n  state=\"bad\"\n  caption=\"Don’t set the width of the page header to align with content. The page header content will align to your content container automatically.\"\n/>\n\n## Layout and placement\n\n### Sticky scroll\n\nSet the page header to stick to the top of the screen if you need it to be visible when scrolling. Otherwise, set it to scroll with content to maximise available space for content.\n\n<DoDontCaution\n  imageSrc={pageHeaderFig6}\n  imageAlt=\"An example app title ‘better latte than never’ that shows the top navigation component at the top of the screen, a page header below it, and some example content below that.\"\n  state=\"none\"\n  caption=\"The page header sits at the top of the page when scrolled to the top.\"\n/>\n\n<DoDontCaution\n  imageSrc={pageHeaderFig7}\n  imageAlt=\"An example app that is scrolled partway down the page. A page header is displayed stuck to the top of the screen and overlaying other example content.\"\n  state=\"none\"\n  caption=\"A sticky page header stays at the top of the screen when scrolling down the page.\"\n/>\n\n### Alignment\n\nAlign the page header either to the left, centre or full-width to match the rest of the content on the page.\n\n<DoDontCaution\n  imageSrc={pageHeaderFig9}\n  imageAlt=\"An example app that shows a page header and some example content. The page header’s title, description and action button are aligned to the left hand side of the screen, and the example page content below is also aligned to the left of the screen.\"\n  state=\"good\"\n  caption=\"Use left alignment to position page header content to the left of the page container.\"\n/>\n\n<DoDontCaution\n  imageSrc={pageHeaderFig8}\n  imageAlt=\"An example app that shows a page header and some example content. The page header’s title, description and action button are aligned to the centre of the screen, and the example page content below is also aligned to the centre of the screen.\"\n  state=\"good\"\n  caption=\"Use centred alignment to position page header content to the middle of the page container.\"\n/>\n\n<DoDontCaution\n  imageSrc={pageHeaderFig10}\n  imageAlt=\"An example app that shows a page header and some example content. The page header’s content spans the full screen width with its title and description aligned to the left margin and its action button aligned to the right margin. The example page content below is aligned to the centre of the screen.\"\n  state=\"good\"\n  caption=\"Use full-width to align page header content to the left and right margins of the page container.\"\n/>\n\nDon’t align a page header’s content differently to how the rest of the page content is aligned.\n\n<DoDontCaution\n  imageSrc={pageHeaderFig11}\n  imageAlt=\"An example app that shows a page header and some example content. The page header’s content is aligned to the left of the screen. The example page content below is aligned to the centre of the screen.\"\n  state=\"bad\"\n  caption=\"Don’t mix alignments in an app. Here the page header’s content has left alignment, whereas the rest of the page content is centre aligned.\"\n/>\n\n## Content\n\nUse short titles that clearly describe the page's content.\n\nKeep page subtitles concise within the page header. If more content is required, consider placing it within the page itself.\n\nInclude a title adornment to convey information such as a status or versioning.\n\n## Related components\n\n- [Hero](/components/hero)\n- [Top navigation](/components/top-nav)\n- [Side navigation](/components/side-nav)\n",
      "path": "/components/page-header",
      "navPriority": 14,
      "date": "2023-02-03",
      "title": "Page header",
      "status": "BETA",
      "subTitle": "A page header defines the top of the page content and is a consistent way to show page context, key actions and secondary navigation.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/page-header",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/page-header"
        },
        {
          "title": "Code",
          "path": "/components/page-header/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/page-header/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/page-header/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.617Z",
        "lastModified": "2023-04-14T11:24:28.617Z",
        "size": 9006,
        "formattedSize": "8.8 KB"
      }
    },
    {
      "id": "components__popover-menu__accessibilityx",
      "contents": "\n## Easy to use for everyone\n\nPopover menus use the role ‘menu’ and the items within use ‘menuitem’ and ‘menuitemcheckbox’. This enables the menu to be opened using usual keyboard commands. Clicking on a menu item closes the menu after triggering the menu item's action. A menu item's action can also be triggered using the \"Space\" and \"Enter\" keys. Popover menu groups use the role ‘group’.\n\nPopover menus appear overlaid on other content. When opening a submenu, focus is applied to the whole sub-menu and then the items are navigated between using the up and down arrow keys. When focus is moved on, the popover menu closes automatically. Using the ‘Esc’ key will also close the popover menu.\n\nDisabled menu items can still be focussed upon so that the structure of the menu is understandable, even if the menu item can’t be triggered at that time.\n\n## For Assistive Technology\n\nEach menu item within a popover menu can use an aria-label that provides additional context that may not be required in a visible label.\n\nFor ease of use, actions can be assigned keyboard shortcuts and these are displayed on the menu item. This information is announced by a screen reader when each menu item is focussed.\n\nWhen moving between sub-menus in a popover menu, the nested sub-menu’s level is announced by a screen reader so that it is easy to understand whereabouts you are within the menu structure.\n\n## Based on\n\nThe popover menu component has been based on the following resources:\n\n- [Aria Group Role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/group_role), MDN Web Docs, accessed 22nd March 2023\n- [Aria Menu Role](https://developer.mozilla.org/en-US/docs/web/accessibility/aria/roles/menu_role), MDN Web Docs, accessed 22nd March 2023\n- [Aria Menuitem Role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/menuitem_role), MDN Web Docs, accessed 22nd March 2023\n- [Aria Menuitemcheckbox Role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/menuitemcheckbox_role), MDN Web Docs, accessed 22nd March 2023\n\n## Testing\n\nWe’ve tested this component against WCAG 2.1 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/popover-menu/accessibility",
      "date": "2023-03-31",
      "title": "Popover menu",
      "status": "BETA",
      "subTitle": "Use popover menus to place actions inside a menu that overlays other page content when opened.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/popover-menu",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/popover-menu"
        },
        {
          "title": "Code",
          "path": "/components/popover-menu/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/popover-menu/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/popover-menu/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.621Z",
        "lastModified": "2023-04-14T11:24:28.621Z",
        "size": 2827,
        "formattedSize": "2.8 KB"
      }
    },
    {
      "id": "components__popover-menu__codex",
      "contents": "\nimport { IcPopoverMenu, IcMenuItem, IcMenuGroup, IcButton } from \"@ukic/react\";\n\n## Component demo\n\nexport const snippets = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-button \n  id=\"button-1\" \n  variant=\"icon\"\n  title=\"More information\" \n  onclick=\"handleClick()\"\n>\n  <svg\n    slot=\"icon\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    fill=\"currentColor\"\n    class=\"bi bi-three-dots-vertical\"\n    viewBox=\"0 0 16 16\"\n  >\n    <path d=\"M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\" />\n  </svg>\n</ic-button>\n<script>\n  var icPopover = document.querySelector(\"#popover-menu\");\n  function handleClick() {\n    icPopover.open = true;\n  }\n</script>\n<div>\n  <ic-popover-menu anchor=\"button-1\" aria-label=\"popover\" id=\"popover-menu\">\n    <ic-menu-item label=\"Copy code\"></ic-menu-item>\n    <ic-menu-item label=\"Paste code\"></ic-menu-item>\n    <ic-menu-item\n      label=\"Actions\"\n      submenu-trigger-for=\"actions\"\n    ></ic-menu-item>\n  </ic-popover-menu>\n  <ic-popover-menu submenu-id=\"actions\">\n    <ic-menu-item label=\"Edit\"></ic-menu-item>\n    <ic-menu-item label=\"Find\"></ic-menu-item>\n    <ic-menu-item label=\"Delete\" variant=\"destructive\"></ic-menu-item>\n  </ic-popover-menu>\n</div>`,\n  },\n  {\n    language: \"React\",\n    snippet: `const handleClick = () => {\n  document.querySelector(\"#popover-menu\").open = true;\n};\nreturn (\n  <>\n    <IcButton\n      variant=\"icon\"\n      title=\"More information\"\n      id=\"button-1\"\n      onClick={handleClick}\n    >\n      <SlottedSVG\n        slot=\"icon\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"16\"\n        height=\"16\"\n        fill=\"currentColor\"\n        class=\"bi bi-three-dots-vertical\"\n        viewBox=\"0 0 16 16\"\n      >\n        <path d=\"M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\" />\n      </SlottedSVG>\n    </IcButton>\n    <IcPopoverMenu anchor=\"button-1\" aria-label=\"popover\" id=\"popover-menu\">\n      <IcMenuItem label=\"Copy code\" />\n      <IcMenuItem label=\"Paste code\" />\n      <IcMenuItem label=\"Actions\" submenuTriggerFor=\"actions\" />\n    </IcPopoverMenu>\n    <IcPopoverMenu submenuId=\"actions\">\n      <IcMenuItem label=\"Edit\" />\n      <IcMenuItem label=\"Find\" />\n      <IcMenuItem label=\"Delete\" variant=\"destructive\" />\n    </IcPopoverMenu>\n  </>\n);`,\n  },\n];\n\nexport const DemoPopover = () => {\n  const handleClick = () => {\n    document.querySelector(\"#popover-menu\").open = true;\n  };\n  return (\n    <>\n      <IcButton\n        variant=\"icon\"\n        title=\"More information\"\n        id=\"button-1\"\n        onClick={handleClick}\n      >\n        <svg\n          slot=\"icon\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"16\"\n          height=\"16\"\n          fill=\"currentColor\"\n          class=\"bi bi-three-dots-vertical\"\n          viewBox=\"0 0 16 16\"\n        >\n          <path d=\"M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\" />\n        </svg>\n      </IcButton>\n      <IcPopoverMenu anchor=\"button-1\" aria-label=\"popover\" id=\"popover-menu\">\n        <IcMenuItem label=\"Copy code\" />\n        <IcMenuItem label=\"Paste code\" />\n        <IcMenuItem label=\"Actions\" submenuTriggerFor=\"actions\" />\n      </IcPopoverMenu>\n      <IcPopoverMenu submenuId=\"actions\">\n        <IcMenuItem label=\"Edit\" />\n        <IcMenuItem label=\"Find\" />\n        <IcMenuItem label=\"Delete\" variant=\"destructive\" />\n      </IcPopoverMenu>\n    </>\n  );\n};\n\n<ComponentPreview\n  style={{\n    display: \"flex\",\n    justifyContent: \"center\",\n  }}\n  snippets={snippets}\n>\n  <DemoPopover />\n</ComponentPreview>\n\n## Popover menu details\n\n<ComponentDetails component=\"ic-popover-menu\" />\n\n## Menu item details\n\n<ComponentDetails component=\"ic-menu-item\" />\n\n## Menu group details\n\n<ComponentDetails component=\"ic-menu-group\" />\n\n## Variants\n\n### With button variations\n\nexport const snippetsButtons = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-button \n  id=\"button-2\" \n  variant=\"icon\"\n  title=\"More information\" \n  onclick=\"handleClick()\"\n>\n  <svg\n    slot=\"icon\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    fill=\"currentColor\"\n    class=\"bi bi-three-dots-vertical\"\n    viewBox=\"0 0 16 16\"\n  >\n    <path d=\"M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\" />\n  </svg>\n</ic-button>\n<script>\n  var icPopover = document.querySelector(\"#popover-menu-2\");\n  function handleClick() {\n    icPopover.open = true;\n  }\n</script>\n<div>\n  <ic-popover-menu anchor=\"button-2\" aria-label=\"popover\" id=\"popover-menu-2\">\n    <ic-menu-item label=\"Copy\" disabled=\"true\"></ic-menu-item>\n    <ic-menu-item label=\"Paste\" keyboard-shortcut=\"Cmd + V\"></ic-menu-item>\n    <ic-menu-item label=\"Edit\" description=\"This is used to edit the original.\"></ic-menu-item>\n    <ic-menu-item label=\"Show/Hide\" variant=\"toggle\"></ic-menu-item>\n    <ic-menu-item label=\"Find icons\">\n      <svg\n        slot=\"icon\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        height=\"24px\"\n        viewBox=\"0 0 24 24\"\n        width=\"24px\"\n      >\n        <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n        <path\n          d=\"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\"\n        />\n      </svg>\n    </ic-menu-item>\n    <ic-menu-item label=\"Delete\" disabled=\"true\" variant=\"destructive\"></ic-menu-item>\n    <ic-menu-item label=\"Log out\" variant=\"destructive\"></ic-menu-item>\n  </ic-popover-menu>\n</div>`,\n  },\n  {\n    language: \"React\",\n    snippet: `const handleClick = () => {\n  document.querySelector(\"#popover-menu-2\").open = true;\n};\nreturn (\n  <>\n    <IcButton\n      variant=\"icon\"\n      title=\"More information\"\n      id=\"button-2\"\n      onClick={handleClick}\n    >\n      <SlottedSVG\n        slot=\"icon\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"16\"\n        height=\"16\"\n        fill=\"currentColor\"\n        class=\"bi bi-three-dots-vertical\"\n        viewBox=\"0 0 16 16\"\n      >\n        <path d=\"M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\" />\n      </SlottedSVG>\n    </IcButton>\n    <IcPopoverMenu anchor=\"button-2\" aria-label=\"popover\" id=\"popover-menu-2\">\n      <IcMenuItem label=\"Copy\" disabled />\n      <IcMenuItem label=\"Paste\" keyboardShortcut=\"Cmd + V\" />\n      <IcMenuItem label=\"Edit\" description=\"This is used to edit the original.\" />\n      <IcMenuItem label=\"Show/Hide\" variant=\"toggle\" />\n      <IcMenuItem label=\"Find icons\">\n          <SlottedSVG\n              slot=\"icon\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              height=\"24px\"\n              viewBox=\"0 0 24 24\"\n              width=\"24px\"\n          >\n              <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n              <path\n              d=\"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\"\n              />\n          </SlottedSVG>\n      </IcMenuItem>\n      <IcMenuItem label=\"Delete\" disabled variant=\"destructive\" />\n      <IcMenuItem label=\"Log out\" variant=\"destructive\" />\n    </IcPopoverMenu>\n  </>\n);`,\n  },\n];\n\nexport const ButtonsPopover = () => {\n  const handleClick = () => {\n    document.querySelector(\"#popover-menu-2\").open = true;\n  };\n  return (\n    <>\n      <IcButton\n        variant=\"icon\"\n        title=\"More information\"\n        id=\"button-2\"\n        onClick={handleClick}\n      >\n        <svg\n          slot=\"icon\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"16\"\n          height=\"16\"\n          fill=\"currentColor\"\n          class=\"bi bi-three-dots-vertical\"\n          viewBox=\"0 0 16 16\"\n        >\n          <path d=\"M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\" />\n        </svg>\n      </IcButton>\n      <IcPopoverMenu anchor=\"button-2\" aria-label=\"popover\" id=\"popover-menu-2\">\n        <IcMenuItem label=\"Copy\" disabled />\n        <IcMenuItem label=\"Paste\" keyboardShortcut=\"Cmd + V\" />\n        <IcMenuItem\n          label=\"Edit\"\n          description=\"This is used to edit the original.\"\n        />\n        <IcMenuItem label=\"Show/Hide\" variant=\"toggle\" />\n        <IcMenuItem label=\"Find icons\">\n          <svg\n            slot=\"icon\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            height=\"24px\"\n            viewBox=\"0 0 24 24\"\n            width=\"24px\"\n          >\n            <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n            <path d=\"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\" />\n          </svg>\n        </IcMenuItem>\n        <IcMenuItem label=\"Delete\" disabled variant=\"destructive\" />\n        <IcMenuItem label=\"Log out\" variant=\"destructive\" />\n      </IcPopoverMenu>\n    </>\n  );\n};\n\n<ComponentPreview\n  style={{\n    display: \"flex\",\n    justifyContent: \"center\",\n  }}\n  snippets={snippetsButtons}\n>\n  <ButtonsPopover />\n</ComponentPreview>\n\n### With menu groups\n\nexport const snippetsGroups = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-button \n  id=\"button-3\" \n  variant=\"icon\"\n  title=\"More information\" \n  onclick=\"handleClick()\"\n>\n  <svg\n    slot=\"icon\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    fill=\"currentColor\"\n    class=\"bi bi-three-dots-vertical\"\n    viewBox=\"0 0 16 16\"\n  >\n    <path d=\"M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\" />\n  </svg>\n</ic-button>\n<script>\n  var icPopover = document.querySelector(\"#popover-menu-3\");\n  function handleClick() {\n    icPopover.open = true;\n  }\n</script>\n<div>\n  <ic-popover-menu anchor=\"button-3\" aria-label=\"popover\" id=\"popover-menu-3\">\n    <ic-menu-group label=\"Edit options\">\n      <ic-menu-item label=\"Copy\" disabled=\"true\"></ic-menu-item>\n      <ic-menu-item label=\"Paste\" keyboard-shortcut=\"Cmd + V\"></ic-menu-item>\n    </ic-menu-group>\n    <ic-menu-group>\n      <ic-menu-item label=\"Format\"></ic-menu-item>\n      <ic-menu-item label=\"Help\"></ic-menu-item>\n    <ic-menu-group>\n  </ic-popover-menu>\n</div>`,\n  },\n  {\n    language: \"React\",\n    snippet: `const handleClick = () => {\n  document.querySelector(\"#popover-menu-3\").open = true;\n};\nreturn (\n  <>\n    <IcButton\n      variant=\"icon\"\n      title=\"More information\"\n      id=\"button-3\"\n      onClick={handleClick}\n    >\n      <SlottedSVG\n        slot=\"icon\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"16\"\n        height=\"16\"\n        fill=\"currentColor\"\n        class=\"bi bi-three-dots-vertical\"\n        viewBox=\"0 0 16 16\"\n      >\n        <path d=\"M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\" />\n      </SlottedSVG>\n    </IcButton>\n    <IcPopoverMenu anchor=\"button-3\" aria-label=\"popover\" id=\"popover-menu-3\">\n      <IcMenuGroup label=\"Edit options\">\n        <IcMenuItem label=\"Copy\" disabled />\n        <IcMenuItem label=\"Paste\" keyboardShortcut=\"Cmd + V\" />\n      </IcMenuGroup>\n      <IcMenuGroup>\n        <IcMenuItem label=\"Format\" />\n        <IcMenuItem label=\"Help\" />\n      </IcMenuGroup>\n    </IcPopoverMenu>\n  </>\n);`,\n  },\n];\n\nexport const GroupsPopover = () => {\n  const handleClick = () => {\n    document.querySelector(\"#popover-menu-3\").open = true;\n  };\n  return (\n    <>\n      <IcButton\n        variant=\"icon\"\n        title=\"More information\"\n        id=\"button-3\"\n        onClick={handleClick}\n      >\n        <svg\n          slot=\"icon\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"16\"\n          height=\"16\"\n          fill=\"currentColor\"\n          class=\"bi bi-three-dots-vertical\"\n          viewBox=\"0 0 16 16\"\n        >\n          <path d=\"M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\" />\n        </svg>\n      </IcButton>\n      <IcPopoverMenu anchor=\"button-3\" aria-label=\"popover\" id=\"popover-menu-3\">\n        <IcMenuGroup label=\"Edit options\">\n          <IcMenuItem label=\"Copy\" disabled />\n          <IcMenuItem label=\"Paste\" keyboardShortcut=\"Cmd + V\" />\n        </IcMenuGroup>\n        <IcMenuGroup>\n          <IcMenuItem label=\"Format\" />\n          <IcMenuItem label=\"Help\" />\n        </IcMenuGroup>\n      </IcPopoverMenu>\n    </>\n  );\n};\n\n<ComponentPreview\n  style={{\n    display: \"flex\",\n    justifyContent: \"center\",\n  }}\n  snippets={snippetsGroups}\n>\n  <GroupsPopover />\n</ComponentPreview>\n",
      "path": "/components/popover-menu/code",
      "date": "2023-03-31",
      "title": "Popover menu",
      "status": "BETA",
      "subTitle": "Use popover menus to place actions inside a menu that overlays other page content when opened.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/popover-menu",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/popover-menu"
        },
        {
          "title": "Code",
          "path": "/components/popover-menu/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/popover-menu/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/popover-menu/code.mdx",
        "createdAt": "2023-04-14T11:24:28.621Z",
        "lastModified": "2023-04-14T11:24:28.621Z",
        "size": 13512,
        "formattedSize": "13.2 KB"
      }
    },
    {
      "id": "components__popover-menu__guidancex",
      "contents": "\nimport { IcPopoverMenu, IcMenuItem, IcButton } from \"@ukic/react\";\nimport popoverFig1 from \"./images/fig-1-use-popover-menu-to-house-secondary-actions.png\";\nimport popoverFig2 from \"./images/fig-2-dont-use-popover-menu-for-few-actions.png\";\nimport popoverFig3 from \"./images/fig-3-set-maxheight-to-force-scroll.png\";\nimport popoverFig4 from \"./images/fig-4-position-menus-in-available-space.png\";\nimport popoverFig5 from \"./images/fig-5-menu-buttons-with-different-elements.png\";\nimport popoverFig6 from \"./images/fig-6-menu-toggle-buttons.png\";\nimport popoverFig7 from \"./images/fig-7-menu-groups.png\";\nimport popoverVid1 from \"./images/anim-1-popover-menu-interaction.mp4\";\nimport popoverVid2 from \"./images/anim-2-sub-menu-interaction.mp4\";\nimport popoverVid3 from \"./images/anim-3-avoid-nested-sub-menus.mp4\";\n\n## Introduction\n\nClick on the 'More Information' button below to view an example of the popover menu component.\n\nexport const IntroPopover = () => {\n  const handleClick = () => {\n    document.querySelector(\"#popover-menu\").open = true;\n  };\n  return (\n    <>\n      <IcButton\n        variant=\"icon\"\n        title=\"More information\"\n        id=\"button-1\"\n        onClick={handleClick}\n      >\n        <svg\n          slot=\"icon\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"16\"\n          height=\"16\"\n          fill=\"currentColor\"\n          class=\"bi bi-three-dots-vertical\"\n          viewBox=\"0 0 16 16\"\n        >\n          <path d=\"M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\" />\n        </svg>\n      </IcButton>\n      <IcPopoverMenu anchor=\"button-1\" aria-label=\"popover\" id=\"popover-menu\">\n        <IcMenuItem label=\"Copy code\" />\n        <IcMenuItem label=\"Paste code\" />\n        <IcMenuItem label=\"Actions\" submenuTriggerFor=\"actions\" />\n      </IcPopoverMenu>\n      <IcPopoverMenu submenuId=\"actions\">\n        <IcMenuItem label=\"Edit\" />\n        <IcMenuItem label=\"Find\" />\n        <IcMenuItem label=\"Delete\" variant=\"destructive\" />\n      </IcPopoverMenu>\n    </>\n  );\n};\n\n<ComponentPreview\n  style={{\n    display: \"flex\",\n    justifyContent: \"center\",\n  }}\n>\n  <IntroPopover />\n</ComponentPreview>\n\n## When to use\n\nUse a popover menu to place multiple actions behind a single trigger. This is especially useful when there is not enough space to include all actions on the base page. Popover menus are commonly used for ‘More actions’ and often triggered using an icon button.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={popoverFig1}\n    imageAlt=\"A popover menu with edit and view options using a mix of menu items, menu groups and menu toggle items.\"\n    state=\"good\"\n    caption=\"Use popover menus to contain multiple actions.\"\n  />\n</DoubleDoDontCaution>\n\n## When not to use\n\nDon’t use a popover menu if there are only a small number of actions. Consider if the actions can be better placed on the page itself.\n\nAvoid placing important actions in popover menus as these may be missed. Instead, use popover menus to house secondary or less important actions and place your most important actions on the page itself.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={popoverFig2}\n    imageAlt=\"A popover menu with two options for edit and download. Plenty of space is available on the background interface to display these options.\"\n    state=\"bad\"\n    caption=\"Avoid using popover menus with few actions, or with important actions.\"\n  />\n</DoubleDoDontCaution>\n\nDon’t include any other content within a popover menu other than the elements described in this page. If additional information is required about an action, consider using a [dialog](/components/dialog) instead.\n\n## Interaction behaviour\n\nWhen you click a trigger element, a popover menu appears. Make sure to associate the popover menu with a trigger and ensure that the trigger can be actioned via any input mode.\n\nWhen you click a menu item within a popover menu, the popover menu will hide and the menu item’s associated action will be triggered.\n\n<video\n  class=\"half-width\"\n  muted\n  controls\n  loop\n  title=\"An animation showing a popover menu that appears after clicking a ‘more’ button. The menu is closed when a menu item is clicked.\"\n>\n  <source src={popoverVid1} type=\"video/mp4\" />\n</video>\n\n### Sizing\n\nBy default, popover menus expand vertically to hug their contents. Set a max-height on the popover menu to constrain the height and allow the menu to scroll. Avoid setting the width of the popover menu to be greater than the available viewport.\n\n<DoDontCaution\n  imageSrc={popoverFig3}\n  imageAlt=\"Two examples of popover menus. The first displays all menu items within the menu container. The second example shows the same menu items, but with some hidden due to a smaller menu container. A scroll bar allows the menu to be scrolled.\"\n  state=\"good\"\n  caption=\"Set a max-height to constrain the height of the menu and cause its contents to scroll.\"\n/>\n\n### Layout and placement\n\nPopover menus appear adjacent to their triggering element. By default, they appear below and aligned to the left of the trigger element. However, if no space is available, the popover menu will appear above or aligned to the right of the trigger element.\n\n<DoDontCaution\n  imageSrc={popoverFig4}\n  imageAlt=\"Two examples of popover menus. The first example shows the menu aligned to the left of the screen. The second shows the menu aligned to the right.\"\n  state=\"good\"\n  caption=\"Popover menus position themselves based on the available space.\"\n/>\n\n## Content\n\nPopover menus contain menu items, menu toggle items, menu groups and menu sections.\n\n### Labels\n\nFollow the [content style](/styles/content-style) guidelines when writing labels and keep them concise but specific.\n\nAlways specify an accessible label for the menu items. The accessible label can include more detail than is described in the visible label.\n\nFor example, a menu item may have a visible label which reads ‘Edit’. The accessible label may read ‘Edit record’. This includes more information to aid assistive technology users.\n\n### Icons\n\nUse an icon on a menu item to provide additional meaning or to aid in recognition. Menu items, menu toggle items and parent menu items can display an icon.\n\nMake sure that the icon is understandable and relevant to the action.\n\nAlways provide alternative descriptions for icons if they aren't decorative. Only use icons if they are necessary.\n\n### Menu items\n\nUse the \"default\" variant of menu items for single actions that do not have a selection status.\n\nAdd an additional description to a menu item to provide additional context. Keep the description concise and consider if the action is too complicated if too much information is required to describe the action.\n\nIf a keyboard shortcut is available for a menu item’s action, then display it using the keyboard shortcut label.\n\nUse the \"destructive\" variant of a menu item to highlight a destructive action. Position destructive actions at the bottom of a popover menu.\n\nSpecify a menu item as a parent if it has children that appear in a sub-menu. When clicked, the sub-menu will slide into view.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={popoverFig5}\n    imageAlt=\"A popover menu showing a set of edit options that include icons and keyboard shortcuts alongside their labels.\"\n    state=\"good\"\n    caption=\"Use menu items for single actions. Add an icon or a description to provide more context. Highlight keyboard shortcuts using the keyboard shortcut label.\"\n  />\n</DoubleDoDontCaution>\n\n### Menu toggle items\n\nUse the \"toggle\" variant of menu items for actions that provide an ability to toggle something on or off. Menu toggle items will display a checkmark when toggled on and hide it when toggled off.\n\nLike default menu items, provide an icon or a description to add additional context if required.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={popoverFig6}\n    imageAlt=\"A popover menu containing two menu toggle items. Their labels read ‘Show/Hide’ and ‘Lock/Unlock’ and display a tick indicating that they are toggled on.\"\n    state=\"good\"\n    caption=\"Use menu toggle items to show a selection state alongside the action.\"\n  />\n</DoubleDoDontCaution>\n\n### Menu groups\n\nUse menu groups to organise menu items into sections within the popover menu. Provide a label for the menu group to describe its contents. Alternatively, leave the menu group label blank if a description is unnecessary.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={popoverFig7}\n    imageAlt=\" A popover menu with a menu group for ‘Edit options’, a menu group for ‘View options’, an untitled menu group containing unrelated actions, and a final untitled menu group containing destructive actions.\"\n    state=\"good\"\n    caption=\"Use menu groups to create sections within a popover menu.\"\n  />\n</DoubleDoDontCaution>\n\n### Parent menu items\n\nUse a parent menu item to open sub-menus that include more menu items. Use this to contain similar actions or options relating to the menu group name.\n\n<video\n  class=\"half-width\"\n  muted\n  controls\n  loop\n  title=\"An animation showing a popover menu with a parent menu item titled ‘Zoom’. A sub-menu containing menu items for different zoom levels is opened after the ‘zoom’ parent menu item is clicked. After the back button is clicked in the sub-menu the main menu is displayed again.\"\n>\n  <source src={popoverVid2} type=\"video/mp4\" />\n</video>\n\n### Sub-menus\n\nUse a sub-menu to contain a parent menu item’s children items. Use sub-menus for multiple related actions that are opened from the main menu.\n\nThe sub-menu displays the same label as the parent menu item. Clicking the back button in a sub-menu will return the user to the parent menu item in the main menu.\n\nUse menu items, toggle menu items, menu groups or parent menu items in a sub-menu but avoid nesting too many levels of sub-menus as this can be confusing to navigate.\n\n<video\n  class=\"half-width\"\n  muted\n  controls\n  loop\n  title=\"An animation showing a popover menu that contains four parent menu items each with nested parent menu items in their sub-menus. The user clicks ‘help options’ to go into the sub-menu, then clicks ‘information’ to go into a second sub-menu, then clicks ‘tutorials’ to go into a third sub-menu.\"\n>\n  <source src={popoverVid3} type=\"video/mp4\" />\n</video>\n\n## Accessibility considerations\n\nWhen specifying the trigger element for a popover menu, make use of ‘aria-expanded’ and ‘aria-collapsed’ so that a screen reader announces the appearance of the popover menu.\n",
      "path": "/components/popover-menu",
      "navPriority": 15,
      "date": "2023-03-31",
      "title": "Popover menu",
      "status": "BETA",
      "subTitle": "Use popover menus to place actions inside a menu that overlays other page content when opened.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/popover-menu",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/popover-menu"
        },
        {
          "title": "Code",
          "path": "/components/popover-menu/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/popover-menu/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/popover-menu/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.621Z",
        "lastModified": "2023-04-14T11:24:28.621Z",
        "size": 11202,
        "formattedSize": "10.9 KB"
      }
    },
    {
      "id": "components__radio__accessibilityx",
      "contents": "\n## Easy to use for everyone\n\nWhen interacting with a radio button on a keyboard, the **tab** key moves the focus to the radio group. Once focus is on the radio group, the **arrow** keys move between the radio options. When tabbing to a radio group with an option already selected, the focus is applied to the selected option. Moving through the other radio options using the arrow keys automatically selects the focused option.\n\nWhen tabbing to a radio group with no option selected, the focus is applied to the first option in the group without selecting the option. The unselected radio button can be selected using the **space** key when the radio button is focused.\n\nWhen conditional fields are displayed beneath radio buttons, the conditional field acts as the child of the radio button. When the field is dynamically displayed after selecting a radio button, then it should be announced by the screen reader as required based on the user’s current selection. Tabbing on from the radio group should move focus to the dynamically displayed field, and then onwards through the rest of the tab index.\n\n## For Assistive Technology\n\nA container of radio buttons uses the aria role `radiogroup`, with each individual radio identified as `radio` and uses the `aria-checked` property to denote selection.\n\nRadio buttons always use a label to ensure that their visible text label is announced alongside the radio button.\n\n## Based on\n\nThe radio component has been based on the following resources:\n\n- [Aria radio practices examples](https://www.w3.org/TR/2016/WD-wai-aria-practices-1.1-20160317/examples/radio/radio.html), W3, accessed March 2022.\n- [Radio buttons](https://www.a11y-101.com/development/radio-buttons), a11y-101, accessed March 2022.\n- [Aria radio role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/radio_role#keyboard_interactions), MDN web docs, accessed March 2022.\n- [Radio button component](https://design-system.service.gov.uk/components/radios/), Government Design System, accessed March 2022.\n- [Radio buttons: Select one by default or leave all unselected](https://www.nngroup.com/articles/radio-buttons-default-selection/), Nielsen Norman Group, accessed June 2014.\n\n## Testing\n\nWe’ve tested this component against WCAG 2.1 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/radio/accessibility",
      "date": "2023-02-03",
      "title": "Radio button",
      "status": "BETA",
      "subTitle": "Radio buttons let people select a single option from a list.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/radio",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/radio"
        },
        {
          "title": "Code",
          "path": "/components/radio/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/radio/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/radio/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.633Z",
        "lastModified": "2023-04-14T11:24:28.633Z",
        "size": 2877,
        "formattedSize": "2.8 KB"
      }
    },
    {
      "id": "components__radio__codex",
      "contents": "\nimport { IcRadioGroup, IcRadioOption, IcTextField } from \"@ukic/react\";\n\n## Component demo\n\nexport const snippets = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-radio-group name='radio-group-1' label=\"Add a free purchase with any hot drink.\">\n  <ic-radio-option value=\"crisps\" label=\"Crisps\"></ic-radio-option>\n  <ic-radio-option\n    value=\"cookie\"\n    label=\"Deluxe chocolate chip cookie (sold out)\"\n    disabled=\"true\"\n    inactive=\"true\" \n  >\n  </ic-radio-option>\n  <ic-radio-option value=\"fruit\" label=\"Banana\"></ic-radio-option>\n  <ic-radio-option value=\"No item\" label=\"No thanks, just my coffee\"></ic-radio-option>\n</ic-radio-group>\n<script>\n  const radioGroup = document.querySelector(\"[name='radio-group-1']\");\n  radioGroup.addEventListener('icChange', (ev) => console.log(ev.detail.value));\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcRadioGroup name='radio-group-1' label=\"Add a free purchase with any hot drink.\" onIcChange={(ev) => console.log(ev.detail.value)}>\n  <IcRadioOption value=\"crisps\" label=\"Crisps\" />\n  <IcRadioOption\n    value=\"cookie\"\n    label=\"Deluxe chocolate chip cookie (sold out)\"\n    disabled\n    inactive\n  />\n  <IcRadioOption value=\"fruit\" label=\"Banana\" />\n  <IcRadioOption value=\"No item\" label=\"No thanks, just my coffee\" />\n</IcRadioGroup>`,\n  },\n];\n\n<ComponentPreview style={{ marginTop: \"24px\" }} snippets={snippets}>\n  <IcRadioGroup\n    name=\"radio-group-1\"\n    label=\"Add a free purchase with any hot drink.\"\n    onIcChange={(ev) => console.log(ev.detail.value)}\n  >\n    <IcRadioOption value=\"crisps\" label=\"Crisps\" />\n    <IcRadioOption\n      value=\"cookie\"\n      label=\"Deluxe chocolate chip cookie (sold out)\"\n      disabled\n      inactive\n    />\n    <IcRadioOption value=\"fruit\" label=\"Banana\" />\n    <IcRadioOption value=\"No item\" label=\"No thanks, just my coffee\" />\n  </IcRadioGroup>\n</ComponentPreview>\n\n## Radio group details\n\n<ComponentDetails component=\"ic-radio-group\" />\n\n## Radio option details\n\n<ComponentDetails component=\"ic-radio-option\" />\n\n## Variants\n\n### Conditional\n\nexport const conditional = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-radio-group name='radio-group-2' label=\"Do you have any special requests?\">\n    <ic-radio-option value=\"request\" label=\"Yes, I want to modify my order\">\n      <ic-text-field\n        slot=\"additional-field\"\n        label=\"Please provide some additional information\"\n        placeholder=\"i.e Soya milk please\"\n      >\n      </ic-text-field>\n    </ic-radio-option>\n    <ic-radio-option value=\"none\" label=\"No, standard please\"></ic-radio-option>\n</ic-radio-group>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcRadioGroup name='radio-group-2' label=\"Do you have any special requests?\">\n    <IcRadioOption value=\"request\" label=\"Yes, I want to modify my order\">\n      <IcTextField\n        slot=\"additional-field\"\n        label=\"Please provide some additional information\"\n        placeholder=\"i.e Soya milk please\"\n      />\n    </IcRadioOption>\n    <IcRadioOption value=\"none\" label=\"No, standard please\" />\n</IcRadioGroup>`,\n  },\n];\n\n<ComponentPreview style={{ marginTop: \"24px\" }} snippets={conditional}>\n  <IcRadioGroup name=\"radio-group-2\" label=\"Do you have any special requests?\">\n    <IcRadioOption value=\"request\" label=\"Yes, I want to modify my order\">\n      <IcTextField\n        slot=\"additional-field\"\n        label=\"Please provide some additional information\"\n        placeholder=\"i.e Soya milk please\"\n      />\n    </IcRadioOption>\n    <IcRadioOption value=\"none\" label=\"No, standard please\" />\n  </IcRadioGroup>\n</ComponentPreview>\n\n### Conditional dynamic\n\nexport const conditionalDynamic = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-radio-group name='radio-group-3' label=\"Do you have any special requests?\">\n    <ic-radio-option value=\"request\" label=\"Yes, I want to modify my order\">\n      <ic-text-field\n        slot=\"additional-field\"\n        label=\"Please provide some additional information\"\n        placeholder=\"i.e Soya milk please\"\n      >\n    </ic-text-field>\n    </ic-radio-option>\n    <ic-radio-option value=\"none\" label=\"No, standard please\"></ic-radio-option>\n</ic-radio-group>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcRadioGroup name='radio-group-3' label=\"Do you have any special requests?\">\n    <IcRadioOption value=\"request\" label=\"Yes, I want to modify my order\">\n      <IcTextField\n        slot=\"additional-field\"\n        label=\"Please provide some additional information\"\n        placeholder=\"i.e Soya milk please\"\n      />\n    </IcRadioOption>\n    <IcRadioOption value=\"none\" label=\"No, standard please\" />\n</IcRadioGroup>`,\n  },\n];\n\n<ComponentPreview style={{ marginTop: \"24px\" }} snippets={conditionalDynamic}>\n  <IcRadioGroup name=\"radio-group-3\" label=\"Do you have any special requests?\">\n    <IcRadioOption\n      additionalFieldDisplay=\"dynamic\"\n      value=\"request\"\n      label=\"Yes, I want to modify my order\"\n    >\n      <IcTextField\n        slot=\"additional-field\"\n        label=\"Please provide some additional information\"\n        placeholder=\"i.e Soya milk please\"\n      />\n    </IcRadioOption>\n    <IcRadioOption value=\"none\" label=\"No, standard please\" />\n  </IcRadioGroup>\n</ComponentPreview>\n\n### With helper text\n\nexport const withHelperText = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-radio-group \n  label=\"Do you have any special requests?\" \n  helper-text=\"Let us know if you'd like an alternative to dairy milk\"\n  name='radio-group-4'\n>\n  <ic-radio-option value=\"request\" label=\"Yes, I want to modify my order\"></ic-radio-option>\n  <ic-radio-option value=\"none\" label=\"No, standard please\"></ic-radio-option>\n</ic-radio-group>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcRadioGroup \n    label=\"Do you have any special requests?\" \n    helperText=\"Helper text\"\n    name='radio-group-4'\n>\n  <IcRadioOption value=\"request\" label=\"Yes, I want to modify my order\" />\n  <IcRadioOption value=\"none\" label=\"No, standard please\" />\n</IcRadioGroup>`,\n  },\n];\n\n<ComponentPreview style={{ marginTop: \"24px\" }} snippets={withHelperText}>\n  <IcRadioGroup\n    label=\"Do you have any special requests?\"\n    helperText=\"Let us know if you'd like an alternative to dairy milk\"\n    name=\"radio-group-4\"\n  >\n    <IcRadioOption value=\"request\" label=\"Yes, I want to modify my order\" />\n    <IcRadioOption value=\"none\" label=\"No, standard please\" />\n  </IcRadioGroup>\n</ComponentPreview>\n\n### With validation\n\nexport const withValidation = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-radio-group name='radio-group-5' label=\"Do you have any special requests?\" validation-status=\"error\" validation-text=\"An answer to this question is required\" required=\"true\">\n  <ic-radio-option value=\"request\" label=\"Yes, I want to modify my order\"></ic-radio-option>\n  <ic-radio-option value=\"none\" label=\"No, standard please\"></ic-radio-option>\n</ic-radio-group>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcRadioGroup name='radio-group-5' label=\"Do you have any special requests?\" validationStatus=\"error\" validationText=\"An answer to this question is required\" required>\n  <IcRadioOption value=\"request\" label=\"Yes, I want to modify my order\" />\n  <IcRadioOption value=\"none\" label=\"No, standard please\" />\n</IcRadioGroup>`,\n  },\n];\n\n<ComponentPreview style={{ marginTop: \"24px\" }} snippets={withValidation}>\n  <IcRadioGroup\n    label=\"Do you have any special requests?\"\n    validationStatus=\"error\"\n    validationText=\"An answer to this question is required\"\n    required\n    name=\"radio-group-5\"\n  >\n    <IcRadioOption value=\"request\" label=\"Yes, I want to modify my order\" />\n    <IcRadioOption value=\"none\" label=\"No, standard please\" />\n  </IcRadioGroup>\n</ComponentPreview>\n",
      "path": "/components/radio/code",
      "date": "2023-02-06",
      "title": "Radio button",
      "status": "BETA",
      "subTitle": "Radio buttons let people select a single option from a list.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/radio",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/radio"
        },
        {
          "title": "Code",
          "path": "/components/radio/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/radio/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/radio/code.mdx",
        "createdAt": "2023-04-14T11:24:28.633Z",
        "lastModified": "2023-04-14T11:24:28.633Z",
        "size": 8180,
        "formattedSize": "8.0 KB"
      }
    },
    {
      "id": "components__radio__guidancex",
      "contents": "\nimport { IcRadioGroup, IcRadioOption } from \"@ukic/react\";\nimport radioFig1 from \"./images/fig-1-do-not-use-a-radio-button-group-to-allow-multiple-selected-options-from-a-list.png\";\nimport radioFig2 from \"./images/fig-2-use-a-checkbox-group-to-allow-multiple-sections-from-a-list.png\";\nimport radioFig3 from \"./images/fig-3-do-not-use-radio-buttons-to-turn-something-on-or-off.png\";\nimport radioFig4 from \"./images/fig-4-use-a-switch-to-toggle-something-on-or-off.png\";\nimport radioFig5 from \"./images/fig-5-always-display-radio-buttons-as-a-stack-when-there-are-more-than-two-options.png\";\nimport radioFig6 from \"./images/fig-6-do-not-display-radio-groups-with-more-than-two-options-in-a-row.png\";\nimport radioFig7 from \"./images/fig-7-display-radio-buttons-as-a-stack-or-in-a-row-when-radio-groups-have-two-options.png\";\nimport radioFig8 from \"./images/fig-8-when-there-is-an-issue-show-an-error-message-next-to-the-entire-radio-group.png\";\nimport radioFig9 from \"./images/fig-9-error-validation-shown-correctly-on-the-field-causing-the-error.png\";\nimport radioFig10 from \"./images/fig-10-only-display-the-error-on-the-field-causing-it.png\";\n\n## Introduction\n\nAn example of the radio button component.\n\n<ComponentPreview style={{ marginTop: \"24px\" }}>\n  <IcRadioGroup label=\"Add a free purchase with any hot drink.\" name=\"snacks\">\n    <IcRadioOption value=\"crisps\" label=\"Crisps\" />\n    <IcRadioOption\n      value=\"cookie\"\n      label=\"Deluxe chocolate chip cookie (sold out)\"\n      disabled\n      inactive\n    />\n    <IcRadioOption value=\"fruit\" label=\"Banana\" />\n    <IcRadioOption value=\"No item\" label=\"No thanks, just my coffee\" />\n  </IcRadioGroup>\n</ComponentPreview>\n\n## When to use\n\nUse radio buttons in a radio button group to present a set of selectable options.\n\nUse radio buttons when only one option can be selected from a list.\n\nUse a radio button with a conditional field to display a related additional element when that radio button is selected. The conditional field can be set to static so that it is always visible and becomes enabled once the radio button is selected. If the conditional field is set to dynamic the field is only displayed when the radio button is selected.\n\n## When not to use\n\nDon’t use radio buttons on their own, they should always appear as part of a radio button group.\n\nDon’t use radio buttons when the user can select multiple options from the list. Use [checkboxes](/components/checkboxes) instead.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={radioFig1}\n    imageAlt=\"A radio button group titled ‘What are your favourite coffees?’ with two out of six radio buttons showing as selected.\"\n    state=\"bad\"\n    caption=\"Don’t use a radio button group to allow multiple selected options from a list.\"\n  />\n  <DoDontCaution\n    imageSrc={radioFig2}\n    imageAlt=\"A checkbox group titled ‘What are your favourite coffees?’ with two out of six checkboxes selected.\"\n    state=\"good\"\n    caption=\"Use a checkbox group to allow multiple sections from a list.\"\n  />\n</DoubleDoDontCaution>\n\nDon’t use radio buttons to turn something on or off. Use a [switch](/components/switch) instead.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={radioFig3}\n    imageAlt=\"A two option radio button group with the label ‘Turn on the coffee machine?’ with options for ‘On’ and ‘Off’.\"\n    state=\"bad\"\n    caption=\"Don’t use radio buttons to turn something on or off.\"\n  />\n  <DoDontCaution\n    imageSrc={radioFig4}\n    imageAlt=\"Two switches under the heading 'equipment'. One switch is toggled on whilst the other is off.\"\n    state=\"good\"\n    caption=\"Use a switch to toggle something on or off.\"\n  />\n</DoubleDoDontCaution>\n\n## Interaction behaviour\n\nIn most circumstances set a default selected option from a radio button group to help people understand that something must be selected, and to expedite the completion of the input using the commonly preferred option.\n\nAlternatively, use a radio button group without a default selected option to force people to select an option before moving on. This eliminates bias towards a single option and avoids people skipping over the question by leaving the default selection.\n\n### Sizing\n\nUse small sized radio button groups to achieve compact layouts. Always use small sized components with other small sized components.\n\n### Layout and placement\n\nStack radio buttons when there are more than two options.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={radioFig5}\n    imageAlt=\"A radio button group titled ‘What milk would you like?’ with three radio buttons for ‘dairy’, ‘soya’ and ‘nut’ stacked vertically.\"\n    state=\"good\"\n    caption=\"Always display radio buttons as a stack when there are more than two options.\"\n  />\n</DoubleDoDontCaution>\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={radioFig6}\n    imageAlt=\"A radio button group asking ‘What milk would you like?’ and showing three options for ‘Dairy’, ‘Soya’  and ‘Nut’ displayed in a row.\"\n    state=\"bad\"\n    caption=\"Don’t display radio button groups with more than two options in a row.\"\n  />\n</DoubleDoDontCaution>\n\nIf there are only two options, you can display them either stacked or in a row.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={radioFig7}\n    imageAlt=\"A radio button group asking ‘Would you like a coffee?’ with radio buttons for ‘Yes’ and ‘No’ displayed in a row. A second radio button group asking ‘What milk would you like?’ with radio buttons for ‘Dairy’ and ‘Soya’ displayed stacked.\"\n    state=\"good\"\n    caption=\"Display radio buttons as a stack or in a row when radio button groups have two options.\"\n  />\n</DoubleDoDontCaution>\n\n### Validation\n\nThere are two types of errors that can occur on a radio button: a radio button input error or an error on a radio button's conditional field.\n\nA radio button input error is when the radio button group itself is responsible for the error. This is shown using the radio button error state.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={radioFig8}\n    imageAlt=\"A radio button group displayed with no radio button selected with an error message reading ‘Please select an option’.\"\n    state=\"good\"\n    caption=\"When there’s an issue show an error message next to the entire radio button group.\"\n  />\n</DoubleDoDontCaution>\n\nFor errors on a radio button’s conditional field, the error is shown only on the conditional field itself and not on the parent radio button group component.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={radioFig9}\n    imageAlt=\"A graphic showing a radio button group with four options and an error reading ‘Answer required’ displayed with an empty input field that is a conditional field of one of the radio buttons.\"\n    state=\"good\"\n    caption=\"Error validation shown correctly on the field causing the error.\"\n  />\n  <DoDontCaution\n    imageSrc={radioFig10}\n    imageAlt=\"A graphic showing two error labels incorrectly applied to a radio button group. One error reading ‘Answer required’ is displayed with an empty input field that is the conditional field of a radio button. The other error, also reading ‘Answer required’ is displayed with the whole radio button group.\"\n    state=\"bad\"\n    caption=\"Only display the error on the field causing it. Don’t display an error on the field as well as the radio group.\"\n  />\n</DoubleDoDontCaution>\n\n## Content\n\n### Labels\n\nFollow the [content style guidelines](/styles/content-style) for radio button group labels as well as each individual radio button label. Use the radio button group label to ask the question, and use the radio button labels to provide possible answers.\n\n## Related components\n\n- [Checkbox](/components/checkboxes)\n",
      "path": "/components/radio",
      "navPriority": 16,
      "date": "2023-02-03",
      "title": "Radio button",
      "status": "BETA",
      "subTitle": "Radio buttons let people select a single option from a list.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/radio",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/radio"
        },
        {
          "title": "Code",
          "path": "/components/radio/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/radio/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/radio/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.633Z",
        "lastModified": "2023-04-14T11:24:28.633Z",
        "size": 8270,
        "formattedSize": "8.1 KB"
      }
    },
    {
      "id": "components__search-bar__accessibilityx",
      "contents": "\nimport searchBarFig7 from \"./images/fig-7-correct-tab-order.png\";\n\n## Easy to use for everyone\n\nPlacing a close button within the search field when input has been added enhances the accessibility of the component, allowing users to easily remove input and correct their search query without performing multiple actions. Including a visible search button as well as having an associated event with the input field provides multiple ways to search using the keyboard as well as the mouse.\n\nThe search variant that shows suggested options provides additional help from an accessibility perspective as it allows users to perform searches quickly without needing to fully enter their input. This is a form of autocomplete and has been made accessible using the keyboard, including **Home** and **End**, as well as the **Esc** key. This is also configured so when there isn’t enough space in the viewport for the dropdown list to fully display beneath the dropdown bar, it's displayed above the input bar.\n\nThe focus order through the search field internal elements is as follows:\n\n1. The search field and its option list.\n2. The clear button (if visible).\n3. The search button (if enabled).\n\nKeyboard users can move focus through options in the drop list using the arrow keys, whilst they can still type into the field to change their search term.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={searchBarFig7}\n    imageAlt=\"A graphic highlighting the tab order between elements in a search field. The search input is annotated with a '1', the close buttons with a '2', and the search button with a '3'.\"\n    state=\"none\"\n    caption=\"Focus is applied first to the input field and its option list, then moves to the close button if visible and search button.\"\n  />\n</DoubleDoDontCaution>\n\nThe first item in the drop list is focused by default so that if a user clicked the search button or the enter button, the associated action with that option would be triggered. This might be a link to a page, or filling the search field with the selected suggestion.\n\n## For Assistive Technology\n\nWhen focus is received on the component, the screen-reader will announce a hint explaining how you can move up and down in the dropdown list using the **up**/**down** arrow keys.\n\nWhen the search is complete, an `aria-live` announcement is used to announce the number of results in the list.\n\n## Based on\n\nThe search bar component has been based on the following resources:\n\n- [Best practices for the accessibility of an autocompletion component](https://a11y-guidelines.orange.com/en/articles/autocomplete-component/), Orange, accessed July 2022.\n- [Accessible Search Form](https://www.a11ymatters.com/pattern/accessible-search/), a11ymatters, accessed July 2022.\n- [ARIA: search role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/search_role), MDN web docs, accessed July 2022.\n\n## Testing\n\nWe've tested this component against WCAG 2.1 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/search-bar/accessibility",
      "date": "2023-02-03",
      "title": "Search bar",
      "status": "BETA",
      "subTitle": "The search bar allows users to search for information using keywords or phrases.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/search-bar",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/search-bar"
        },
        {
          "title": "Code",
          "path": "/components/search-bar/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/search-bar/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/search-bar/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.633Z",
        "lastModified": "2023-04-14T11:24:28.633Z",
        "size": 3596,
        "formattedSize": "3.5 KB"
      }
    },
    {
      "id": "components__search-bar__codex",
      "contents": "\nimport { IcSearchBar } from \"@ukic/react\";\n\n## Component demo\n\nexport const snippets = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-search-bar label=\"What is your favourite coffee?\"></ic-search-bar>\n<script>\n  const searchBar = document.querySelector(\"ic-search-bar\");\n  searchBar.options = [\n    { label: \"Espresso\", value: \"espresso\" },\n    { label: \"Double Espresso\", value: \"doubleespresso\" },\n    { label: \"Flat White\", value: \"flatwhite\" },\n    { label: \"Cappuccino\", value: \"cappuccino\" },\n    { label: \"Americano\", value: \"americano\" },\n    { label: \"Mocha\", value: \"mocha\" },\n  ];\n  searchBar.addEventListener('icChange', (ev) => console.log(ev.detail.value));\n  searchBar.addEventListener('icSubmitSearch', (ev) => console.log(ev.detail.value))\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSearchBar\n  label=\"What is your favourite coffee?\"\n  options={[\n    { label: \"Espresso\", value: \"espresso\" },\n    { label: \"Double Espresso\", value: \"doubleespresso\" },\n    { label: \"Flat White\", value: \"flatwhite\" },\n    { label: \"Cappuccino\", value: \"cappuccino\" },\n    { label: \"Americano\", value: \"americano\" },\n    { label: \"Mocha\", value: \"mocha\" },\n  ]}\n  onIcChange={(ev) => console.log(ev.detail.value)}\n  onIcSubmitSearch={(ev) => console.log(ev.detail.value)}\n/>`,\n  },\n];\n\n<ComponentPreview snippets={snippets}>\n  <IcSearchBar\n    label=\"What is your favourite coffee?\"\n    options={[\n      { label: \"Espresso\", value: \"espresso\" },\n      { label: \"Double Espresso\", value: \"doubleespresso\" },\n      { label: \"Flat White\", value: \"flatwhite\" },\n      { label: \"Cappuccino\", value: \"cappuccino\" },\n      { label: \"Americano\", value: \"americano\" },\n      { label: \"Mocha\", value: \"mocha\" },\n    ]}\n    onIcChange={(ev) => console.log(\"onIcChange\", ev.detail.value)}\n    onIcSubmitSearch={(ev) => console.log(\"onIcSubmitSearch\", ev.detail.value)}\n  />\n</ComponentPreview>\n\n## Search bar details\n\n<ComponentDetails component=\"ic-search-bar\" />\n\n## Variants\n\n### With options (no filtering)\n\nexport const optionsNoFiltering = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-search-bar\n  label=\"What is your favourite coffee?\"\n  disable-filter=\"true\"\n>\n</ic-search-bar>\n<br>\n<ic-typography>\n  All options will be displayed as you type\n</ic-typography>\n<script>\n  document.querySelector(\"ic-search-bar\").options = [\n    { label: \"Espresso\", value: \"espresso\" },\n    { label: \"Double Espresso\", value: \"doubleespresso\" },\n    { label: \"Flat White\", value: \"flatwhite\" },\n    { label: \"Cappuccino\", value: \"cappuccino\" },\n    { label: \"Americano\", value: \"americano\" },\n    { label: \"Mocha\", value: \"mocha\" },\n  ];\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSearchBar\n  label=\"What is your favourite coffee?\"\n  disableFilter\n  options={[\n    { label: \"Espresso\", value: \"espresso\" },\n    { label: \"Double Espresso\", value: \"doubleespresso\" },\n    { label: \"Flat White\", value: \"flatwhite\" },\n    { label: \"Cappuccino\", value: \"cappuccino\" },\n    { label: \"Americano\", value: \"americano\" },\n    { label: \"Mocha\", value: \"mocha\" },\n  ]}\n/>\n<br/>\n<IcTypography>All options will be displayed as you type</IcTypography>`,\n  },\n];\n\n<ComponentPreview\n  snippets={optionsNoFiltering}\n  style={{ flexDirection: \"column\", alignItems: \"center\" }}\n>\n  <IcSearchBar\n    label=\"What is your favourite coffee?\"\n    disableFilter\n    options={[\n      { label: \"Espresso\", value: \"espresso\" },\n      { label: \"Double Espresso\", value: \"doubleespresso\" },\n      { label: \"Flat White\", value: \"flatwhite\" },\n      { label: \"Cappuccino\", value: \"cappuccino\" },\n      { label: \"Americano\", value: \"americano\" },\n      { label: \"Mocha\", value: \"mocha\" },\n    ]}\n  />\n  <br />\n  <IcTypography variant=\"p\">\n    All options will be displayed as you type\n  </IcTypography>\n</ComponentPreview>\n\n### With helper text\n\nexport const withHelperText = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-search-bar\n  label=\"What is your favourite coffee?\"\n  helper-text=\"Some helper text\"\n>\n</ic-search-bar>\n<script>\n  document.querySelector(\"ic-search-bar\").options = [\n    { label: \"Espresso\", value: \"espresso\" },\n    { label: \"Double Espresso\", value: \"doubleespresso\" },\n    { label: \"Flat White\", value: \"flatwhite\" },\n    { label: \"Cappuccino\", value: \"cappuccino\" },\n    { label: \"Americano\", value: \"americano\" },\n    { label: \"Mocha\", value: \"mocha\" },\n  ];\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSearchBar\n  label=\"What is your favourite coffee?\"\n  helperText=\"Some helper text\"\n  options={[\n    { label: \"Espresso\", value: \"espresso\" },\n    { label: \"Double Espresso\", value: \"doubleespresso\" },\n    { label: \"Flat White\", value: \"flatwhite\" },\n    { label: \"Cappuccino\", value: \"cappuccino\" },\n    { label: \"Americano\", value: \"americano\" },\n    { label: \"Mocha\", value: \"mocha\" },\n  ]}\n/>`,\n  },\n];\n\n<ComponentPreview snippets={withHelperText}>\n  <IcSearchBar\n    label=\"What is your favourite coffee?\"\n    helperText=\"Some helper text\"\n    options={[\n      { label: \"Espresso\", value: \"espresso\" },\n      { label: \"Double Espresso\", value: \"doubleespresso\" },\n      { label: \"Flat White\", value: \"flatwhite\" },\n      { label: \"Cappuccino\", value: \"cappuccino\" },\n      { label: \"Americano\", value: \"americano\" },\n      { label: \"Mocha\", value: \"mocha\" },\n    ]}\n  />\n</ComponentPreview>\n\n### With hidden label\n\nexport const withHiddenLabel = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-search-bar label=\"What is your favourite coffee?\" hide-label=\"true\"\n>\n</ic-search-bar>\n<script>\n  const searchBar = document.querySelector(\"ic-search-bar\");\n  searchBar.options = [\n    { label: \"Espresso\", value: \"espresso\" },\n    { label: \"Double Espresso\", value: \"doubleespresso\" },\n    { label: \"Flat White\", value: \"flatwhite\" },\n    { label: \"Cappuccino\", value: \"cappuccino\" },\n    { label: \"Americano\", value: \"americano\" },\n    { label: \"Mocha\", value: \"mocha\" },\n  ];\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSearchBar\n  label=\"What is your favourite coffee?\"\n  hideLabel\n  options={[\n    { label: \"Espresso\", value: \"espresso\" },\n    { label: \"Double Espresso\", value: \"doubleespresso\" },\n    { label: \"Flat White\", value: \"flatwhite\" },\n    { label: \"Cappuccino\", value: \"cappuccino\" },\n    { label: \"Americano\", value: \"americano\" },\n    { label: \"Mocha\", value: \"mocha\" },\n  ]}\n/>`,\n  },\n];\n\n<ComponentPreview snippets={withHiddenLabel}>\n  <IcSearchBar\n    label=\"What is your favourite coffee?\"\n    hideLabel\n    options={[\n      { label: \"Espresso\", value: \"espresso\" },\n      { label: \"Double Espresso\", value: \"doubleespresso\" },\n      { label: \"Flat White\", value: \"flatwhite\" },\n      { label: \"Cappuccino\", value: \"cappuccino\" },\n      { label: \"Americano\", value: \"americano\" },\n      { label: \"Mocha\", value: \"mocha\" },\n    ]}\n  />\n</ComponentPreview>\n\n### Disabled\n\nexport const disabled = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-search-bar label=\"What is your favourite coffee?\" disabled=\"true\"\n>\n</ic-search-bar>\n<script>\n  const searchBar = document.querySelector(\"ic-search-bar\");\n  searchBar.options = [\n    { label: \"Espresso\", value: \"espresso\" },\n    { label: \"Double Espresso\", value: \"doubleespresso\" },\n    { label: \"Flat White\", value: \"flatwhite\" },\n    { label: \"Cappuccino\", value: \"cappuccino\" },\n    { label: \"Americano\", value: \"americano\" },\n    { label: \"Mocha\", value: \"mocha\" },\n  ];\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSearchBar\n  label=\"What is your favourite coffee?\"\n  disabled\n  options={[\n    { label: \"Espresso\", value: \"espresso\" },\n    { label: \"Double Espresso\", value: \"doubleespresso\" },\n    { label: \"Flat White\", value: \"flatwhite\" },\n    { label: \"Cappuccino\", value: \"cappuccino\" },\n    { label: \"Americano\", value: \"americano\" },\n    { label: \"Mocha\", value: \"mocha\" },\n  ]}\n/>`,\n  },\n];\n\n<ComponentPreview snippets={disabled}>\n  <IcSearchBar\n    label=\"What is your favourite coffee?\"\n    disabled\n    options={[\n      { label: \"Espresso\", value: \"espresso\" },\n      { label: \"Double Espresso\", value: \"doubleespresso\" },\n      { label: \"Flat White\", value: \"flatwhite\" },\n      { label: \"Cappuccino\", value: \"cappuccino\" },\n      { label: \"Americano\", value: \"americano\" },\n      { label: \"Mocha\", value: \"mocha\" },\n    ]}\n  />\n</ComponentPreview>\n\n## Custom filtering example\n\nThis example shows how to filter data asynchronously when the value in the input field changes. The data is mocked and displayed after a one second delay, but could be replaced with a call to an API or database.\n\nexport const customFiltering = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-search-bar \n  label=\"What is your favourite coffee?\" \n  debounce=\"300\" \n  disable-filter=\"true\">\n</ic-search-bar>\n<script>\n  var mockData = [\n    { label: \"Espresso\", value: \"espresso\" },\n    { label: \"Double Espresso\", value: \"doubleespresso\" },\n    { label: \"Flat White\", value: \"flatwhite\" },\n    { label: \"Cappuccino\", value: \"cappucino\" },\n    { label: \"Americano\", value: \"americano\" },\n    { label: \"Mocha\", value: \"mocha\" },\n  ];\n  var select = document.querySelector(\"ic-search-bar\");\n  select.addEventListener(\"icChange\", function (event) {\n    const searchFor = event.detail.value;\n    if (searchFor.length > 1) {\n      mockAPI = (query) => {\n        filteredResults = mockData.filter((item) =>\n          item.label.toLowerCase().includes(query.toLowerCase())\n        );\n        return new Promise((resolve) => {\n          setTimeout(() => resolve(filteredResults), 1000)\n        });\n      };\n      mockAPI(searchFor).then((newResults) => { select.options = newResults });\n    } else {\n      select.options = [];\n    }\n  });\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `const mockData = [\n  { label: \"Espresso\", value: \"espresso\" },\n  { label: \"Double Espresso\", value: \"doubleespresso\" },\n  { label: \"Flat White\", value: \"flatwhite\" },\n  { label: \"Cappuccino\", value: \"cappucino\" },\n  { label: \"Americano\", value: \"americano\" },\n  { label: \"Mocha\", value: \"mocha\" },\n];\nconst [results, setResults] = useState([]);\nconst changeHandler = (event) =>{\n  const searchFor = event.detail.value;\n  if (searchFor.length > 1) {\n    const mockAPI = (query) => {\n      const filteredResults = mockData.filter((item) =>\n        item.label.toLowerCase().includes(query.toLowerCase())\n      );\n      return new Promise((resolve) => {\n        setTimeout(() => resolve(filteredResults), 1000);\n      });\n    };\n    mockAPI(searchFor).then((newResults) => setResults(newResults));\n  } else {\n    setResults([]);\n  }\n}\n<IcSearchBar label=\"What is your favourite coffee?\"\n  debounce=\"300\"\n  disableFilter\n  options={results}\n  onIcChange={changeHandler}\n/>`,\n  },\n];\n\nexport const CustomFilterExample = () => {\n  const mockData = [\n    { label: \"Espresso\", value: \"espresso\" },\n    { label: \"Double Espresso\", value: \"doubleespresso\" },\n    { label: \"Flat White\", value: \"flatwhite\" },\n    { label: \"Cappuccino\", value: \"cappucino\" },\n    { label: \"Americano\", value: \"americano\" },\n    { label: \"Mocha\", value: \"mocha\" },\n  ];\n  const [results, setResults] = React.useState([]);\n  const changeHandler = (event) => {\n    const searchFor = event.detail.value;\n    if (searchFor.length > 1) {\n      const mockAPI = (query) => {\n        const filteredResults = mockData.filter((item) =>\n          item.label.toLowerCase().includes(query.toLowerCase())\n        );\n        return new Promise((resolve) => {\n          setTimeout(() => resolve(filteredResults), 1000);\n        });\n      };\n      mockAPI(searchFor).then((newResults) => setResults(newResults));\n    } else {\n      setResults([]);\n    }\n  };\n  return (\n    <IcSearchBar\n      label=\"What is your favourite coffee?\"\n      debounce=\"300\"\n      disableFilter\n      options={results}\n      onIcChange={changeHandler}\n    />\n  );\n};\n\n<ComponentPreview snippets={customFiltering}>\n  <CustomFilterExample />\n</ComponentPreview>\n",
      "path": "/components/search-bar/code",
      "date": "2023-02-06",
      "title": "Search bar",
      "status": "BETA",
      "subTitle": "The search bar allows users to search for information using keywords or phrases.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/search-bar",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/search-bar"
        },
        {
          "title": "Code",
          "path": "/components/search-bar/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/search-bar/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/search-bar/code.mdx",
        "createdAt": "2023-04-14T11:24:28.633Z",
        "lastModified": "2023-04-14T11:24:28.633Z",
        "size": 12463,
        "formattedSize": "12.2 KB"
      }
    },
    {
      "id": "components__search-bar__guidancex",
      "contents": "\nimport { IcSearchBar } from \"@ukic/react\";\nimport searchBarFig1 from \"./images/fig-1-dont-display-large-numbers-of-search-results-in-droplist.png\";\nimport searchBarFig3 from \"./images/fig-3-search-field-with-helpful-placeholder.png\";\nimport searchBarFig4 from \"./images/fig-4-search-field-with-unhelpful-placeholder.png\";\nimport searchBarFig5 from \"./images/fig-5-suggested-options-loading-state.png\";\nimport searchBarFig6 from \"./images/fig-6-suggested-options-empty-state.png\";\n\n## Introduction\n\nAn example of the search bar component.\n\n<ComponentPreview>\n  <IcSearchBar label=\"What is your favourite coffee?\" />\n</ComponentPreview>\n\n## When to use\n\n### Search bar with results\n\nUse the search bar with search results for automatically displaying search results relating to the input query in the input field. Use this for searching through a known data set, such as a site search displaying individual pages as the search results (like the search on this website).\n\nSearch for an ‘espresso’ below in the search bar example.\n\n<ComponentPreview>\n  <IcSearchBar\n    label=\"What is your favourite coffee?\"\n    options={[\n      { label: \"Espresso\", value: \"espresso\" },\n      { label: \"Double Espresso\", value: \"doubleespresso\" },\n      { label: \"Flat White\", value: \"flatwhite\" },\n      { label: \"Cappuccino\", value: \"cappuccino\" },\n      { label: \"Americano\", value: \"americano\" },\n      { label: \"Mocha\", value: \"mocha\" },\n    ]}\n  />\n</ComponentPreview>\n\n### Search bar with suggested options\n\nUse the search bar with suggested options to provide search term suggestions in the drop-list. Use this type of search when you don't want to show actual search results, but instead possible or common search terms which will form the search query when submitted.\n\nUsers may select a suggested option or they may continue with searching on the term they have entered.\n\nWhen displaying suggested options, order them in the most helpful way and use the same formatting for each option presented.\n\n### Search bar only\n\nUse a search bar without a drop-list when you want to handle the search operation yourself. Use this to capture a search term and then direct a user to a custom search results page for the input query.\n\n<ComponentPreview>\n  <IcSearchBar label=\"What is your favourite coffee?\" />\n</ComponentPreview>\n\n## When not to use\n\nDon't use a search bar with search results if you are likely to need additional filters and advanced search settings. It's better to use a search bar with a custom search results page in this case.\n\nTake care when using a search bar with search results when you have large, complex data sets that take time to load. This can cause excessive loading times and it's best to use a custom search results page to handle and display large numbers of results.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={searchBarFig1}\n    imageAlt=\"A search bar with a large number of results causing long scroll length.\"\n    state=\"bad\"\n    caption=\"Avoid showing long lists of results in a search bar's search results.\"\n  />\n</DoubleDoDontCaution>\n\nDon't use a search bar on its own, or a search bar with suggested options, if you don't have a method of displaying the results. Always include a search results page if you aren't using the search bar with search results.\n\n## Sizing\n\nUse the default and small size options for search bars to match their size to other components in your app.\n\n## Content\n\nUse clear and specific placeholder text which informs the user on the context and scope of the search.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={searchBarFig3}\n    imageAlt=\"An example of helpful search placeholder text outlining 'search coffee drinks'.\"\n    state=\"good\"\n    caption=\"Use helpful placeholder text within a search bar to describe what the user is searching for.\"\n  />\n  <DoDontCaution\n    imageSrc={searchBarFig4}\n    imageAlt=\"An example of unhelpful search placeholder text outlining 'coffee'.\"\n    state=\"bad\"\n    caption=\"Don't use generic placeholder text.\"\n  />\n</DoubleDoDontCaution>\n\nFor searches that take time to load results or suggestions, display the loading state whilst the search is loading. Use the empty state for searches that have no results or suggested options.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={searchBarFig5}\n    imageAlt=\"A search bar with an entered search term that displays a loading indicator whilst the search is occurring.\"\n    state=\"good\"\n    caption=\"Use the loading state whilst results load.\"\n  />\n  <DoDontCaution\n    imageSrc={searchBarFig6}\n    imageAlt=\"A search bar with an entered search term that has no search results.\"\n    state=\"good\"\n    caption=\"Tell the user when their search term yields no results.\"\n  />\n</DoubleDoDontCaution>\n",
      "path": "/components/search-bar",
      "navPriority": 17,
      "date": "2023-02-03",
      "title": "Search bar",
      "status": "BETA",
      "subTitle": "A search bar is a special input field that allows users to search for information using keywords or phrases.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/search-bar",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/search-bar"
        },
        {
          "title": "Code",
          "path": "/components/search-bar/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/search-bar/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/search-bar/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.633Z",
        "lastModified": "2023-04-14T11:24:28.633Z",
        "size": 5313,
        "formattedSize": "5.2 KB"
      }
    },
    {
      "id": "components__section-container__accessibilityx",
      "contents": "\n## Easy to use for everyone\n\nSection containers align content on the page which helps to form a constant edge from which to read from. This aids swift readability as a user can scan back to the same position to start the next line of content. It supports standard reading scanning patterns by creating a consistent baseline.\n\nThe width of a section container is contrained to a maximum width on large devices in order to keep the line length to a readable size.\n\nConsistent alignment also reduces cognitive load when trying to understand content on a page and helps to associate elements to one another through proximity and symmetry.\n\n## Based on\n\n- [Text Scanning Patterns: Eyetracking Evidence (nngroup.com)](https://nngroup.com), accessed December 2022\n- [What are the Gestalt Principles? | IxDF (interaction-design.org)](https://interaction-design.org), accessed December 2022\n\n## Testing\n\nWe’ve tested this component against WCAG 2.1 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/section-container/accessibility",
      "date": "2023-02-03",
      "title": "Section container",
      "status": "BETA",
      "subTitle": "Use the section container component to consistently align content within an app.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/section-container",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/section-container"
        },
        {
          "title": "Code",
          "path": "/components/section-container/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/section-container/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/section-container/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.637Z",
        "lastModified": "2023-04-14T11:24:28.637Z",
        "size": 1646,
        "formattedSize": "1.6 KB"
      }
    },
    {
      "id": "components__section-container__codex",
      "contents": "\nimport { IcSectionContainer } from \"@ukic/react\";\n\n## Component demo\n\nexport const snippetsDefault = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-section-container style=\"border:1px solid black\">\n  <button type=\"button\">One</button>\n  <button type=\"button\">Two</button>\n  <button type=\"button\">Three</button>\n</ic-section-container>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSectionContainer style={{ border: \"1px solid black\" }}>\n  <button type=\"button\">One</button>\n  <button type=\"button\">Two</button>\n  <button type=\"button\">Three</button>\n</IcSectionContainer>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsDefault}>\n  <IcSectionContainer style={{ border: \"1px solid black\" }}>\n    <button type=\"button\">One</button>\n    <button type=\"button\">Two</button>\n    <button type=\"button\">Three</button>\n  </IcSectionContainer>\n</ComponentPreview>\n\n## Section container details\n\n<ComponentDetails component=\"ic-section-container\" />\n\n## Variants\n\n### Center align\n\nexport const snippetsCenter = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-section-container\n  aligned=\"center\"\n  style=\"border:1px solid black\"\n>\n  <button type=\"button\">One</button>\n  <button type=\"button\">Two</button>\n  <button type=\"button\">Three</button>\n</ic-section-container>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSectionContainer\n  aligned=\"center\"\n  style={{ border: \"1px solid black\" }}\n>\n  <button type=\"button\">One</button>\n  <button type=\"button\">Two</button>\n  <button type=\"button\">Three</button>\n</IcSectionContainer>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsCenter}>\n  <IcSectionContainer aligned=\"center\" style={{ border: \"1px solid black\" }}>\n    <button type=\"button\">One</button>\n    <button type=\"button\">Two</button>\n    <button type=\"button\">Three</button>\n  </IcSectionContainer>\n</ComponentPreview>\n\n### Full-width align\n\nexport const snippetsFullWidth = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-section-container\n  aligned=\"full-width\"\n  style=\"border:1px solid black\"\n>\n  <div style=\"display:flex;justify-content:space-between;\">\n    <button type=\"button\">One</button>\n    <button type=\"button\">Two</button>\n    <button type=\"button\">Three</button>\n  </div>\n</ic-section-container>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSectionContainer \n  aligned=\"full-width\"\n  style={{ border: \"1px solid black\" }}\n>\n  <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n    <button type=\"button\">One</button>\n    <button type=\"button\">Two</button>\n    <button type=\"button\">Three</button>\n  </div>\n</IcSectionContainer>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsFullWidth} style={{ display: \"block\" }}>\n  <IcSectionContainer\n    style={{ border: \"1px solid black\" }}\n    aligned=\"full-width\"\n  >\n    <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n      <button type=\"button\">One</button>\n      <button type=\"button\">Two</button>\n      <button type=\"button\">Three</button>\n    </div>\n  </IcSectionContainer>\n</ComponentPreview>\n\n### Full height\n\nexport const snippetsFullHeight = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-section-container\n  aligned=\"center\"\n  full-height=\"true\"\n  style=\"border:1px solid black\"\n>\n  <button type=\"button\">One</button>\n  <button type=\"button\">Two</button>\n  <button type=\"button\">Three</button>\n</ic-section-container>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSectionContainer \n  aligned=\"center\"\n  fullHeight\n  style={{ border: \"1px solid black\" }}\n>\n  <button type=\"button\">One</button>\n  <button type=\"button\">Two</button>\n  <button type=\"button\">Three</button>\n</IcSectionContainer>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsFullHeight}>\n  <IcSectionContainer\n    aligned=\"center\"\n    fullHeight\n    style={{ border: \"1px solid black\" }}\n  >\n    <button type=\"button\">One</button>\n    <button type=\"button\">Two</button>\n    <button type=\"button\">Three</button>\n  </IcSectionContainer>\n</ComponentPreview>\n",
      "path": "/components/section-container/code",
      "date": "2023-02-03",
      "title": "Section container",
      "status": "BETA",
      "subTitle": "Use the section container component to consistently align content within an app.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/section-container",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/section-container"
        },
        {
          "title": "Code",
          "path": "/components/section-container/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/section-container/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/section-container/code.mdx",
        "createdAt": "2023-04-14T11:24:28.637Z",
        "lastModified": "2023-04-14T11:24:28.637Z",
        "size": 4541,
        "formattedSize": "4.4 KB"
      }
    },
    {
      "id": "components__section-container__gudiancex",
      "contents": "\nimport { IcButton, IcSectionContainer } from \"@ukic/react\";\nimport image1 from \"./images/Fig-1-section-containers-align-content.png\";\nimport image2 from \"./images/Fig-2-full-height-example.png\";\nimport image3 from \"./images/Fig-3-section-containers-align-centre.png\";\nimport image4 from \"./images/Fig-4-section-containers-align-left.png\";\nimport image5 from \"./images/Fig-5-section-containers-align-full-width.png\";\n\n## Introduction\n\nWhen creating a page, use section containers to group content and align the margins with each other as well as other ICDS components.\n\nSection containers are used in ICDS components to control alignment of their content. The following components use section containers with the specified alignments.\n\n- [Top navigation](/components/top-nav): Full-width section container\n- [Footer](/components/footer): Full-width section container\n- [Hero](/components/hero): Centred section container\n- [Page header](/components/page-header): Centred section container\n\n## Component demo\n\n<ComponentPreview style={{ display: \"contents\" }}>\n  <IcSectionContainer style={{ border: \"1px solid black\" }} aligned=\"center\">\n    <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n      <IcButton>One</IcButton>\n      <IcButton>Two</IcButton>\n      <IcButton>Three</IcButton>\n    </div>\n  </IcSectionContainer>\n  <br />\n  <IcSectionContainer style={{ border: \"1px solid black\" }}>\n    <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n      <IcButton>One</IcButton>\n      <IcButton>Two</IcButton>\n      <IcButton>Three</IcButton>\n    </div>\n  </IcSectionContainer>\n  <br />\n  <IcSectionContainer\n    style={{ border: \"1px solid black\" }}\n    aligned=\"full-width\"\n  >\n    <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n      <IcButton>One</IcButton>\n      <IcButton>Two</IcButton>\n      <IcButton>Three</IcButton>\n    </div>\n  </IcSectionContainer>\n</ComponentPreview>\n\n## When to use\n\nUse a section container to group multiple elements and align them on a page. Use multiple section containers to ensure alignment between them all.\n\n<DoDontCaution\n  imageSrc={image1}\n  imageAlt=\"A page showing section containers used to align content to the centre of the viewport.\"\n  caption=\"Use section containers maintain alignment across a page.\"\n/>\n\n## When not to use\n\nAvoid nesting section containers as it can be difficult to maintain alignment. Instead, use multiple section containers to align each group of content differently.\n\n## Sizing\n\nThe size of the section container changes dependent on the size of the viewport. The margins and maximum width of the container are automatically set so that the content will respond to changes in the viewport.\n\nMake a section container full height to remove the vertical padding and help align vertical content more easily.\n\n<DoDontCaution\n  imageSrc={image2}\n  imageAlt=\"Two section containers. The first section container has vertical padding included at the top and bottom of the container, whereas the second section container is full-height and has no vertical padding.\"\n  caption=\"Make section containers full height to remove vertical padding and easily space content vertically.\"\n/>\n\n## Layout and placement\n\nUse the alignment properties of the section container to change how they align with the viewport.\n\nUse centre alignment to position the section container in the centre of the viewport.\n\n<DoDontCaution\n  imageSrc={image3}\n  imageAlt=\"An example of a page with three section containers with centred alignment appearing in the middle of the viewport.\"\n  caption=\"Section containers using centred alignment.\"\n/>\n\nUse left alignment to position the section container to the left of the viewport.\n\n<DoDontCaution\n  imageSrc={image4}\n  imageAlt=\"An example of a page with three section containers with left alignment appearing to the left of the viewport.\"\n  caption=\"Section containers using left alignment.\"\n/>\n\nUse full-width alignment to make the section container span the full width of the viewport.\n\n<DoDontCaution\n  imageSrc={image5}\n  imageAlt=\"An example of a page with three section containers with full-width alignment stretching to the edges of the viewport.\"\n  caption=\"Section containers using full-width alignment.\"\n/>\n\n## Content\n\nGroup any combination of content within a section container. Align the content relative to the section container. By default content is aligned to the left, but overide this to create custom internal layouts, whilst having the section align automatically with other containers on the page.\n\n## Future work on this component\n\n- Add grids to section container to align internal content.\n\n## Related components\n\n- [Layout and spacing](/styles/layout-spacing)\n",
      "path": "/components/section-container",
      "navPriority": 18,
      "date": "2023-02-03",
      "title": "Section container",
      "status": "BETA",
      "subTitle": "Use the section container component to consistently align content within an app.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/section-container",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/section-container"
        },
        {
          "title": "Code",
          "path": "/components/section-container/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/section-container/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/section-container/gudiance.mdx",
        "createdAt": "2023-04-14T11:24:28.637Z",
        "lastModified": "2023-04-14T11:24:28.637Z",
        "size": 5305,
        "formattedSize": "5.2 KB"
      }
    },
    {
      "id": "components__select__accessibilityx",
      "contents": "\n## Easy to use for everyone\n\nWe've made sure that you can use the select component with a keyboard, including **home** and **end**, as well as the **esc** key. Options in the dropdown list can be accessed with the **up** and **down** arrow keys.\n\nFor the searchable variant, we have included options which allow you to decide the minimum number of characters required before results are returned. This can help show relevant options only. When the query length is less than the required the `aria status` region provides helpful text informing the user they should type in more.\n\n## For Assistive Technology\n\nWhen focus is received on the component, the screen-reader will announce a hint explaining how you can navigate up and down in the dropdown list (with the **up** and **down** arrow keys).\n\nWhen the search (asynchronous or otherwise) is complete, there is an `aria-live` announcement to announce the number of results in the list.\n\n## Based on\n\nThe select component has been based on the following resources:\n\n- [Select your poison](https://www.24a11y.com/2019/select-your-poison/), 24 Accessibility, accessed July 2022.\n- [ARIA: listbox role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/listbox_role), Mozilla, accessed July 2022.\n- [Menus & Menu Buttons](https://inclusive-components.design/menus-menu-buttons/), Inclusive Components, accessed July 2022.\n- [aria-autocomplete](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-autocomplete), Mozilla, accessed July 2022.\n\n## Testing\n\nWe've tested this component against WCAG 2.1 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/select/accessibility",
      "date": "2023-02-03",
      "title": "Select",
      "status": "BETA",
      "subTitle": "Select allows users to select one or more values from a list of options.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/select",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/select"
        },
        {
          "title": "Code",
          "path": "/components/select/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/select/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/select/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.637Z",
        "lastModified": "2023-04-14T11:24:28.637Z",
        "size": 2206,
        "formattedSize": "2.2 KB"
      }
    },
    {
      "id": "components__select__codex",
      "contents": "\nimport { IcSelect } from \"@ukic/react\";\n\n## Component demo\n\nexport const snippets = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-select label=\"What is your favourite coffee?\"></ic-select>\n<script>\n  const select = document.querySelector(\"ic-select\");\n  let option = \"Cappuccino\";\n  select.options = [\n    { label: \"Espresso\", value: \"espresso\" },\n    { label: \"Double Espresso\", value: \"doubleespresso\" },\n    { label: \"Flat White\", value: \"flatwhite\" },\n    { label: \"Cappuccino\", value: \"cappuccino\" },\n    { label: \"Americano\", value: \"americano\" },\n    { label: \"Mocha\", value: \"mocha\" },\n  ];\n  select.addEventListener(\"icChange\", function (event) {\n    console.log(event.detail.value);\n  });\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSelect label=\"What is your favourite coffee?\"\n  options={[\n    { label: \"Espresso\", value: \"espresso\" },\n    { label: \"Double Espresso\", value: \"doubleespresso\" },\n    { label: \"Flat White\", value: \"flatwhite\" },\n    { label: \"Cappuccino\", value: \"cappuccino\" },\n    { label: \"Americano\", value: \"americano\" },\n    { label: \"Mocha\", value: \"mocha\" },\n  ]}\n  onIcChange={(event) => console.log(event.detail.value)}\n/>`,\n  },\n];\n\nexport const SelectExample = () => (\n  <IcSelect\n    label=\"What is your favourite coffee?\"\n    options={[\n      { label: \"Espresso\", value: \"espresso\" },\n      { label: \"Double Espresso\", value: \"doubleespresso\" },\n      { label: \"Flat White\", value: \"flatwhite\" },\n      { label: \"Cappuccino\", value: \"cappuccino\" },\n      { label: \"Americano\", value: \"americano\" },\n      { label: \"Mocha\", value: \"mocha\" },\n    ]}\n    onIcChange={(event) => console.log(event.detail.value)}\n  />\n);\n\n<ComponentPreview snippets={snippets}>\n  <SelectExample />\n</ComponentPreview>\n\n## Select details\n\n<ComponentDetails component=\"ic-select\" />\n\n## Variants\n\n### With clear button, descriptions, helper text and custom placeholder\n\nexport const snippetsWithExtras = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-select label=\"What is your favourite coffee?\" placeholder=\"Placeholder goes here\" helper-text=\"Some helper text\" show-clear-button=\"true\" searchable=\"true\"></ic-select>\n<script>\n  const select = document.querySelector(\"ic-select\");\n  let option = \"Cappuccino\";\n  select.options = [\n    { label: \"Cappuccino\", value: \"cappuccino\", description: \"Coffee frothed up with pressurised steam\" },\n    { label: \"Americano\", value: \"americano\", description: \"Espresso coffee diluted with hot water\" },\n    { label: \"Mocha\", value: \"mocha\", description: \"Coffee with chocolate\" },\n  ];\n  select.addEventListener(\"icChange\", function (event) {\n    console.log(event.detail.value);\n  });\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSelect label=\"What is your favourite coffee?\"\n  options={[\n    { label: \"Cappuccino\", value: \"cappuccino\", description: \"Coffee frothed up with pressurised steam\" },\n    { label: \"Americano\", value: \"americano\", description: \"Espresso coffee diluted with hot water\" },\n    { label: \"Mocha\", value: \"mocha\", description: \"Coffee with chocolate\" },\n  ]}\n  placeholder=\"Placeholder goes here\"\n  helperText=\"Some helper text\"\n  showClearButton\n  searchable\n  onIcChange={(event) => console.log(event.detail.value)}\n/>`,\n  },\n];\n\nexport const SelectExampleWithExtras = () => (\n  <IcSelect\n    label=\"What is your favourite coffee?\"\n    options={[\n      {\n        label: \"Cappuccino\",\n        value: \"cappuccino\",\n        description: \"Coffee frothed up with pressurised steam\",\n      },\n      {\n        label: \"Americano\",\n        value: \"americano\",\n        description: \"Espresso coffee diluted with hot water\",\n      },\n      {\n        label: \"Mocha\",\n        value: \"mocha\",\n        description: \"Coffee with chocolate\",\n      },\n    ]}\n    placeholder=\"Placeholder goes here\"\n    helperText=\"Some helper text\"\n    showClearButton\n    searchable\n    onIcChange={(event) => console.log(event.detail.value)}\n  />\n);\n\n<ComponentPreview snippets={snippetsWithExtras}>\n  <SelectExampleWithExtras />\n</ComponentPreview>\n\n### Disabled\n\nexport const snippetsDisabled = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-select label=\"What is your favourite coffee?\" disabled=\"true\"></ic-select>\n<script>\n  const select = document.querySelector(\"ic-select\");\n  let option = \"Cappuccino\";\n  select.options = [\n    { label: \"Cappuccino\", value: \"cappuccino\" },\n    { label: \"Americano\", value: \"americano\" },\n    { label: \"Mocha\", value: \"mocha\" },\n  ];\n  select.addEventListener(\"icChange\", function (event) {\n    console.log(event.detail.value);\n  });\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSelect label=\"What is your favourite coffee?\"\n  options={[\n    { label: \"Cappuccino\", value: \"cappuccino\" },\n    { label: \"Americano\", value: \"americano\" },\n    { label: \"Mocha\", value: \"mocha\" },\n  ]}\n  disabled\n  onIcChange={(event) => console.log(event.detail.value)}\n/>`,\n  },\n];\n\nexport const SelectExampleDisabled = () => (\n  <IcSelect\n    label=\"What is your favourite coffee?\"\n    options={[\n      { label: \"Cappuccino\", value: \"cappuccino\" },\n      { label: \"Americano\", value: \"americano\" },\n      { label: \"Mocha\", value: \"mocha\" },\n    ]}\n    disabled\n    onIcChange={(event) => console.log(event.detail.value)}\n  />\n);\n\n<ComponentPreview snippets={snippetsDisabled}>\n  <SelectExampleDisabled />\n</ComponentPreview>\n\n### Options disabled\n\nexport const snippetsOptionDisabled = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-select label=\"What is your favourite coffee?\"></ic-select>\n<script>\n  const select = document.querySelector(\"ic-select\");\n  let option = \"Cappuccino\";\n  select.options = [\n    { label: \"Cappuccino\", value: \"cappuccino\" },\n    { label: \"Americano\", value: \"americano\", disabled: true },\n    { label: \"Mocha\", value: \"mocha\" },\n  ];\n  select.addEventListener(\"icChange\", function (event) {\n    console.log(event.detail.value);\n  });\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSelect label=\"What is your favourite coffee?\"\n  options={[\n    { label: \"Cappuccino\", value: \"cappuccino\" },\n    { label: \"Americano\", value: \"americano\", disabled: true },\n    { label: \"Mocha\", value: \"mocha\" },\n  ]}\n  onIcChange={(event) => console.log(event.detail.value)}\n/>`,\n  },\n];\n\nexport const SelectExampleOptionsDisabled = () => (\n  <IcSelect\n    label=\"What is your favourite coffee?\"\n    options={[\n      { label: \"Cappuccino\", value: \"cappuccino\" },\n      { label: \"Americano\", value: \"americano\", disabled: true },\n      { label: \"Mocha\", value: \"mocha\" },\n    ]}\n    onIcChange={(event) => console.log(event.detail.value)}\n  />\n);\n\n<ComponentPreview snippets={snippetsOptionDisabled}>\n  <SelectExampleOptionsDisabled />\n</ComponentPreview>\n\n### Hidden label\n\nexport const snippetsHideLabel = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-select label=\"What is your favourite coffee?\" hide-label=\"true\"></ic-select>\n<script>\n  const select = document.querySelector(\"ic-select\");\n  let option = \"Cappuccino\";\n  select.options = [\n    { label: \"Espresso\", value: \"espresso\" },\n    { label: \"Double Espresso\", value: \"doubleespresso\" },\n    { label: \"Flat White\", value: \"flatwhite\" },\n  ];\n  select.addEventListener(\"icChange\", function (event) {\n    console.log(event.detail.value);\n  });\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSelect label=\"What is your favourite coffee?\"\n  options={[\n    { label: \"Espresso\", value: \"espresso\" },\n    { label: \"Double Espresso\", value: \"doubleespresso\" },\n    { label: \"Flat White\", value: \"flatwhite\" },\n  ]}\n  hideLabel\n  onIcChange={(event) => console.log(event.detail.value)}\n/>`,\n  },\n];\n\nexport const SelectExampleHideLabel = () => (\n  <IcSelect\n    label=\"What is your favourite coffee?\"\n    options={[\n      { label: \"Espresso\", value: \"espresso\" },\n      { label: \"Double Espresso\", value: \"doubleespresso\" },\n      { label: \"Flat White\", value: \"flatwhite\" },\n    ]}\n    hideLabel\n    onIcChange={(event) => console.log(event.detail.value)}\n  />\n);\n\n<ComponentPreview snippets={snippetsHideLabel}>\n  <SelectExampleHideLabel />\n</ComponentPreview>\n\n### Groups\n\nexport const snippetsGroups = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-select label=\"What is your favourite coffee?\"></ic-select>\n<script>\n  const select = document.querySelector(\"ic-select\");\n  let option = \"Cappuccino\";\n  select.options = [\n            {\n              label: \"Fancy\",\n              children: [\n                { label: \"Cappuccino\", value: \"Cap\" },\n                { label: \"Flat white\", value: \"Flat\" },\n              ],\n            },\n            {\n              label: \"Boring\",\n              children: [\n                { label: \"Filter\", value: \"Fil\" },\n                { label: \"Latte\", value: \"Lat\" },\n              ],\n            },\n          ];\n  select.addEventListener(\"icChange\", function (event) {\n    console.log(event.detail.value);\n  });\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSelect label=\"What is your favourite coffee?\"\n  options={[\n    {\n      label: \"Fancy\",\n      children: [\n        { label: \"Cappuccino\", value: \"Cap\" },\n        { label: \"Flat white\", value: \"Flat\" },\n      ],\n    },\n    {\n      label: \"Boring\",\n      children: [\n        { label: \"Filter\", value: \"Fil\" },\n        { label: \"Latte\", value: \"Lat\" },\n      ],\n    },\n  ]}\n  onIcChange={(event) => console.log(event.detail.value)}\n/>`,\n  },\n];\n\nexport const SelectExampleGroups = () => (\n  <IcSelect\n    label=\"What is your favourite coffee?\"\n    options={[\n      {\n        label: \"Fancy\",\n        children: [\n          { label: \"Cappuccino\", value: \"Cap\" },\n          { label: \"Flat white\", value: \"Flat\" },\n        ],\n      },\n      {\n        label: \"Boring\",\n        children: [\n          { label: \"Filter\", value: \"Fil\" },\n          { label: \"Latte\", value: \"Lat\" },\n        ],\n      },\n    ]}\n    onIcChange={(event) => console.log(event.detail.value)}\n  />\n);\n\n<ComponentPreview snippets={snippetsGroups}>\n  <SelectExampleGroups />\n</ComponentPreview>\n\n### Recommended\n\nexport const snippetsRecommended = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-select label=\"What is your favourite coffee?\"></ic-select>\n<script>\n  const select = document.querySelector(\"ic-select\");\n  let option = \"Cappuccino\";\n  select.options = [\n    { label: \"Espresso\", value: \"espresso\" },\n    { label: \"Double Espresso\", value: \"doubleespresso\", recommended: true },\n    { label: \"Flat White\", value: \"flatwhite\" },\n    { label: \"Cappuccino\", value: \"cappuccino\" },\n    { label: \"Americano\", value: \"americano\", recommended: true },\n    { label: \"Mocha\", value: \"mocha\" },\n  ];\n  select.addEventListener(\"icChange\", function (event) {\n    console.log(event.detail.value);\n  });\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSelect label=\"What is your favourite coffee?\"\n  options={[\n    { label: \"Espresso\", value: \"espresso\" },\n    { label: \"Double Espresso\", value: \"doubleespresso\", recommended: true },\n    { label: \"Flat White\", value: \"flatwhite\" },\n    { label: \"Cappuccino\", value: \"cappuccino\" },\n    { label: \"Americano\", value: \"americano\", recommended: true },\n    { label: \"Mocha\", value: \"mocha\" },\n  ]}\n  onIcChange={(event) => console.log(event.detail.value)}\n/>`,\n  },\n];\n\nexport const SelectExampleRecommended = () => (\n  <IcSelect\n    label=\"What is your favourite coffee?\"\n    options={[\n      { label: \"Espresso\", value: \"espresso\" },\n      {\n        label: \"Double Espresso\",\n        value: \"doubleespresso\",\n        recommended: true,\n      },\n      { label: \"Flat White\", value: \"flatwhite\" },\n      { label: \"Cappuccino\", value: \"cappuccino\" },\n      { label: \"Americano\", value: \"americano\", recommended: true },\n      { label: \"Mocha\", value: \"mocha\" },\n    ]}\n    onIcChange={(event) => console.log(event.detail.value)}\n  />\n);\n\n<ComponentPreview snippets={snippetsRecommended}>\n  <SelectExampleRecommended />\n</ComponentPreview>\n\n### Validation\n\nexport const snippetsValidation = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-select label=\"What is your favourite coffee?\" \n    validation-status=\"success\" // also shown above are warning and error\n    validation-text=\"Success message\"></ic-select>\n<script>\n  const select = document.querySelector(\"ic-select\");\n  let option = \"Cappuccino\";\n  select.options = [\n    { label: \"Espresso\", value: \"espresso\" },\n    { label: \"Double Espresso\", value: \"doubleespresso\" },\n    { label: \"Flat White\", value: \"flatwhite\" },\n    { label: \"Cappuccino\", value: \"cappuccino\" },\n    { label: \"Americano\", value: \"americano\" },\n    { label: \"Mocha\", value: \"mocha\" },\n  ];\n  select.addEventListener(\"icChange\", function (event) {\n    console.log(event.detail.value);\n  });\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSelect label=\"What is your favourite coffee?\"\n  options={[\n    { label: \"Espresso\", value: \"espresso\" },\n    { label: \"Double Espresso\", value: \"doubleespresso\" },\n    { label: \"Flat White\", value: \"flatwhite\" },\n    { label: \"Cappuccino\", value: \"cappuccino\" },\n    { label: \"Americano\", value: \"americano\" },\n    { label: \"Mocha\", value: \"mocha\" },\n  ]}\n  validationStatus=\"success\" // also shown above are warning and error\n  validationText=\"Success message\"\n  onIcChange={(event) => console.log(event.detail.value)}\n/>`,\n  },\n];\n\nexport const SelectExampleValidation = () => (\n  <div>\n    <IcSelect\n      label=\"What is your favourite coffee?\"\n      options={[\n        { label: \"Espresso\", value: \"espresso\" },\n        { label: \"Double Espresso\", value: \"doubleespresso\" },\n        { label: \"Flat White\", value: \"flatwhite\" },\n        { label: \"Cappuccino\", value: \"cappuccino\" },\n        { label: \"Americano\", value: \"americano\" },\n        { label: \"Mocha\", value: \"mocha\" },\n      ]}\n      validationStatus=\"success\"\n      validationText=\"Success message\"\n      onIcChange={(event) => console.log(event.detail.value)}\n    />\n    <IcSelect\n      label=\"What is your favourite coffee?\"\n      options={[\n        { label: \"Espresso\", value: \"espresso\" },\n        { label: \"Double Espresso\", value: \"doubleespresso\" },\n        { label: \"Flat White\", value: \"flatwhite\" },\n        { label: \"Cappuccino\", value: \"cappuccino\" },\n        { label: \"Americano\", value: \"americano\" },\n        { label: \"Mocha\", value: \"mocha\" },\n      ]}\n      validationStatus=\"warning\"\n      validationText=\"Warning message\"\n      onIcChange={(event) => console.log(event.detail.value)}\n    />\n    <IcSelect\n      label=\"What is your favourite coffee?\"\n      options={[\n        { label: \"Espresso\", value: \"espresso\" },\n        { label: \"Double Espresso\", value: \"doubleespresso\" },\n        { label: \"Flat White\", value: \"flatwhite\" },\n        { label: \"Cappuccino\", value: \"cappuccino\" },\n        { label: \"Americano\", value: \"americano\" },\n        { label: \"Mocha\", value: \"mocha\" },\n      ]}\n      validationStatus=\"error\"\n      validationText=\"Error message\"\n      onIcChange={(event) => console.log(event.detail.value)}\n    />\n  </div>\n);\n\n<ComponentPreview snippets={snippetsValidation}>\n  <SelectExampleValidation />\n</ComponentPreview>\n\n### Searchable\n\nexport const snippetsSearchable = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-select label=\"What is your favourite coffee?\" searchable=\"true\"></ic-select>\n<script>\n  const select = document.querySelector(\"ic-select\");\n  let option = \"Cappuccino\";\n  select.options = [\n    { label: \"Cappuccino\", value: \"Cap\" },\n    { label: \"Latte\", value: \"Lat\" },\n    { label: \"Americano\", value: \"Ame\" },\n    { label: \"Flat white\", value: \"Fla\" },\n    { label: \"Mocha\", value: \"Moc\" },\n    { label: \"Macchiato\", value: \"Mac\" },\n    { label: \"Café au lait\", value: \"Caf\" },\n    { label: \"Espresso\", value: \"Esp\" },\n    { label: \"Cortado\", value: \"Cor\" },\n    { label: \"Latte macchiato\", value: \"Lam\" },\n  ];\n  select.addEventListener(\"icChange\", function (event) {\n    console.log(event.detail.value);\n  });\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSelect \n  label=\"What is your favourite coffee?\"\n  options={[\n    { label: \"Cappuccino\", value: \"Cap\" },\n    { label: \"Latte\", value: \"Lat\" },\n    { label: \"Americano\", value: \"Ame\" },\n    { label: \"Flat white\", value: \"Fla\" },\n    { label: \"Mocha\", value: \"Moc\" },\n    { label: \"Macchiato\", value: \"Mac\" },\n    { label: \"Café au lait\", value: \"Caf\" },\n    { label: \"Espresso\", value: \"Esp\" },\n    { label: \"Cortado\", value: \"Cor\" },\n    { label: \"Latte macchiato\", value: \"Lam\" },\n  ]}\n  searchable\n  onIcChange={(event) => console.log(event.detail.value)}\n/>`,\n  },\n];\n\nexport const SearchableSelectExample = () => (\n  <IcSelect\n    label=\"What is your favourite coffee?\"\n    options={[\n      { label: \"Cappuccino\", value: \"Cap\" },\n      { label: \"Latte\", value: \"Lat\" },\n      { label: \"Americano\", value: \"Ame\" },\n      { label: \"Flat white\", value: \"Fla\" },\n      { label: \"Mocha\", value: \"Moc\" },\n      { label: \"Macchiato\", value: \"Mac\" },\n      { label: \"Café au lait\", value: \"Caf\" },\n      { label: \"Espresso\", value: \"Esp\" },\n      { label: \"Cortado\", value: \"Cor\" },\n      { label: \"Latte macchiato\", value: \"Lam\" },\n    ]}\n    searchable\n    onIcChange={(event) => console.log(event.detail.value)}\n  />\n);\n\n<ComponentPreview snippets={snippetsSearchable}>\n  <SearchableSelectExample />\n</ComponentPreview>\n\n### Searchable - with descriptions included in search\n\nexport const snippetsSearchableWithDescriptions = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-select \n  label=\"What is your favourite coffee?\" \n  searchable=\"true\" \n  include-description-in-search=\"true\"\n></ic-select>\n<script>\n  const select = document.querySelector(\"ic-select\");\n  let option = \"Cappuccino\";\n  select.options = [\n    { label: \"Cappuccino\", value: \"Cap\", description: \"Coffee frothed up with pressurised steam\" },\n    { label: \"Americano\", value: \"Ame\", description: \"Espresso coffee diluted with hot water\" },\n    { label: \"Mocha\", value: \"Moc\", description: \"Coffee with chocolate\" },\n    { label: \"Latte\", value: \"Lat\", description: \"Milky coffee with one or two shots of espresso\" },\n    { label: \"Flat white\", value: \"Fla\", description: \"Coffee with frothed milk poured over espresso\" },\n    { label: \"Macchiato\", value: \"Mac\", description: \"Espresso coffee topped with steamed milk\" },\n    { label: \"Café au lait\", value: \"Caf\", description: \"Brewed coffee with steamed milk\" },\n    { label: \"Espresso\", value: \"Esp\", description: \"Concentrated form of coffee\" },\n    { label: \"Cortado\", value: \"Cor\", description: \"Coffee cut with milk\" },\n    { label: \"Latte macchiato\", value: \"Lam\", description: \"Espresso coffee with milk and a spoonful of foamed milk\" },\n  ];\n  select.addEventListener(\"icChange\", function (event) {\n    console.log(event.detail.value);\n  });\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSelect \n  label=\"What is your favourite coffee?\"\n  options={[\n    { label: \"Cappuccino\", value: \"Cap\", description: \"Coffee frothed up with pressurised steam\" },\n    { label: \"Americano\", value: \"Ame\", description: \"Espresso coffee diluted with hot water\" },\n    { label: \"Mocha\", value: \"Moc\", description: \"Coffee with chocolate\" },\n    { label: \"Latte\", value: \"Lat\", description: \"Milky coffee with one or two shots of espresso\" },\n    { label: \"Flat white\", value: \"Fla\", description: \"Coffee with frothed milk poured over espresso\" },\n    { label: \"Macchiato\", value: \"Mac\", description: \"Espresso coffee topped with steamed milk\" },\n    { label: \"Café au lait\", value: \"Caf\", description: \"Brewed coffee with steamed milk\" },\n    { label: \"Espresso\", value: \"Esp\", description: \"Concentrated form of coffee\" },\n    { label: \"Cortado\", value: \"Cor\", description: \"Coffee cut with milk\" },\n    { label: \"Latte macchiato\", value: \"Lam\", description: \"Espresso coffee with milk and a spoonful of foamed milk\" },\n  ]}\n  searchable\n  includeDescriptionsInSearch\n  onIcChange={(event) => console.log(event.detail.value)}\n/>`,\n  },\n];\n\nexport const SearchableSelectWithDescriptionsExample = () => (\n  <IcSelect\n    label=\"What is your favourite coffee?\"\n    options={[\n      {\n        label: \"Cappuccino\",\n        value: \"Cap\",\n        description: \"Coffee frothed up with pressurised steam\",\n      },\n      {\n        label: \"Americano\",\n        value: \"Ame\",\n        description: \"Espresso coffee diluted with hot water\",\n      },\n      { label: \"Mocha\", value: \"Moc\", description: \"Coffee with chocolate\" },\n      {\n        label: \"Latte\",\n        value: \"Lat\",\n        description: \"Milky coffee with one or two shots of espresso\",\n      },\n      {\n        label: \"Flat white\",\n        value: \"Fla\",\n        description: \"Coffee with frothed milk poured over espresso\",\n      },\n      {\n        label: \"Macchiato\",\n        value: \"Mac\",\n        description: \"Espresso coffee topped with steamed milk\",\n      },\n      {\n        label: \"Café au lait\",\n        value: \"Caf\",\n        description: \"Brewed coffee with steamed milk\",\n      },\n      {\n        label: \"Espresso\",\n        value: \"Esp\",\n        description: \"Concentrated form of coffee\",\n      },\n      { label: \"Cortado\", value: \"Cor\", description: \"Coffee cut with milk\" },\n      {\n        label: \"Latte macchiato\",\n        value: \"Lam\",\n        description: \"Espresso coffee with milk and a spoonful of foamed milk\",\n      },\n    ]}\n    searchable\n    includeDescriptionsInSearch\n    onIcChange={(event) => console.log(event.detail.value)}\n  />\n);\n\n<ComponentPreview snippets={snippetsSearchableWithDescriptions}>\n  <SearchableSelectWithDescriptionsExample />\n</ComponentPreview>\n\n### Searchable - with group titles included in search\n\nexport const snippetsSearchableWithGroups = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-select \n  label=\"What is your favourite coffee?\" \n  searchable=\"true\" \n  include-group-titles-in-search=\"true\"\n></ic-select>\n<script>\n  const select = document.querySelector(\"ic-select\");\n  let option = \"Cappuccino\";\n  select.options = [\n    {\n      label: \"Fancy\",\n      children: [\n        { label: \"Cappuccino\", value: \"Cap\" },\n        { label: \"Flat white\", value: \"Flat\" },\n        { label: \"Mocha\", value: \"Moc\" },\n        { label: \"Macchiato\", value: \"Mac\" },\n        { label: \"Cortado\", value: \"Cor\" },\n        { label: \"Latte macchiato\", value: \"Lam\" },\n      ],\n    },\n    {\n      label: \"Boring\",\n      children: [\n        { label: \"Filter\", value: \"Fil\" },\n        { label: \"Latte\", value: \"Lat\" },\n        { label: \"Americano\", value: \"Ame\" },\n        { label: \"Espresso\", value: \"Esp\" },\n      ],\n    },\n  ];\n  select.addEventListener(\"icChange\", function (event) {\n    console.log(event.detail.value);\n  });\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSelect \n  label=\"What is your favourite coffee?\"\n  options={[\n    {\n      label: \"Fancy\",\n      children: [\n        { label: \"Cappuccino\", value: \"Cap\" },\n        { label: \"Flat white\", value: \"Flat\" },\n        { label: \"Mocha\", value: \"Moc\" },\n        { label: \"Macchiato\", value: \"Mac\" },\n        { label: \"Cortado\", value: \"Cor\" },\n        { label: \"Latte macchiato\", value: \"Lam\" },\n      ],\n    },\n    {\n      label: \"Boring\",\n      children: [\n        { label: \"Filter\", value: \"Fil\" },\n        { label: \"Latte\", value: \"Lat\" },\n        { label: \"Americano\", value: \"Ame\" },\n        { label: \"Espresso\", value: \"Esp\" },\n      ],\n    },\n  ]}\n  searchable\n  includeGroupTitlesInSearch\n  onIcChange={(event) => console.log(event.detail.value)}\n/>`,\n  },\n];\n\nexport const SearchableSelectWithGroupsExample = () => (\n  <IcSelect\n    label=\"What is your favourite coffee?\"\n    options={[\n      {\n        label: \"Fancy\",\n        children: [\n          { label: \"Cappuccino\", value: \"Cap\" },\n          { label: \"Flat white\", value: \"Flat\" },\n          { label: \"Mocha\", value: \"Moc\" },\n          { label: \"Macchiato\", value: \"Mac\" },\n          { label: \"Cortado\", value: \"Cor\" },\n          { label: \"Latte macchiato\", value: \"Lam\" },\n        ],\n      },\n      {\n        label: \"Boring\",\n        children: [\n          { label: \"Filter\", value: \"Fil\" },\n          { label: \"Latte\", value: \"Lat\" },\n          { label: \"Americano\", value: \"Ame\" },\n          { label: \"Espresso\", value: \"Esp\" },\n        ],\n      },\n    ]}\n    searchable\n    includeGroupTitlesInSearch\n    onIcChange={(event) => console.log(event.detail.value)}\n  />\n);\n\n<ComponentPreview snippets={snippetsSearchableWithGroups}>\n  <SearchableSelectWithGroupsExample />\n</ComponentPreview>\n\n## Custom filtering example\n\nThis example shows how to filter data asynchronously when the value in the select field changes. The data is mocked and displayed after a one second delay, but could be replaced with a call to an API or database.\n\nexport const customFiltering = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-select\n  label=\"What is your favourite coffee?\"\n  searchable=\"true\"\n  debounce=\"300\"\n  disable-filter=\"true\"\n  id=\"external-filter-select\"\n  characters-until-suggestions=\"2\"\n></ic-select>\n<script>\n  const mockData = [\n    { label: \"Espresso\", value: \"Esp\" },\n    { label: \"Double Espresso\", value: \"Dou\" },\n    { label: \"Cappuccino\", value: \"Cap\" },\n    { label: \"Latte\", value: \"Lat\" },\n    { label: \"Americano\", value: \"Ame\" },\n    { label: \"Filter\", value: \"Fil\" },\n    { label: \"Flat white\", value: \"Fla\" },\n    { label: \"Mocha\", value: \"Moc\" },\n    { label: \"Macchiato\", value: \"Mac\" },\n  ];\n  const select = document.querySelector(\"#external-filter-select\");\n  let selectedValue = \"\";\n  select.addEventListener(\"icClear\", function (event) {\n    select.options = [];\n  });\n  select.addEventListener(\"icOptionSelect\", function (event) {\n    selectedValue = event.detail.value;\n  });\n  select.addEventListener(\"icChange\", function (event) {\n    const value = event.detail.value;\n    console.log(value);\n    if (value !== selectedValue) {\n      if (value && value.length > 1) {\n        mockAPI = (query) => {\n          filteredResults = mockData.filter((item) =>\n            item.label.toLowerCase().includes(query.toLowerCase())\n          );\n          return new Promise((resolve) =>\n            setTimeout(() => resolve(filteredResults), 1000)\n          );\n        };\n        mockAPI(value).then((results) => {\n          select.options = results;\n        });\n      } else {\n        select.options = [];\n      }\n    }\n  });            \n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `const mockData = [\n  { label: \"Espresso\", value: \"Esp\" },\n  { label: \"Double Espresso\", value: \"Dou\" },\n  { label: \"Cappuccino\", value: \"Cap\" },\n  { label: \"Latte\", value: \"Lat\" },\n  { label: \"Americano\", value: \"Ame\" },\n  { label: \"Filter\", value: \"Fil\" },\n  { label: \"Flat white\", value: \"Fla\" },\n  { label: \"Mocha\", value: \"Moc\" },\n  { label: \"Macchiato\", value: \"Mac\" },\n];\nconst [results, setResults] = useState([]);\nconst [selectedValue, setSelectedValue] = useState(null);\nconst changeHandler = (event) => {\n  const newValue = event.detail.value;\n  console.log(newValue);\n  if (newValue !== selectedValue) {\n    if (newValue && newValue.length > 1) {\n      const mockAPI = (query) => {\n        const filteredResults = mockData.filter((item) => \n          item.label.toLowerCase().includes(query.toLowerCase());\n        );\n        return new Promise(resolve => { \n          setTimeout(() => resolve(filteredResults), 1000)\n        });\n      };\n      mockAPI(newValue).then((results) => setResults(results));\n    } else {\n      setResults([]);\n    }\n  }  \n}\n<IcSelect label=\"What is your favourite coffee?\" \n  debounce=\"300\"\n  searchable\n  disableFilter\n  charactersUntilSuggestions=\"2\"\n  options={results} \n  onIcOptionSelect={(event) => setSelectedValue(event.detail.value)}\n  onIcClear={() => setResults([])}\n  onIcChange={changeHandler}\n/>`,\n  },\n];\n\nexport const CustomFilterExample = () => {\n  const mockData = [\n    { label: \"Espresso\", value: \"Esp\" },\n    { label: \"Double Espresso\", value: \"Dou\" },\n    { label: \"Cappuccino\", value: \"Cap\" },\n    { label: \"Latte\", value: \"Lat\" },\n    { label: \"Americano\", value: \"Ame\" },\n    { label: \"Filter\", value: \"Fil\" },\n    { label: \"Flat white\", value: \"Fla\" },\n    { label: \"Mocha\", value: \"Moc\" },\n    { label: \"Macchiato\", value: \"Mac\" },\n  ];\n  const [results, setResults] = React.useState([]);\n  const [selectedValue, setSelectedValue] = React.useState(null);\n  const changeHandler = (event) => {\n    const newValue = event.detail.value;\n    console.log(newValue);\n    if (newValue !== selectedValue) {\n      if (newValue && newValue.length > 1) {\n        const mockAPI = (query) => {\n          const filteredResults = mockData.filter((item) =>\n            item.label.toLowerCase().includes(query.toLowerCase())\n          );\n          return new Promise((resolve) => {\n            setTimeout(() => resolve(filteredResults), 1000);\n          });\n        };\n        mockAPI(newValue).then((newResults) => setResults(newResults));\n      } else {\n        setResults([]);\n      }\n    }\n  };\n  return (\n    <IcSelect\n      label=\"What is your favourite coffee?\"\n      debounce=\"300\"\n      searchable\n      disableFilter\n      charactersUntilSuggestions=\"2\"\n      options={results}\n      onIcOptionSelect={(event) => setSelectedValue(event.detail.value)}\n      onIcClear={() => setResults([])}\n      onIcChange={changeHandler}\n    />\n  );\n};\n\n<ComponentPreview snippets={customFiltering}>\n  <CustomFilterExample />\n</ComponentPreview>\n",
      "path": "/components/select/code",
      "date": "2023-03-30",
      "title": "Select",
      "status": "BETA",
      "subTitle": "Select allows users to select one or more values from a list of options.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/select",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/select"
        },
        {
          "title": "Code",
          "path": "/components/select/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/select/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/select/code.mdx",
        "createdAt": "2023-04-14T11:24:28.637Z",
        "lastModified": "2023-04-14T11:24:28.637Z",
        "size": 29873,
        "formattedSize": "29.2 KB"
      }
    },
    {
      "id": "components__select__guidancex",
      "contents": "\nimport { IcSelect, IcAlert } from \"@ukic/react\";\nimport selectFig1 from \"./images/fig-1-use-radio-or-checkbox-groups-when-less-than-four-options-are-available.png\";\nimport selectFig2 from \"./images/fig-2-dont-use-dropdowns-when-displaying-a-limited-number-of-options.png\";\nimport selectFig3 from \"./images/fig-3-use-labels-to-indicate-the-title-of-the-field.png\";\nimport selectFig4 from \"./images/fig-4-dont-replace-labels-with-placeholder-text.png\";\nimport selectFig5 from \"./images/fig-5-use-a-standard-select-when-providing-less-than-ten-options.png\";\nimport selectFig6 from \"./images/fig-6-do-not-use-the-searchable-variant-when-providing-less-than-ten-options.png\";\n\n## Component variants\n\nThere are two types of select components:\n\n- Single-select\n- Multi-select\n\n### Single-select\n\nAn example of the single-select component.\n\nexport const SelectExample = () => (\n  <IcSelect\n    label=\"What is your favourite coffee?\"\n    options={[\n      { label: \"Espresso\", value: \"espresso\" },\n      { label: \"Double Espresso\", value: \"doubleespresso\" },\n      { label: \"Flat White\", value: \"flatwhite\" },\n      { label: \"Cappuccino\", value: \"cappuccino\" },\n      { label: \"Americano\", value: \"americano\" },\n      { label: \"Mocha\", value: \"mocha\" },\n    ]}\n  />\n);\n\n<ComponentPreview>\n  <SelectExample />\n</ComponentPreview>\n\n### Multi-select\n\n<IcAlert\n  heading=\"Coming soon\"\n  message=\"The multi-select functionality is in development.\"\n  variant=\"info\"\n/>\n\n## When to use\n\nUse the select component to allow the user to choose one or more options from four or more items. For less than four, use a [radio group](/components/radio) or a [checkbox group](/components/checkboxes).\nWhen more than ten options are available, consider using the [Searchable variant](/components/select#searchable-single-select) of select to allow users to search the options, rather than scroll through the dropdown list.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={selectFig2}\n    imageAlt=\"A graphic of a select component labelled 'Single or double shot?' with two options 'Single' and 'Double' in the dropdown list.\"\n    state=\"bad\"\n    caption=\"Don’t use select when displaying a limited number of options.\"\n  />\n  <DoDontCaution\n    imageSrc={selectFig1}\n    imageAlt=\"A graphic of a radio group labelled 'Single or double shot?' with two radio buttons labelled 'Single' and 'Double'.\"\n    state=\"good\"\n    caption=\"Use radio or checkbox groups when less than four options are available.\"\n  />\n</DoubleDoDontCaution>\n\n## Validation\n\nReal-time validation helps the user streamline their process and efficiently complete a form. All error validation should be accompanied by an error label.\n\n## Content\n\n### Option list\n\nThe options in the option list display a label by default and can also include a description.\n\nUse a default option list to display all options without any grouping or recommendations.\n\n#### Recommended\n\nUse an option list with recommendations to display specific options at the top of the list for quick access.\n\n#### Groups\n\nUse an option list with groups to combine the options into groups with descriptive headings.\n\n### Labels\n\nClear labels help users understand what information they should provide.\n\nLabels should always be visible regardless of the state of the field and should be announced by a screen reader on focus.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={selectFig3}\n    imageAlt=\"A graphic of a select component with the label 'Coffee type' and placeholder text 'Select one'.\"\n    state=\"good\"\n    caption=\"Use labels to indicate the title of the field.\"\n  />\n  <DoDontCaution\n    imageSrc={selectFig4}\n    imageAlt=\"A graphic of a select component with no label and the placeholder text 'Coffee type'.\"\n    state=\"bad\"\n    caption=\"Don't replace labels with placeholder text.\"\n  />\n</DoubleDoDontCaution>\n\n### Helper text\n\nHelper text should be included when additional information can help the user to either provide the right information or understand why or how the information will be used.\n\nMake sure any helper text that appears under an input is read when an assistive technology user stops at an input using ARIA.\n\n### Dismissible inputs\n\nAlways allow the user to clear their selection by including a clear button inside the input field.\n\n## Searchable (single-select)\n\nexport const SearchableSelectExample = () => (\n  <IcSelect\n    label=\"What is your favourite coffee?\"\n    options={[\n      { label: \"Cappuccino\", value: \"Cap\" },\n      { label: \"Latte\", value: \"Lat\" },\n      { label: \"Americano\", value: \"Ame\" },\n      { label: \"Flat white\", value: \"Fla\" },\n      { label: \"Mocha\", value: \"Moc\" },\n      { label: \"Macchiato\", value: \"Mac\" },\n      { label: \"Café au lait\", value: \"Caf\" },\n      { label: \"Espresso\", value: \"Esp\" },\n      { label: \"Cortado\", value: \"Cor\" },\n      { label: \"Latte macchiato\", value: \"Lam\" },\n    ]}\n    searchable\n    onIcChange={(event) => console.log(event.detail.value)}\n  />\n);\n\n<ComponentPreview>\n  <SearchableSelectExample />\n</ComponentPreview>\n\nThe single-select component can be set to be searchable to filter options in the option list. A user can open the option list to view the available options, but can also type into the input field to filter the option list to more easily find the desired option.\n\nUse the searchable variant when including several options in the option list, so that the user can quickly filter their desired selection.\n\nDon’t use the searchable variant when providing less than ten options. The added functionality for short lists may confuse users while providing no benefit to their experience.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={selectFig5}\n    imageAlt=\"A graphic of a select component with the label 'What’s your favourite type of coffee' and five options in the dropdown list.\"\n    state=\"good\"\n    caption=\"Use a standard select when providing less than ten options.\"\n  />\n  <DoDontCaution\n    imageSrc={selectFig6}\n    imageAlt=\"A graphic of a select component with searchable functionality with the label 'What’s your favourite type of coffee' and five options in the dropdown list. Focus is on the input field rather than the dropdown list.\"\n    state=\"bad\"\n    caption=\"Don’t use the searchable variant when providing less than ten options.\"\n  />\n</DoubleDoDontCaution>\n\n### Content\n\nThe component can be configured to show values that either match the search term, or show values that contain the search term. For example, United Kingdom matches the search term ‘Un’, and Tunisia contains the search term ‘Un’.\n\nFor searches that take time to load results or suggestions, display the loading state whilst the search is loading. Use the empty state for searches that have no results or suggested options.\n\n## Related components\n\n- [Search bar](/components/search-bar)\n",
      "path": "/components/select",
      "navPriority": 19,
      "date": "2023-03-30",
      "title": "Select",
      "status": "BETA",
      "subTitle": "Selects allow users to select one or more values from a list of options.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/select",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/select"
        },
        {
          "title": "Code",
          "path": "/components/select/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/select/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/select/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.637Z",
        "lastModified": "2023-04-14T11:24:28.637Z",
        "size": 7331,
        "formattedSize": "7.2 KB"
      }
    },
    {
      "id": "components__side-nav__accessibilityx",
      "contents": "\n## Easy to use for everyone\n\nThe side navigation component forms an app's main navigation. Therefore, it always appears at the start of a page's tab index. It also uses a `navigation` landmark to allow quick navigation from anywhere within a page's content.\n\nThe side navigation is essentially a group of links ordered vertically in the component. Tabbing through the side navigation content follows the logical order by moving from the top most item to the bottom most item, with the expansion toggle button being the last focusable element in the component before focus is moved to page content.\n\nIn a collapsed side navigation, menu option labels are always available in a tooltip by hovering or focusing on the icon button. Any truncated text can also be accessed through use of tooltips in this way.\n\n## For Assistive Technology\n\nIcon-only menu options have accessible labels that are announced by a screen reader when focused.\n\nCollapsible option groups use `aria-expanded` to indicate whether the group is open or closed. If closed, focus skips over the group's content to the next elements. If open, each menu item in the group is included in the tab order. Collapsible option groups can be opened or closed using the **enter** or **space** key.\n\n## Based on\n\nThe side navigation component has been based on the following resources:\n\n- [Using ARIA landmarks to identify regions of a page](https://www.w3.org/WAI/GL/wiki/Using_ARIA_landmarks_to_identify_regions_of_a_page), W3, accessed June 2022.\n- [Accessible Accordion](https://www.aditus.io/patterns/accordion/), Aditus.io, accessed June 2022.\n- [Accordion Example](https://www.w3.org/WAI/ARIA/apg/example-index/accordion/accordion.html), W3, accessed June 2022.\n\n## Testing\n\nWe’ve tested this component against WCAG 2.1 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/side-nav/accessibility",
      "date": "2023-02-03",
      "title": "Side navigation",
      "status": "BETA",
      "subTitle": "Side navigation provides an app's main navigation and is fixed on the left-hand side of the app. It includes the app's name, main navigation and optional secondary links.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/side-nav",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/side-nav"
        },
        {
          "title": "Code",
          "path": "/components/side-nav/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/side-nav/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/side-nav/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.641Z",
        "lastModified": "2023-04-14T11:24:28.641Z",
        "size": 2514,
        "formattedSize": "2.5 KB"
      }
    },
    {
      "id": "components__side-nav__codex",
      "contents": "\nimport {\n  IcSideNavigation,\n  IcNavigationItem,\n  IcNavigationGroup,\n  IcDivider,\n  IcLink,\n  SlottedSVG,\n} from \"@ukic/react\";\n\nimport {\n  mdiHome,\n  mdiCoffeeOutline,\n  mdiMagnify,\n  mdiCoffeeMakerOutline,\n  mdiCogOutline,\n  mdiTeaOutline,\n} from \"@mdi/js\";\n\nimport { MemoryRouter, NavLink } from \"react-router-dom\";\n\n## Component demo\n\nexport const snippetsDefault = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-side-navigation appTitle=\"ACME coffee shop\" version=\"v0.0.7\" status=\"Alpha\">\n  <svg slot=\"app-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n    <title>coffee-outline</title>\n    <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n  </svg>\n  <ic-navigation-item slot=\"primary-navigation\" href=\"#\" label=\"Home\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" slot='icon' viewBox=\"0 0 24 24\">\n      <title>home</title>\n      <path d=\"M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z\" />\n    </svg> \n  </ic-navigation-item>\n  <ic-divider slot=\"primary-navigation\"></ic-divider>\n  <ic-navigation-item slot=\"primary-navigation\" href=\"#\" label=\"Search\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" slot='icon' viewBox=\"0 0 24 24\">\n      <title>magnify</title>\n      <path d=\"M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z\" />\n    </svg>\n  </ic-navigation-item>\n  <ic-navigation-item slot=\"primary-navigation\" href=\"#\" label=\"Drinks\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" slot='icon' viewBox=\"0 0 24 24\">\n      <title>coffee-outline</title>\n      <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n    </svg>\n  </ic-navigation-item>\n  <ic-navigation-item slot=\"primary-navigation\" href=\"#\" label=\"Equipment\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" slot='icon' viewBox=\"0 0 24 24\">\n      <title>coffee-maker-outline</title>\n      <path d=\"M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z\" />\n    </svg>\n  </ic-navigation-item>\n  <ic-navigation-item slot=\"secondary-navigation\" href=\"#\" label=\"Settings\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" slot='icon' viewBox=\"0 0 24 24\">\n      <title>cog-outline</title>\n      <path d=\"M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z\" />\n    </svg>\n  </ic-navigation-item>\n</ic-side-navigation>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSideNavigation appTitle=\"ACME coffee shop\" version=\"v0.0.7\" status=\"Alpha\">\n  <SlottedSVG slot=\"app-icon\" viewBox=\"0 0 24 24\">\n    <title>coffee-outline</title>\n    <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n  </SlottedSVG>\n  <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Home\">\n    <SlottedSVG slot='icon' viewBox=\"0 0 24 24\">\n      <title>home</title>\n      <path d=\"M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z\" />\n    </SlottedSVG> \n  </IcNavigationItem>\n  <IcDivider slot=\"primary-navigation\"></IcDivider>\n  <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Search\">\n    <SlottedSVG slot='icon' viewBox=\"0 0 24 24\">\n      <title>magnify</title>\n      <path d=\"M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z\" />\n    </SlottedSVG>\n  </IcNavigationItem>\n  <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Drinks\">\n    <SlottedSVG slot='icon' viewBox=\"0 0 24 24\">\n      <title>coffee-outline</title>\n      <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n    </SlottedSVG>\n  </IcNavigationItem>\n  <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Equipment\">\n    <SlottedSVG slot='icon' viewBox=\"0 0 24 24\">\n      <title>coffee-maker-outline</title>\n      <path d=\"M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z\" />\n    </SlottedSVG>\n  </IcNavigationItem>\n  <IcNavigationItem slot=\"secondary-navigation\" href=\"#\" label=\"Settings\">\n    <SlottedSVG slot='icon' viewBox=\"0 0 24 24\">\n      <title>cog-outline</title>\n      <path d=\"M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z\" />\n    </SlottedSVG>\n  </IcNavigationItem>\n</IcSideNavigation>`,\n  },\n];\n\n<ComponentPreview\n  snippets={snippetsDefault}\n  style={{\n    display: \"flex\",\n    height: \"100%\",\n    justifyContent: \"flex-start\",\n    overflow: \"hidden\",\n    position: \"relative\",\n    padding: \"0px\",\n  }}\n>\n  <IcSideNavigation\n    appTitle=\"ACME coffee shop\"\n    version=\"v0.0.7\"\n    status=\"Alpha\"\n    disableAutoParentStyling\n    inline\n  >\n    <SlottedSVG slot=\"app-icon\" viewBox=\"0 0 24 24\">\n      <title>coffee-outline</title>\n      <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n    </SlottedSVG>\n    <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Home\">\n      <SlottedSVG slot=\"icon\" viewBox=\"0 0 24 24\">\n        <title>home</title>\n        <path d=\"M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z\" />\n      </SlottedSVG>\n    </IcNavigationItem>\n    <IcDivider slot=\"primary-navigation\" />\n    <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Search\">\n      <SlottedSVG slot=\"icon\" viewBox=\"0 0 24 24\">\n        <title>magnify</title>\n        <path d=\"M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z\" />\n      </SlottedSVG>\n    </IcNavigationItem>\n    <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Drinks\">\n      <SlottedSVG slot=\"icon\" viewBox=\"0 0 24 24\">\n        <title>coffee-outline</title>\n        <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n      </SlottedSVG>\n    </IcNavigationItem>\n    <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Equipment\">\n      <SlottedSVG slot=\"icon\" viewBox=\"0 0 24 24\">\n        <title>coffee-maker-outline</title>\n        <path d=\"M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z\" />\n      </SlottedSVG>\n    </IcNavigationItem>\n    <IcNavigationItem slot=\"secondary-navigation\" href=\"#\" label=\"Settings\">\n      <SlottedSVG slot=\"icon\" viewBox=\"0 0 24 24\">\n        <title>cog-outline</title>\n        <path d=\"M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z\" />\n      </SlottedSVG>\n    </IcNavigationItem>\n  </IcSideNavigation>\n</ComponentPreview>\n\n## Side navigation details\n\n<ComponentDetails component=\"ic-side-navigation\" />\n\n## Navigation group details\n\n<ComponentDetails component=\"ic-navigation-group\" />\n\n## Navigation item details\n\n<ComponentDetails component=\"ic-navigation-item\" />\n\n## Variants\n\n### Static\n\nexport const snippetsStatic = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-side-navigation appTitle=\"ACME coffee shop\" version=\"v0.0.7\" status=\"Alpha\" static=\"true\">\n  <svg slot=\"app-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n    <title>coffee-outline</title>\n    <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n  </svg>\n  <ic-navigation-item slot=\"primary-navigation\" href=\"#\" label=\"Home\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" slot='icon' viewBox=\"0 0 24 24\">\n      <title>home</title>\n      <path d=\"M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z\" />\n    </svg> \n  </ic-navigation-item>\n  <ic-divider slot=\"primary-navigation\"></ic-divider>\n  <ic-navigation-item slot=\"primary-navigation\" href=\"#\" label=\"Search\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" slot='icon' viewBox=\"0 0 24 24\">\n      <title>magnify</title>\n      <path d=\"M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z\" />\n    </svg>\n  </ic-navigation-item>\n  <ic-navigation-item slot=\"primary-navigation\" href=\"#\" label=\"Drinks\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" slot='icon' viewBox=\"0 0 24 24\">\n      <title>coffee-outline</title>\n      <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n    </svg>\n  </ic-navigation-item>\n  <ic-navigation-item slot=\"primary-navigation\" href=\"#\" label=\"Equipment\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" slot='icon' viewBox=\"0 0 24 24\">\n      <title>coffee-maker-outline</title>\n      <path d=\"M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z\" />\n    </svg>\n  </ic-navigation-item>\n  <ic-navigation-item slot=\"secondary-navigation\" href=\"#\" label=\"Settings\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" slot='icon' viewBox=\"0 0 24 24\">\n      <title>cog-outline</title>\n      <path d=\"M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z\" />\n    </svg>\n  </ic-navigation-item>\n</ic-side-navigation>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSideNavigation appTitle=\"ACME coffee shop\" version=\"v0.0.7\" status=\"Alpha\" static>\n  <SlottedSVG slot=\"app-icon\" viewBox=\"0 0 24 24\">\n    <title>coffee-outline</title>\n    <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n  </SlottedSVG>\n  <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Home\">\n    <SlottedSVG slot='icon' viewBox=\"0 0 24 24\">\n      <title>home</title>\n      <path d=\"M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z\" />\n    </SlottedSVG> \n  </IcNavigationItem>\n  <IcDivider slot=\"primary-navigation\"></IcDivider>\n  <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Search\">\n    <SlottedSVG slot='icon' viewBox=\"0 0 24 24\">\n      <title>magnify</title>\n      <path d=\"M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z\" />\n    </SlottedSVG>\n  </IcNavigationItem>\n  <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Drinks\">\n    <SlottedSVG slot='icon' viewBox=\"0 0 24 24\">\n      <title>coffee-outline</title>\n      <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n    </SlottedSVG>\n  </IcNavigationItem>\n  <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Equipment\">\n    <SlottedSVG slot='icon' viewBox=\"0 0 24 24\">\n      <title>coffee-maker-outline</title>\n      <path d=\"M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z\" />\n    </SlottedSVG>\n  </IcNavigationItem>\n  <IcNavigationItem slot=\"secondary-navigation\" href=\"#\" label=\"Settings\">\n    <SlottedSVG slot='icon' viewBox=\"0 0 24 24\">\n      <title>cog-outline</title>\n      <path d=\"M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z\" />\n    </SlottedSVG>\n  </IcNavigationItem>\n</IcSideNavigation>`,\n  },\n];\n\n<ComponentPreview\n  snippets={snippetsStatic}\n  style={{\n    display: \"flex\",\n    height: \"100%\",\n    justifyContent: \"flex-start\",\n    overflow: \"hidden\",\n    position: \"relative\",\n    padding: \"0px\",\n  }}\n>\n  <IcSideNavigation\n    appTitle=\"ACME coffee shop\"\n    version=\"v0.0.7\"\n    status=\"Alpha\"\n    disableAutoParentStyling\n    inline\n    static\n  >\n    <SlottedSVG slot=\"app-icon\" viewBox=\"0 0 24 24\">\n      <title>coffee-outline</title>\n      <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n    </SlottedSVG>\n    <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Home\">\n      <SlottedSVG slot=\"icon\" viewBox=\"0 0 24 24\">\n        <title>home</title>\n        <path d=\"M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z\" />\n      </SlottedSVG>\n    </IcNavigationItem>\n    <IcDivider slot=\"primary-navigation\" />\n    <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Search\">\n      <SlottedSVG slot=\"icon\" viewBox=\"0 0 24 24\">\n        <title>magnify</title>\n        <path d=\"M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z\" />\n      </SlottedSVG>\n    </IcNavigationItem>\n    <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Drinks\">\n      <SlottedSVG slot=\"icon\" viewBox=\"0 0 24 24\">\n        <title>coffee-outline</title>\n        <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n      </SlottedSVG>\n    </IcNavigationItem>\n    <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Equipment\">\n      <SlottedSVG slot=\"icon\" viewBox=\"0 0 24 24\">\n        <title>coffee-maker-outline</title>\n        <path d=\"M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z\" />\n      </SlottedSVG>\n    </IcNavigationItem>\n    <IcNavigationItem slot=\"secondary-navigation\" href=\"#\" label=\"Settings\">\n      <SlottedSVG slot=\"icon\" viewBox=\"0 0 24 24\">\n        <title>cog-outline</title>\n        <path d=\"M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z\" />\n      </SlottedSVG>\n    </IcNavigationItem>\n  </IcSideNavigation>\n</ComponentPreview>\n\n### Expanded on default\n\nexport const snippetsExpanded = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-side-navigation\n  app-title=\"ACME coffee shop\"\n  version=\"v0.0.7\"\n  status=\"Alpha\"\n  expanded\n>\n  <svg slot=\"app-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n    <title>coffee-outline</title>\n    <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n  </svg>\n  <ic-navigation-item slot=\"primary-navigation\" href=\"#\" label=\"Home\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" slot='icon' viewBox=\"0 0 24 24\">\n      <title>home</title>\n      <path d=\"M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z\" />\n    </svg> \n  </ic-navigation-item>\n  <ic-navigation-item slot=\"primary-navigation\" href=\"#\" label=\"Search\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" slot='icon' viewBox=\"0 0 24 24\">\n      <title>magnify</title>\n      <path d=\"M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z\" />\n    </svg>\n  </ic-navigation-item>\n  <ic-navigation-item slot=\"primary-navigation\" href=\"#\" label=\"Drinks\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" slot='icon' viewBox=\"0 0 24 24\">\n      <title>coffee-outline</title>\n      <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n    </svg>\n  </ic-navigation-item>\n  <ic-navigation-item slot=\"primary-navigation\" href=\"#\" label=\"Equipment\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" slot='icon' viewBox=\"0 0 24 24\">\n      <title>coffee-maker-outline</title>\n      <path d=\"M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z\" />\n    </svg>\n  </ic-navigation-item>\n  <ic-navigation-item slot=\"secondary-navigation\" href=\"#\" label=\"Settings\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" slot='icon' viewBox=\"0 0 24 24\">\n      <title>cog-outline</title>\n      <path d=\"M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z\" />\n    </svg>\n  </ic-navigation-item>\n</ic-side-navigation>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSideNavigation\n  appTitle=\"ACME coffee shop\"\n  version=\"v0.0.7\"\n  status=\"Alpha\"\n  expanded\n>\n  <SlottedSVG slot=\"app-icon\" viewBox=\"0 0 24 24\">\n    <title>coffee-outline</title>\n    <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n  </SlottedSVG>\n  <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Home\">\n    <SlottedSVG slot='icon' viewBox=\"0 0 24 24\">\n      <title>home</title><path d=\"M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z\" />\n    </SlottedSVG> \n  </IcNavigationItem>\n  <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Search\">\n    <SlottedSVG slot='icon' viewBox=\"0 0 24 24\">\n      <title>magnify</title>\n      <path d=\"M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z\" />\n    </SlottedSVG>\n  </IcNavigationItem>\n  <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Drinks\">\n    <SlottedSVG slot='icon' viewBox=\"0 0 24 24\">\n      <title>coffee-outline</title>\n      <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n    </SlottedSVG>\n  </IcNavigationItem>\n  <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Equipment\">\n    <SlottedSVG slot='icon' viewBox=\"0 0 24 24\">\n      <title>coffee-maker-outline</title>\n      <path d=\"M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z\" />\n    </SlottedSVG>\n  </IcNavigationItem>\n  <IcNavigationItem slot=\"secondary-navigation\" href=\"#\" label=\"Settings\">\n    <SlottedSVG slot='icon' viewBox=\"0 0 24 24\">\n      <title>cog-outline</title>\n      <path d=\"M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z\" />\n    </SlottedSVG>\n  </IcNavigationItem>\n</IcSideNavigation>`,\n  },\n];\n\n<ComponentPreview\n  snippets={snippetsExpanded}\n  style={{\n    display: \"flex\",\n    height: \"100%\",\n    justifyContent: \"flex-start\",\n    overflow: \"hidden\",\n    position: \"relative\",\n    padding: \"0px\",\n  }}\n>\n  <IcSideNavigation\n    appTitle=\"ACME coffee shop\"\n    version=\"v0.0.7\"\n    status=\"Alpha\"\n    expanded\n    disableAutoParentStyling\n    inline\n  >\n    <SlottedSVG slot=\"app-icon\" viewBox=\"0 0 24 24\">\n      <title>coffee-outline</title>\n      <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n    </SlottedSVG>\n    <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Home\">\n      <SlottedSVG slot=\"icon\" viewBox=\"0 0 24 24\">\n        <title>home</title>\n        <path d=\"M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z\" />\n      </SlottedSVG>\n    </IcNavigationItem>\n    <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Search\">\n      <SlottedSVG slot=\"icon\" viewBox=\"0 0 24 24\">\n        <title>magnify</title>\n        <path d=\"M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z\" />\n      </SlottedSVG>\n    </IcNavigationItem>\n    <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Drinks\">\n      <SlottedSVG slot=\"icon\" viewBox=\"0 0 24 24\">\n        <title>coffee-outline</title>\n        <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n      </SlottedSVG>\n    </IcNavigationItem>\n    <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Equipment\">\n      <SlottedSVG slot=\"icon\" viewBox=\"0 0 24 24\">\n        <title>coffee-maker-outline</title>\n        <path d=\"M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z\" />\n      </SlottedSVG>\n    </IcNavigationItem>\n    <IcNavigationItem slot=\"secondary-navigation\" href=\"#\" label=\"Settings\">\n      <SlottedSVG slot=\"icon\" viewBox=\"0 0 24 24\">\n        <title>cog-outline</title>\n        <path d=\"M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z\" />\n      </SlottedSVG>\n    </IcNavigationItem>\n  </IcSideNavigation>\n</ComponentPreview>\n\n### Collapsed labels\n\nexport const snippetsCollapsed = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-side-navigation app-title=\"ACME coffee shop\" version=\"v0.0.0\" status=\"Alpha\" collapsed-icon-labels=\"true\">\n  <svg slot=\"app-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n    <title>coffee-outline</title>\n    <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n  </svg>\n  <ic-navigation-item slot=\"primary-navigation\" href=\"#\" label=\"Home\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" slot='icon' viewBox=\"0 0 24 24\">\n      <title>home</title>\n      <path d=\"M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z\" />\n    </svg> \n  </ic-navigation-item>\n  <ic-navigation-item slot=\"primary-navigation\" href=\"#\" label=\"Search\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" slot='icon' viewBox=\"0 0 24 24\">\n      <title>magnify</title>\n      <path d=\"M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z\" />\n    </svg>\n  </ic-navigation-item>\n  <ic-navigation-item slot=\"primary-navigation\" href=\"#\" label=\"Drinks\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" slot='icon' viewBox=\"0 0 24 24\">\n      <title>coffee-outline</title>\n      <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n    </svg>\n  </ic-navigation-item>\n  <ic-navigation-item slot=\"primary-navigation\" href=\"#\" label=\"Equipment\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" slot='icon' viewBox=\"0 0 24 24\">\n      <title>coffee-maker-outline</title>\n      <path d=\"M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z\" />\n    </svg>\n  </ic-navigation-item>\n  <ic-navigation-item slot=\"secondary-navigation\" href=\"#\" label=\"Settings\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" slot='icon' viewBox=\"0 0 24 24\">\n      <title>cog-outline</title>\n      <path d=\"M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z\" />\n    </svg>\n  </ic-navigation-item>\n</ic-side-navigation>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSideNavigation appTitle=\"ACME coffee shop\" version=\"v0.0.7\" status=\"Alpha\" collapsedIconLabels>\n  <SlottedSVG slot=\"app-icon\" viewBox=\"0 0 24 24\">\n    <title>coffee-outline</title>\n    <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n  </SlottedSVG>\n  <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Home\">\n    <SlottedSVG slot='icon' viewBox=\"0 0 24 24\">\n      <title>home</title>\n      <path d=\"M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z\" />\n    </SlottedSVG> \n  </IcNavigationItem>\n  <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Search\">\n    <SlottedSVG slot='icon' viewBox=\"0 0 24 24\">\n      <title>magnify</title>\n      <path d=\"M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z\" />\n    </SlottedSVG>\n  </IcNavigationItem>\n  <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Drinks\">\n    <SlottedSVG slot='icon' viewBox=\"0 0 24 24\">\n      <title>coffee-outline</title>\n      <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n    </SlottedSVG>\n  </IcNavigationItem>\n  <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Equipment\">\n    <SlottedSVG slot='icon' viewBox=\"0 0 24 24\">\n      <title>coffee-maker-outline</title>\n      <path d=\"M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z\" />\n    </SlottedSVG>\n  </IcNavigationItem>\n  <IcNavigationItem slot=\"secondary-navigation\" href=\"#\" label=\"Settings\">\n    <SlottedSVG slot='icon' viewBox=\"0 0 24 24\">\n      <title>cog-outline</title>\n      <path d=\"M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z\" />\n    </SlottedSVG>\n  </IcNavigationItem>\n</IcSideNavigation>`,\n  },\n];\n\n<ComponentPreview\n  snippets={snippetsCollapsed}\n  style={{\n    display: \"flex\",\n    height: \"100%\",\n    justifyContent: \"flex-start\",\n    overflow: \"hidden\",\n    position: \"relative\",\n    padding: \"0px\",\n  }}\n>\n  <IcSideNavigation\n    appTitle=\"ACME coffee shop\"\n    version=\"v0.0.0\"\n    status=\"Alpha\"\n    collapsedIconLabels\n    inline\n  >\n    <SlottedSVG slot=\"app-icon\" viewBox=\"0 0 24 24\">\n      <title>coffee-outline</title>\n      <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n    </SlottedSVG>\n    <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Home\">\n      <SlottedSVG slot=\"icon\" viewBox=\"0 0 24 24\">\n        <title>home</title>\n        <path d=\"M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z\" />\n      </SlottedSVG>\n    </IcNavigationItem>\n    <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Search\">\n      <SlottedSVG slot=\"icon\" viewBox=\"0 0 24 24\">\n        <title>magnify</title>\n        <path d=\"M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z\" />\n      </SlottedSVG>\n    </IcNavigationItem>\n    <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Drinks\">\n      <SlottedSVG slot=\"icon\" viewBox=\"0 0 24 24\">\n        <title>coffee-outline</title>\n        <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n      </SlottedSVG>\n    </IcNavigationItem>\n    <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Equipment\">\n      <SlottedSVG slot=\"icon\" viewBox=\"0 0 24 24\">\n        <title>coffee-maker-outline</title>\n        <path d=\"M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z\" />\n      </SlottedSVG>\n    </IcNavigationItem>\n    <IcNavigationItem slot=\"secondary-navigation\" href=\"#\" label=\"Settings\">\n      <SlottedSVG slot=\"icon\" viewBox=\"0 0 24 24\">\n        <title>cog-outline</title>\n        <path d=\"M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z\" />\n      </SlottedSVG>\n    </IcNavigationItem>\n  </IcSideNavigation>\n</ComponentPreview>\n\n### With Material Design icons in SlottedSVG\n\n[MDI](https://pictogrammers.com/library/mdi/) can be imported from the `@mdi/js` package and used in `<SlottedSVG>`.\nTo scale the icons, use the ['viewBox' attribute](https://css-tricks.com/scale-svg/#aa-the-viewbox-attribute)\n\n```bash\nnpm i @mdi/js\n```\n\nexport const withMDIicons = [\n  {\n    language: \"React\",\n    snippet: `// importing Material Design icons\nimport { \n  mdiCoffeeOutline, \n  mdiHome,\n  mdiMagnify,\n  mdiCoffeeMakerOutline,\n  mdiCogOutline,\n  mdiTeaOutline\n} from \"@mdi/js\";\n...\n<IcSideNavigation\n  appTitle=\"ACME coffee Shop\"\n  version=\"v0.0.7\"\n  status=\"Alpha\"\n>\n  <SlottedSVG slot=\"app-icon\" path={mdiCoffeeOutline} viewBox=\"0 0 24 24\" />\n  <IcNavigationItem slot=\"primary-navigation\" href=\"/\" label=\"Home\">\n    <SlottedSVG slot=\"icon\" path={mdiHome} viewBox=\"0 0 24 24\" />\n  </IcNavigationItem>\n  <IcDivider slot=\"primary-navigation\" />\n  <IcNavigationItem slot=\"primary-navigation\" href=\"/\" label=\"Search\">\n    <SlottedSVG slot=\"icon\" path={mdiMagnify} viewBox=\"0 0 24 24\" />\n  </IcNavigationItem>\n  <IcNavigationGroup\n    slot=\"primary-navigation\"\n    label=\"Teas\"\n    expandable=\"true\"\n  >\n    <IcNavigationItem label=\"English breakfast\" href=\"/\">\n      <SlottedSVG slot=\"icon\" path={mdiTeaOutline} viewBox=\"0 0 24 24\" />\n    </IcNavigationItem>\n    <IcNavigationItem label=\"Chai\" href=\"/\">\n      <SlottedSVG slot=\"icon\" path={mdiTeaOutline} viewBox=\"0 0 24 24\" />\n    </IcNavigationItem>\n  </IcNavigationGroup>\n  <IcNavigationItem\n    slot=\"primary-navigation\"\n    href=\"/\"\n    label=\"All other types of teas which you feel can be added.\"\n  >\n    <SlottedSVG slot=\"icon\" path={mdiTeaOutline} viewBox=\"0 0 24 24\" />\n  </IcNavigationItem>\n  <IcNavigationItem slot=\"secondary-navigation\" href=\"/\" label=\"Settings\">\n    <SlottedSVG slot=\"icon\" path={mdiCogOutline} viewBox=\"0 0 24 24\" />\n  </IcNavigationItem>\n</IcSideNavigation>`,\n  },\n];\n\n<ComponentPreview\n  snippets={withMDIicons}\n  style={{\n    display: \"flex\",\n    height: \"100%\",\n    justifyContent: \"flex-start\",\n    overflow: \"hidden\",\n    position: \"relative\",\n    padding: \"0px\",\n  }}\n>\n  <IcSideNavigation\n    appTitle=\"ACME coffee shop\"\n    version=\"v0.0.7\"\n    status=\"Alpha\"\n    disableAutoParentStyling\n    inline\n  >\n    <SlottedSVG slot=\"app-icon\" path={mdiCoffeeOutline} viewBox=\"0 0 24 24\" />\n    <IcNavigationItem slot=\"primary-navigation\" href=\"/\" label=\"Home\">\n      <SlottedSVG slot=\"icon\" path={mdiHome} viewBox=\"0 0 24 24\" />\n    </IcNavigationItem>\n    <IcDivider slot=\"primary-navigation\" />\n    <IcNavigationItem slot=\"primary-navigation\" href=\"/\" label=\"Search\">\n      <SlottedSVG slot=\"icon\" path={mdiMagnify} viewBox=\"0 0 24 24\" />\n    </IcNavigationItem>\n    <IcNavigationGroup slot=\"primary-navigation\" label=\"Teas\" expandable=\"true\">\n      <IcNavigationItem label=\"English breakfast\" href=\"/\">\n        <SlottedSVG slot=\"icon\" path={mdiTeaOutline} viewBox=\"0 0 24 24\" />\n      </IcNavigationItem>\n      <IcNavigationItem label=\"Chai\" href=\"/\">\n        <SlottedSVG slot=\"icon\" path={mdiTeaOutline} viewBox=\"0 0 24 24\" />\n      </IcNavigationItem>\n      <IcNavigationItem\n        href=\"/\"\n        label=\"All other types of teas which can be added.\"\n      >\n        <SlottedSVG slot=\"icon\" path={mdiTeaOutline} viewBox=\"0 0 24 24\" />\n      </IcNavigationItem>\n    </IcNavigationGroup>\n    <IcNavigationItem slot=\"primary-navigation\" href=\"/\" label=\"Equipment\">\n      <SlottedSVG\n        slot=\"icon\"\n        path={mdiCoffeeMakerOutline}\n        viewBox=\"0 0 24 24\"\n      />\n    </IcNavigationItem>\n    <IcNavigationItem slot=\"secondary-navigation\" href=\"/\" label=\"Settings\">\n      <SlottedSVG slot=\"icon\" path={mdiCogOutline} viewBox=\"0 0 24 24\" />\n    </IcNavigationItem>\n  </IcSideNavigation>\n</ComponentPreview>\n\n### With React Router and Material Design Icons (using slots)\n\nThe following example also demonstrates using a slotted app title link.\n\nexport const withReactRouter = [\n  {\n    language: \"React\",\n    snippet: `<MemoryRouter initialEntries={[\"/\"]}>\n  <div style={{ display: \"flex\", flexDirection: \"row\"}}>\n    <IcSideNavigation\n    version=\"v0.0.7\"\n    status=\"Alpha\"\n    >\n      <NavLink to=\"/\" slot=\"app-title\">ACME coffee shop</NavLink>\n      <SlottedSVG slot=\"app-icon\" path={mdiCoffeeOutline} viewBox=\"0 0 24 24\" />\n      <IcNavigationItem\n        slot=\"primary-navigation\"\n      >\n        <NavLink to=\"/\" slot=\"navigation-item\">\n          <SlottedSVG slot=\"icon\" path={mdiHome} viewBox=\"0 0 24 24\" height=\"1.5rem\" width=\"1.5rem\" fill=\"currentcolor\" />\n          Home\n        </NavLink>\n      </IcNavigationItem>\n      <IcNavigationItem slot=\"primary-navigation\">\n        <NavLink to=\"/search\" slot=\"navigation-item\">\n          <SlottedSVG slot=\"icon\" path={mdiMagnify} viewBox=\"0 0 24 24\" height=\"1.5rem\" width=\"1.5rem\" fill=\"currentcolor\" />\n          Search\n        </NavLink>\n      </IcNavigationItem>\n      <IcNavigationItem slot=\"primary-navigation\">\n        <NavLink to=\"/drinks\" slot=\"navigation-item\">\n          <SlottedSVG slot=\"icon\" path={mdiCoffeeOutline} viewBox=\"0 0 24 24\" height=\"1.5rem\" width=\"1.5rem\" fill=\"currentcolor\" />\n          Drinks\n        </NavLink>\n      </IcNavigationItem>\n      <IcNavigationItem slot=\"primary-navigation\">\n        <NavLink to=\"/coffee-maker\" slot=\"navigation-item\">\n          <SlottedSVG slot=\"icon\" path={mdiCoffeeMakerOutline} viewBox=\"0 0 24 24\" height=\"1.5rem\" width=\"1.5rem\" fill=\"currentcolor\" />\n          Equipment\n        </NavLink>\n      </IcNavigationItem>\n      <IcNavigationItem slot=\"secondary-navigation\">\n        <NavLink to=\"/settings\" slot=\"navigation-item\">\n          <SlottedSVG slot=\"icon\" path={mdiCogOutline} viewBox=\"0 0 24 24\" height=\"1.5rem\" width=\"1.5rem\" fill=\"currentcolor\" />\n          Settings\n        </NavLink>\n      </IcNavigationItem>\n    </IcSideNavigation>\n    <main>\n      <IcSectionContainer>\n        <Routes>\n          <Route path=\"/\" element={() => <IcTypography>This is the home page</IcTypography>} />\n          <Route path=\"/search\" element={() => <IcTypography>Search</IcTypography>} />\n          <Route path=\"/drinks\" element={() => <IcTypography>Drinks</IcTypography>} />\n          <Route path=\"/coffee-maker\" element={() => <IcTypography>Coffee Maker</IcTypography>} />\n          <Route path=\"/settings\" element={() => <IcTypography>Settings</IcTypography>} />\n        </Routes>\n      </IcSectionContainer>\n    </main>\n  </div>\n</MemoryRouter>`,\n  },\n];\n\n<ComponentPreview\n  snippets={withReactRouter}\n  style={{\n    display: \"flex\",\n    height: \"100%\",\n    justifyContent: \"flex-start\",\n    overflow: \"hidden\",\n    position: \"relative\",\n    padding: \"0px\",\n  }}\n>\n  <MemoryRouter initialEntries={[\"/\"]}>\n    <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n      <IcSideNavigation version=\"v0.0.7\" status=\"Alpha\">\n        <NavLink to=\"/\" slot=\"app-title\">\n          ACME coffee shop\n        </NavLink>\n        <SlottedSVG\n          slot=\"app-icon\"\n          path={mdiCoffeeOutline}\n          viewBox=\"0 0 24 24\"\n        />\n        <IcNavigationItem slot=\"primary-navigation\">\n          <NavLink to=\"/\" slot=\"navigation-item\">\n            <SlottedSVG\n              slot=\"icon\"\n              path={mdiHome}\n              viewBox=\"0 0 24 24\"\n              height=\"1.5rem\"\n              width=\"1.5rem\"\n              fill=\"currentcolor\"\n            />\n            Home\n          </NavLink>\n        </IcNavigationItem>\n        <IcNavigationItem slot=\"primary-navigation\">\n          <NavLink to=\"/search\" slot=\"navigation-item\">\n            <SlottedSVG\n              slot=\"icon\"\n              path={mdiMagnify}\n              viewBox=\"0 0 24 24\"\n              height=\"1.5rem\"\n              width=\"1.5rem\"\n              fill=\"currentcolor\"\n            />\n            Search\n          </NavLink>\n        </IcNavigationItem>\n        <IcNavigationItem slot=\"primary-navigation\">\n          <NavLink to=\"/drinks\" slot=\"navigation-item\">\n            <SlottedSVG\n              slot=\"icon\"\n              path={mdiCoffeeOutline}\n              viewBox=\"0 0 24 24\"\n              height=\"1.5rem\"\n              width=\"1.5rem\"\n              fill=\"currentcolor\"\n            />\n            Drinks\n          </NavLink>\n        </IcNavigationItem>\n        <IcNavigationItem slot=\"primary-navigation\">\n          <NavLink to=\"/coffee-maker\" slot=\"navigation-item\">\n            <SlottedSVG\n              slot=\"icon\"\n              path={mdiCoffeeMakerOutline}\n              viewBox=\"0 0 24 24\"\n              height=\"1.5rem\"\n              width=\"1.5rem\"\n              fill=\"currentcolor\"\n            />\n            Equipment\n          </NavLink>\n        </IcNavigationItem>\n        <IcNavigationItem slot=\"secondary-navigation\">\n          <NavLink to=\"/settings\" slot=\"navigation-item\">\n            <SlottedSVG\n              slot=\"icon\"\n              path={mdiCogOutline}\n              viewBox=\"0 0 24 24\"\n              height=\"1.5rem\"\n              width=\"1.5rem\"\n              fill=\"currentcolor\"\n            />\n            Settings\n          </NavLink>\n        </IcNavigationItem>\n      </IcSideNavigation>\n    </div>\n  </MemoryRouter>\n</ComponentPreview>\n\n## Layout example\n\nFixed side navigation places the side navigation to the viewport.\n\nexport const basicLayoutFixedViewport = [\n  {\n    language: \"Web component\",\n    snippet: `// Inline styling added for verboseness\n<div style=\"display: flex; height:100%;\">\n  <ic-side-navigation\n    app-title=\"Application Name\"\n    version=\"v0.0.0\"\n    status=\"BETA\"\n  >\n    <svg\n      slot=\"app-icon\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height=\"24px\"\n      viewBox=\"0 0 24 24\"\n      width=\"24px\"\n      fill=\"#000000\"\n    >\n      <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n      <path\n        d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z\"\n      />\n    </svg>\n    <ic-navigation-item slot=\"primary-navigation\" href=\"/\" label=\"Home\">\n      <svg\n        slot=\"icon\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          d=\"M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z\"\n          fill=\"currentColor\"\n        />\n      </svg>\n    </ic-navigation-item>\n    <ic-navigation-item\n      slot=\"primary-navigation\"\n      href=\"/\"\n      label=\"Search\"\n      selected=\"true\"\n    >\n      <svg\n        slot=\"icon\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          d=\"M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z\"\n          fill=\"currentColor\"\n        />\n      </svg>\n    </ic-navigation-item>\n    <ic-navigation-item\n      slot=\"secondary-navigation\"\n      href=\"/\"\n      label=\"Settings\"\n    >\n      <svg\n        slot=\"icon\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          d=\"M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z\"\n          fill=\"currentColor\"\n        />\n      </svg>\n    </ic-navigation-item>\n  </ic-side-navigation>\n  <div style=\"display:flex; flex-direction: column; flex-grow: 1;\">\n    <main style=\"height: 100vh;\">\n      <ic-section-container>\n        <ic-typography>\n          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed vestibulum venenatis facilisis. Nam tortor felis, auctor vel ante quis, tempor interdum libero. In dictum sodales velit, eu egestas arcu dignissim ac. Aliquam facilisis eros dolor, id laoreet orci sagittis ut. Sed tempus, lacus in pretium molestie, lectus magna interdum risus, vel fringilla libero ex eu dui. Suspendisse ullamcorper vehicula lacinia. Phasellus congue velit nisl, vitae congue ligula rutrum id.</p>\n        </ic-typography>\n        <ic-typography>\n          <p>Etiam in suscipit metus. Duis semper, sapien a molestie semper, ex nibh porttitor tellus, vel molestie justo odio vel purus. Curabitur porttitor, tortor sed semper sollicitudin, odio odio congue tortor, eget pulvinar tellus nisl ac lacus. In ultricies commodo lorem, a laoreet diam. Ut a mauris at tellus tincidunt ullamcorper sit amet in metus. Aenean facilisis placerat dictum. Phasellus mattis ante sollicitudin luctus iaculis. Nam porttitor lobortis rhoncus. Nam nec malesuada purus, at pulvinar mauris. Nam non lorem ante.</p>\n        </ic-typography>\n      </ic-section-container>\n    </main>\n    <ic-footer\n      description=\"The ICDS is maintained by the Design Practice Team. If you've got a question or want to feedback,\n        please get in touch.\"\n      caption=\"All content is available under the Open Government Licence v3.0, except source code and code examples which are available under the MIT Licence.\"\n    >\n      <ic-footer-link slot=\"link\" href=\"/\">Get Started</ic-footer-link>\n      <ic-footer-link slot=\"link\" href=\"/\">Accessibility</ic-footer-link>\n      <ic-footer-link slot=\"link\" href=\"/\">Styles</ic-footer-link>\n    </ic-footer>\n    <ic-classification-banner classification=\"official\"></ic-classification-banner>\n  </div>\n</div>`,\n  },\n  {\n    language: \"React\",\n    snippet: `// Inline styling added for verboseness\n<div style={{display: 'flex', height: '100%'}}>\n  <IcSideNavigation\n    appTitle=\"Application Name\"\n    version=\"v0.0.0\"\n    status=\"BETA\"\n  >\n    <SlottedSVG\n      slot=\"app-icon\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height=\"24px\"\n      viewBox=\"0 0 24 24\"\n      width=\"24px\"\n      fill=\"#000000\"\n    >\n      <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n      <path\n        d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z\"\n      />\n    </SlottedSVG>\n    <IcNavigationItem slot=\"primary-navigation\" href=\"/\" label=\"Home\">\n      <SlottedSVG\n        slot=\"icon\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          d=\"M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z\"\n          fill=\"currentColor\"\n        />\n      </SlottedSVG>\n    </IcNavigationItem>\n    <IcNavigationItem\n      slot=\"primary-navigation\"\n      href=\"/\"\n      label=\"Search\"\n      selected\n    >\n      <SlottedSVG\n        slot=\"icon\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          d=\"M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z\"\n          fill=\"currentColor\"\n        />\n      </SlottedSVG>\n    </IcNavigationItem>\n    <IcNavigationItem\n      slot=\"secondary-navigation\"\n      href=\"/\"\n      label=\"Settings\"\n    >\n      <SlottedSVG\n        slot=\"icon\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          d=\"M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z\"\n          fill=\"currentColor\"\n        />\n      </SlottedSVG>\n    </IcNavigationItem>\n  </IcSideNavigation>\n  <div style={{display: 'flex', flexDirection: 'column', flexGrow: '1'}}>\n    <main style={{height: '100vh'}}>\n      <IcSectionContainer>\n        <IcTypography>\n          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed vestibulum venenatis facilisis. Nam tortor felis, auctor vel ante quis, tempor interdum libero. In dictum sodales velit, eu egestas arcu dignissim ac. Aliquam facilisis eros dolor, id laoreet orci sagittis ut. Sed tempus, lacus in pretium molestie, lectus magna interdum risus, vel fringilla libero ex eu dui. Suspendisse ullamcorper vehicula lacinia. Phasellus congue velit nisl, vitae congue ligula rutrum id.</p>\n        </IcTypography>\n        <IcTypography>\n          <p>Etiam in suscipit metus. Duis semper, sapien a molestie semper, ex nibh porttitor tellus, vel molestie justo odio vel purus. Curabitur porttitor, tortor sed semper sollicitudin, odio odio congue tortor, eget pulvinar tellus nisl ac lacus. In ultricies commodo lorem, a laoreet diam. Ut a mauris at tellus tincidunt ullamcorper sit amet in metus. Aenean facilisis placerat dictum. Phasellus mattis ante sollicitudin luctus iaculis. Nam porttitor lobortis rhoncus. Nam nec malesuada purus, at pulvinar mauris. Nam non lorem ante.</p>\n        </IcTypography>\n      </IcSectionContainer>\n    </main>\n    <IcFooter\n      description=\"The ICDS is maintained by the Design Practice Team. If you've got a question or want to feedback,\n        please get in touch.\"\n      caption=\"All content is available under the Open Government Licence v3.0, except source code and code examples which are available under the MIT Licence.\"\n    >\n      <IcFooterLink slot=\"link\" href=\"/\">Get Started</IcFooterLink>\n      <IcFooterLink slot=\"link\" href=\"/\">Accessibility</IcFooterLink>\n      <IcFooterLink slot=\"link\" href=\"/\">Styles</IcFooterLink>\n    </IcFooter>\n    <IcClassificationBanner classification=\"official\"></IcClassificationBanner>\n  </div>\n</div>`,\n  },\n];\n\n<ComponentPreview\n  snippets={basicLayoutFixedViewport}\n  style={{\n    display: \"flex\",\n    height: \"100%\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    padding: \"16px\",\n  }}\n>\n  <IcLink href=\"/ic-side-nav-fixed-example/index.html\" target=\"_blank\" showIcon>\n    View example in new window\n  </IcLink>\n</ComponentPreview>\n",
      "path": "/components/side-nav/code",
      "date": "2023-03-01",
      "title": "Side navigation",
      "status": "BETA",
      "subTitle": "Side navigation provides an app's main navigation and is fixed on the left-hand side of the app. It includes the app's name, main navigation and optional secondary links.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/side-nav",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/side-nav"
        },
        {
          "title": "Code",
          "path": "/components/side-nav/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/side-nav/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/side-nav/code.mdx",
        "createdAt": "2023-04-14T11:24:28.641Z",
        "lastModified": "2023-04-14T11:24:28.641Z",
        "size": 63531,
        "formattedSize": "62.0 KB"
      }
    },
    {
      "id": "components__side-nav__guidancex",
      "contents": "\nimport { IcSideNavigation, IcNavigationItem, IcAlert } from \"@ukic/react\";\n\nimport sideNavigationFig1 from \"./images/fig-1-dont-use-both-side-and-top-navigation.png\";\nimport sideNavigationFig2 from \"./images/fig-2-avoid-side-navigation-for-complex-app-structures.png\";\nimport sideNavigationFig3 from \"./images/fig-3-set-side-navigation-default-display.png\";\nimport sideNavigationFig4 from \"./images/fig-4-static-side-navigation.png\";\nimport sideNavigationFig5 from \"./images/fig-5-side-navigation-sub-menu.png\";\nimport sideNavigationFig6 from \"./images/fig-6-personality-colourisation.png\";\nimport sideNavigationFig7 from \"./images/fig-7-dont-position-side-nav-above-footer.png\";\nimport sideNavigationFig8 from \"./images/fig-8-keep-menu-option-labels-concise-to-avoid-truncation.png\";\nimport sideNavigationFig9 from \"./images/fig-9-tooltips-show-labels-on-hover-or-focus.png\";\nimport sideNavigationFig10 from \"./images/fig-10-set-menu-options-to-display-labels.png\";\nimport sideNavigationFig11 from \"./images/fig-11-use-menu-groups-and-drilldowns.png\";\n\n## Introduction\n\nAn example of the side navigation component.\n\n<ComponentPreview\n  style={{\n    display: \"flex\",\n    height: \"100%\",\n    overflow: \"hidden\",\n    position: \"relative\",\n    justifyContent: \"flex-start\",\n    padding: \"0px\",\n  }}\n>\n  <IcSideNavigation\n    appTitle=\"ACME coffee shop\"\n    version=\"v0.0.7\"\n    status=\"Alpha\"\n    disableAutoParentStyling\n    inline\n  >\n    <svg slot=\"app-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n      <title>coffee-outline</title>\n      <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n    </svg>\n    <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Home\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" slot=\"icon\" viewBox=\"0 0 24 24\">\n        <title>home</title>\n        <path d=\"M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z\" />\n      </svg>\n    </IcNavigationItem>\n    <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Search\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" slot=\"icon\" viewBox=\"0 0 24 24\">\n        <title>magnify</title>\n        <path d=\"M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z\" />\n      </svg>\n    </IcNavigationItem>\n    <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Drinks\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" slot=\"icon\" viewBox=\"0 0 24 24\">\n        <title>coffee-outline</title>\n        <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n      </svg>\n    </IcNavigationItem>\n    <IcNavigationItem slot=\"primary-navigation\" href=\"#\" label=\"Equipment\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" slot=\"icon\" viewBox=\"0 0 24 24\">\n        <title>coffee-maker-outline</title>\n        <path d=\"M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z\" />\n      </svg>\n    </IcNavigationItem>\n    <IcNavigationItem slot=\"secondary-navigation\" href=\"#\" label=\"Settings\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" slot=\"icon\" viewBox=\"0 0 24 24\">\n        <title>cog-outline</title>\n        <path d=\"M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z\" />\n      </svg>\n    </IcNavigationItem>\n  </IcSideNavigation>\n</ComponentPreview>\n\n## When to use\n\nUse side navigation to help provide more screen space for main content. Side navigation is well-suited to apps that have mutually exclusive features which need to be switched between easily on any page.\n\nUse side navigation alongside additional components like [page headers](/components/page-header) to create a variety of different [layouts](/styles/layout-spacing) and navigation styles.\n\n## When not to use\n\nFor intranet-style and content heavy apps, use [top navigation](/components/top-nav) as it's better suited for providing links to a large number of pages.\n\nUse either side navigation or top navigation. Don't use both at the same time.\n\n<DoDontCaution\n  imageSrc={sideNavigationFig1}\n  imageAlt=\"An example app that shows a top navigation and side navigation used on the same page.\"\n  state=\"bad\"\n  caption=\"Don't use both side navigation and top navigation at the same time.\"\n/>\n\nAvoid using side navigation if the app has many destinations grouped into a multi-level hierarchy. Instead use a [top navigation](/components/top-nav) with grouped links.\n\n<DoDontCaution\n  imageSrc={sideNavigationFig2}\n  imageAlt=\"An example app using side navigation to display multiple groups of links.\"\n  state=\"caution\"\n  caption=\"Avoid using side navigation for apps with complex page hierarchies. Instead use top navigation with grouped links.\"\n/>\n\n## Interaction behaviour\n\nSide navigation is expandable and displays the navigation labels and app info when expanded. Choose whether to display the side navigation as expanded or collapsed by default when the page loads.\n\n<DoDontCaution\n  imageSrc={sideNavigationFig3}\n  imageAlt=\"An example of an application with the side navigation expanded or collapsed by default as the page loads.\"\n  state=\"good\"\n  caption=\"Choose to display the side navigation as collapsed or expanded when the page loads.\"\n/>\n\nSet the side navigation to static if you want it to be either permanently expanded or permanently collapsed. This removes the expansion toggle button from the bottom of the side navigation.\n\n<DoDontCaution\n  imageSrc={sideNavigationFig4}\n  imageAlt=\"Two examples of side navigation that are set to static collapsed and static expanded. No expansion toggle button is displayed in the bottom section of the side navigation.\"\n  state=\"good\"\n  caption=\"Static side navigation examples.\"\n/>\n\nUse a drill-down menu option to provide access to child links in a sub-menu. The sub-menu can be closed by using the back button in the sub-menu's top section.\n\nSub-menus can be nested, but avoid creating overly deep page hierarchies and consider using top navigation with grouped links instead.\n\n<DoDontCaution\n  imageSrc={sideNavigationFig5}\n  imageAlt=\"An example side navigation component showing a menu option with a sub-menu of child links.\"\n  state=\"good\"\n  caption=\"A side navigation component with a sub-menu.\"\n/>\n\n## Colour\n\nThe side navigation uses the app's [theme colour](/styles/colour/#theme) as the background and automatically sets the foreground colour to ensure accessible contrast ratios. Change the app's theme colour to change the background colour of the side navigation and help distinguish your app from others your users may use.\n\n<DoDontCaution\n  imageSrc={sideNavigationFig6}\n  imageAlt=\"Two examples of side navigation components using different theme colours.\"\n  state=\"good\"\n  caption=\"Examples of side navigation using different theme colours.\"\n/>\n\n## Layout and placement\n\nAlways position the side navigation on the left hand of the screen and make sure that it vertically fills the browser window.\n\n<DoDontCaution\n  imageSrc={sideNavigationFig7}\n  imageAlt=\"An example app with a side navigation component that sits above the footer.\"\n  state=\"bad\"\n  caption=\"Don't position the side navigation so that it does not vertically fill the browser window.\"\n/>\n\n## Content\n\n### App information\n\nUse your app's name, icon, status and version information in the side navigation's app info fields.\n\n### Labels and icons\n\nFollow the [content style guidelines](/styles/content-style) for all menu option labels as well as each option group labels.\n\nFollow the [icon style guidelines](/styles/icons) when selecting icons for menu options.\n\nKeep labels concise as they will truncate if they are too long to display in the side navigation.\n\n<DoDontCaution\n  imageSrc={sideNavigationFig8}\n  imageAlt=\"An example side navigation showing menu items with long labels that are truncated.\"\n  state=\"caution\"\n  caption=\"Keep labels concise to avoid truncation.\"\n/>\n\n### Menu items\n\nSet the side navigation menu items to reflect your app's main navigation links.\n\nBy default, menu items will only display their icon when the side navigation is collapsed. The item label will be displayed via a tooltip when hovering or focusing on the menu item.\n\n<DoDontCaution\n  imageSrc={sideNavigationFig9}\n  imageAlt=\"An example side navigation component showing the menu option labels in a tooltip when hovering or focusing on the menu option.\"\n  state=\"good\"\n  caption=\"Side navigation shows menu item labels using tooltips when collapsed.\"\n/>\n\nSet the menu items to display their labels in the collapsed state by default if this will aid the recognition of the feature. However, take care when doing this as long menu item labels will be truncated.\n\n<DoDontCaution\n  imageSrc={sideNavigationFig10}\n  imageAlt=\"An example side navigation in collapsed state showing labels below the icons for each menu option.\"\n  state=\"good\"\n  caption=\"Set menu items to display their labels even in the collapsed state if this aids recognition of the feature.\"\n/>\n\nGroup related menu items into expandable menu item groups.\n\nUse a drill-down menu item if the menu item has a large number of child links to display. This will display the child links in the side navigation's sub-menu.\n\n<IcAlert\n  heading=\"Coming soon\"\n  message=\"Drill-down menu functionality is in development.\"\n  variant=\"info\"\n/>\n\n<DoDontCaution\n  imageSrc={sideNavigationFig11}\n  imageAlt=\"An example of side navigation showing grouped menu items and drill-down menu items.\"\n  state=\"good\"\n  caption=\"Side navigation showing grouped menu items and drill-down menu items.\"\n/>\n\n### Bottom menu items\n\nUse the sticky bottom menu section to provide quick links to global app features or external links.\n\n## Accessibility considerations\n\nMake sure to include alt-text when specifying icons for menu items.\n\n## Related Components\n\n- [Top navigation](/components/top-nav)\n",
      "path": "/components/side-nav",
      "navPriority": 20,
      "date": "2023-03-01",
      "title": "Side navigation",
      "status": "BETA",
      "subTitle": "Side navigation provides an app's main navigation and is fixed on the left-hand side of the app. It includes the app's name, main navigation and optional secondary links.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/side-nav",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/side-nav"
        },
        {
          "title": "Code",
          "path": "/components/side-nav/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/side-nav/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/side-nav/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.641Z",
        "lastModified": "2023-04-14T11:24:28.641Z",
        "size": 12103,
        "formattedSize": "11.8 KB"
      }
    },
    {
      "id": "components__skeleton__accessibilityx",
      "contents": "\n## Easy to use for everyone\n\nThe component relies on CSS to be displayed before JavaScript is loaded on the page.\n\n## For Assistive Technology\n\nA user should be notified that content is loading. Skeletons use the `aria-busy` to tell assistive technologies that the container is loading. Aria-busy will be false when the container isn't refreshing and will be equal to true when the content is loading.\n\nGiven that few screen readers comply with `aria-busy=”true”`, we need to invoke `aria-hidden=”true”` to hide the busy content.\n\nSkeleton components shouldn’t be focusable.\n\n## Based on\n\nThe skeleton component has been based on the following resources:\n\n- [Short note on being busy](https://www.tpgi.com/short-note-on-being-busy/), Steve Faulkner, accessed April 2022.\n- [More Accessible Skeletons](https://adrianroselli.com/2020/11/more-accessible-skeletons.html), Adrian Roselli, accessed April 2022.\n- [Accessible Loading Indicators—with No Extra Elements!](https://dockyard.com/blog/2020/03/02/accessible-loading-indicatorswith-no-extra-elements), James Steinbach, accessed March 2022.\n\n## Testing\n\nWe’ve tested this component against WCAG 2.1 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n\n## Future research planned\n\nTo meet WCAG 2.1 Success Criterion 2.2.2 we need to include a mechanism to stop “any moving, blinking or scrolling information that starts automatically, lasts more than five seconds, and is presented in parallel with other content”. As the animation is subtle and less than one second we don't need to provide this.\n\nHowever, we could do further research into potential scenarios where it could be beneficial for specific users, and how to invoke the pausing pattern without affecting the general experience.\n",
      "path": "/components/skeleton/accessibility",
      "date": "2023-02-03",
      "title": "Skeleton",
      "status": "BETA",
      "subTitle": "Skeleton loading states are representations of the shape of content that help inform users that a specific type of component is loading.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/skeleton",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/skeleton"
        },
        {
          "title": "Code",
          "path": "/components/skeleton/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/skeleton/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/skeleton/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.645Z",
        "lastModified": "2023-04-14T11:24:28.645Z",
        "size": 2396,
        "formattedSize": "2.3 KB"
      }
    },
    {
      "id": "components__skeleton__codex",
      "contents": "\nimport { IcSkeleton, IcTypography } from \"@ukic/react\";\n\n## Component demo\n\nexport const snippets = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-skeleton variant=\"circle\" height=\"20\"></ic-skeleton>\n<ic-typography variant=\"caption\">\n  <ic-skeleton variant=\"text\"></ic-skeleton>\n</ic-typography>\n<ic-skeleton></ic-skeleton>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSkeleton variant=\"circle\" height=\"20\" />\n<IcTypography variant=\"caption\">\n  <IcSkeleton variant=\"text\" />\n</IcTypography>\n<IcSkeleton />`,\n  },\n];\n\n<ComponentPreview snippets={snippets}>\n  <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"8px\" }}>\n    <IcSkeleton variant=\"circle\" height=\"20\" />\n    <IcTypography variant=\"caption\">\n      <IcSkeleton variant=\"text\" />\n    </IcTypography>\n    <IcSkeleton />\n  </div>\n</ComponentPreview>\n\n## Skeleton details\n\n<ComponentDetails component=\"ic-skeleton\" />\n\n## Variants\n\n### Inherited size from child\n\nexport const snippetsInherited = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-skeleton><div style=\"height:200px;width:450px;\">Test text</div></ic-skeleton>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSkeleton>\n  <div style={{\n  height: \"200px\",\n  width: \"450px\"\n  }}>Test text</div>\n</IcSkeleton>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsInherited}>\n  <IcSkeleton>\n    <div\n      style={{\n        height: \"200px\",\n        width: \"450px\",\n      }}\n    >\n      Test text\n    </div>\n  </IcSkeleton>\n</ComponentPreview>\n\n### Set width and height\n\nexport const snippetsSetWidthAndHeight = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-typography variant=\"h4\">Height and width set with styles</ic-typography>\n<ic-skeleton style=\"height:200px;width:200px;\"></ic-skeleton>\n<ic-typography variant=\"h4\">Height set with styles</ic-typography>\n<ic-skeleton style=\"height:75px;\"></ic-skeleton>\n<ic-typography variant=\"h4\">Width set with styles</ic-typography>\n<ic-skeleton style=\"width:450px;\"></ic-skeleton>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcTypography variant=\"h4\">Height and width set with styles</IcTypography>\n<IcSkeleton style={{\nheight: \"200px\",\nwidth: \"200px\"\n}} />\n<IcTypography variant=\"h4\">Height set with styles</IcTypography>\n<IcSkeleton style={{\n  height: \"75px\"\n}} />\n<IcTypography variant=\"h4\">Width set with styles</IcTypography>\n<IcSkeleton style={{\n  width: \"450px\"\n}} />`,\n  },\n];\n\n<ComponentPreview snippets={snippetsSetWidthAndHeight}>\n  <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"8px\" }}>\n    <IcTypography variant=\"h4\">Height and width set with styles</IcTypography>\n    <IcSkeleton\n      style={{\n        height: \"200px\",\n        width: \"200px\",\n      }}\n    />\n    <IcTypography variant=\"h4\">Height set with styles</IcTypography>\n    <IcSkeleton\n      style={{\n        height: \"75px\",\n      }}\n    />\n    <IcTypography variant=\"h4\">Width set with styles</IcTypography>\n    <IcSkeleton\n      style={{\n        width: \"450px\",\n      }}\n    />\n  </div>\n</ComponentPreview>\n\n### Light\n\nexport const snippetsLight = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-skeleton variant=\"circle\" height=\"20\" light=\"true\"></ic-skeleton>\n<ic-typography variant=\"caption\">\n  <ic-skeleton variant=\"text\" light=\"true\"></ic-skeleton>\n</ic-typography>\n<ic-skeleton light=\"true\"></ic-skeleton>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSkeleton variant=\"circle\" height=\"20\" light=\"true\" />\n<IcTypography variant=\"caption\">\n  <IcSkeleton variant=\"text\" light=\"true\" />\n</IcTypography>\n<IcSkeleton light=\"true\" />`,\n  },\n];\n\n<ComponentPreview snippets={snippetsLight}>\n  <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"8px\" }}>\n    <IcSkeleton variant=\"circle\" height=\"20\" light=\"true\" />\n    <IcTypography variant=\"caption\">\n      <IcSkeleton variant=\"text\" light=\"true\" />\n    </IcTypography>\n    <IcSkeleton light=\"true\" />\n  </div>\n</ComponentPreview>\n",
      "path": "/components/skeleton/code",
      "date": "2023-02-03",
      "title": "Skeleton",
      "status": "BETA",
      "subTitle": "Skeleton loading states are representations of the shape of content that help inform users that a specific type of component is loading.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/skeleton",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/skeleton"
        },
        {
          "title": "Code",
          "path": "/components/skeleton/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/skeleton/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/skeleton/code.mdx",
        "createdAt": "2023-04-14T11:24:28.645Z",
        "lastModified": "2023-04-14T11:24:28.645Z",
        "size": 4451,
        "formattedSize": "4.3 KB"
      }
    },
    {
      "id": "components__skeleton__guidancex",
      "contents": "\nimport skeletonFig1 from \"./images/fig-1-use-the-variant-which-outlines-the-whole-components.png\";\nimport skeletonFig2 from \"./images/fig-2-do-not-use-skeletons-within-skeletons.png\";\nimport skeletonFig3 from \"./images/fig-3-use-the-correct-text-style-to-match-the-size-of-the-text.png\";\nimport skeletonFig4 from \"./images/fig-4-do-not-use-the-same-text-variant-for-different-text-sizes.png\";\nimport skeletonFig5 from \"./images/fig-5-use-a-separate-text-skeleton-component-for-each-line.png\";\nimport skeletonFig6 from \"./images/fig-6-do-not-scale-the-text-skeleton-to-the-full-height-of-a-body-of-text.png\";\n\n## Introduction\n\nSkeleton has three variants:\n\n- Circle\n- Text\n- Rectangle\n\n<ComponentPreview>\n  <ic-skeleton />\n</ComponentPreview>\n\n### Circle\n\nUse the circle variant as a placeholder for any circular components, like avatars and circular logos.\n\n### Text\n\nUse the text variant as a placeholder for any text or labels which sit outside of any component. This applies to helper text for input labels, headings, and body text.\n\n### Rectangle\n\nUse the rectangle variant as a placeholder for any other components. This includes buttons, chips and tags, input fields and cards.\n\n## When to use\n\nUse skeleton variants as a placeholder for when a full page, or individual components are loading. Don't nest skeletons. If a label or text lives inside a component, for example in cards, only use the skeleton variant of the component which houses the other components.\n\n<DoDontCaution\n  imageSrc={skeletonFig1}\n  imageAlt=\"An image which shows the card component and the rectangle skeleton variant used to replace the full card width and height while it’s loading.\"\n  state=\"good\"\n  caption=\"Use skeletons to outline the whole component.\"\n/>\n\n<DoDontCaution\n  imageSrc={skeletonFig2}\n  imageAlt=\"An image showing a card component’s skeleton state including text skeleton variants used within another rectangle skeleton variant.\"\n  state=\"bad\"\n  caption=\"Don't use skeletons within skeletons.\"\n/>\n\n### Sizing\n\nSet the height and width of the skeleton to match the size of the component that will replace it once loaded.\n\nWhen using the text variant, set the skeleton’s height to match the text style of the text that will replace it once loaded.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={skeletonFig3}\n    imageAlt=\"A graphic of a list of text styles side by side with the correct text variant height.\"\n    state=\"good\"\n    caption=\"Use the correct text style to match the size of the text.\"\n  />\n  <DoDontCaution\n    imageSrc={skeletonFig4}\n    imageAlt=\"A graphic of a list of different text styles side by side with a list of skeleton components of the same height.\"\n    state=\"bad\"\n    caption=\"Don't use the same skeleton size for different text sizes.\"\n  />\n</DoubleDoDontCaution>\n\nDon't replace large bodies of texts with one single large text skeleton. Replace each line with a separate text skeleton.\n\n<DoDontCaution\n  imageSrc={skeletonFig5}\n  imageAlt=\"An image showing multiple lines of text being replaced by multiple text skeleton components for each line of text.\"\n  state=\"good\"\n  caption=\"Use a separate text skeleton component for each line.\"\n/>\n\n<DoDontCaution\n  imageSrc={skeletonFig6}\n  imageAlt=\"An image showing multiple lines of text being incorrectly replaced by one large custom text skeleton.\"\n  state=\"bad\"\n  caption=\"Don't scale the text skeleton to the full height of a body of text.\"\n/>\n\n## When not to use\n\nAvoid displaying skeleton placeholders when something will load in 300ms or under to avoid flashing on the page. If needed, manually specify a 300ms delay, after which the skeleton component is displayed.\n\nDon’t use skeleton loading states when the loading progress can be calculated. Instead, use [determinate loading indicators](/components/loading-indicators).\n\nDon’t use skeleton components when the general structure of the page that will replace skeleton variants is not known. Instead, use [indeterminate loading indicators](/components/loading-indicators).\n\n## Related components\n\n- [Loading indicators](/components/loading-indicators)\n",
      "path": "/components/skeleton",
      "navPriority": 21,
      "date": "2023-02-03",
      "title": "Skeleton",
      "status": "BETA",
      "subTitle": "Skeleton loading states are representations of the shape of content that help inform users that a specific type of component is loading.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/skeleton",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/skeleton"
        },
        {
          "title": "Code",
          "path": "/components/skeleton/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/skeleton/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/skeleton/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.645Z",
        "lastModified": "2023-04-14T11:24:28.645Z",
        "size": 4680,
        "formattedSize": "4.6 KB"
      }
    },
    {
      "id": "components__status-tags__accessibilityx",
      "contents": "\n## Easy to use for everyone\n\nStatus tags use colours that have been designed for maximum legibility across a range of visual impairments.\n\n## For Assistive Technology\n\nStatus tags can have `aria-labelledby` or `aria-label` tags that provide additional content to the visible label. However, the visible label must be included within the accessible label.\n\n## Based on\n\nThe status tag component has been based on the following resources:\n\n- [ARIA: status role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/status_role), Mozilla, accessed July 2022.\n- [Tag component](https://design-system.service.gov.uk/components/tag/), GDS, accessed July 2022.\n- [Using the status role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_status_role), Mozilla, accessed July 2022.\n\n## Testing\n\nWe've tested this component against WCAG 2.1 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/status-tags/accessibility",
      "date": "2023-02-03",
      "title": "Status tag",
      "status": "BETA",
      "subTitle": "Status tags are short, clear and digestible ways to display the status of something on the page.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/status-tags",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/status-tags"
        },
        {
          "title": "Code",
          "path": "/components/status-tags/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/status-tags/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/status-tags/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.645Z",
        "lastModified": "2023-04-14T11:24:28.645Z",
        "size": 1552,
        "formattedSize": "1.5 KB"
      }
    },
    {
      "id": "components__status-tags__codex",
      "contents": "\nimport { IcStatusTag } from \"@ukic/react\";\n\n## Component demo\n\nexport const snippetsDefault = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-status-tag label=\"Neutral\" status=\"neutral\"></ic-status-tag>\n<ic-status-tag label=\"Success\" status=\"success\"></ic-status-tag>\n<ic-status-tag label=\"Warning\" status=\"warning\"></ic-status-tag>\n<ic-status-tag label=\"Danger\" status=\"danger\"></ic-status-tag>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcStatusTag label=\"Neutral\" status=\"neutral\"/>\n<IcStatusTag label=\"Success\" status=\"success\"/>\n<IcStatusTag label=\"Warning\" status=\"warning\"/>\n<IcStatusTag label=\"Danger\" status=\"danger\"/>`,\n  },\n];\n\n<ComponentPreview style={{ gap: \"8px\" }} snippets={snippetsDefault}>\n  <IcStatusTag label=\"Neutral\" status=\"neutral\" />\n  <IcStatusTag label=\"Success\" status=\"success\" />\n  <IcStatusTag label=\"Warning\" status=\"warning\" />\n  <IcStatusTag label=\"Danger\" status=\"danger\" />\n</ComponentPreview>\n\n## Status tag details\n\n<ComponentDetails component=\"ic-status-tag\" />\n\n## Variants\n\n### Emphasis\n\nexport const snippetsEmphasis = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-status-tag label=\"Neutral\" status=\"neutral\" appearance=\"outlined\"></ic-status-tag>\n<ic-status-tag label=\"Success\" status=\"success\" appearance=\"outlined\"></ic-status-tag>\n<ic-status-tag label=\"Warning\" status=\"warning\" appearance=\"outlined\"></ic-status-tag>\n<ic-status-tag label=\"Danger\" status=\"danger\" appearance=\"outlined\"></ic-status-tag>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcStatusTag label=\"Neutral\" status=\"neutral\" appearance=\"outlined\" />\n<IcStatusTag label=\"Success\" status=\"success\" appearance=\"outlined\" />\n<IcStatusTag label=\"Warning\" status=\"warning\" appearance=\"outlined\" />\n<IcStatusTag label=\"Danger\" status=\"danger\" appearance=\"outlined\" />`,\n  },\n];\n\n<ComponentPreview style={{ gap: \"8px\" }} snippets={snippetsEmphasis}>\n  <IcStatusTag label=\"Neutral\" status=\"neutral\" appearance=\"outlined\" />\n  <IcStatusTag label=\"Success\" status=\"success\" appearance=\"outlined\" />\n  <IcStatusTag label=\"Warning\" status=\"warning\" appearance=\"outlined\" />\n  <IcStatusTag label=\"Danger\" status=\"danger\" appearance=\"outlined\" />\n</ComponentPreview>\n\n### Small\n\nexport const snippetsSmall = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-status-tag label=\"Neutral\" status=\"neutral\" small=\"true\"></ic-status-tag>\n<ic-status-tag label=\"Success\" status=\"success\" small=\"true\"></ic-status-tag>\n<ic-status-tag label=\"Warning\" status=\"warning\" small=\"true\"></ic-status-tag>\n<ic-status-tag label=\"Danger\" status=\"danger\" small=\"true\"></ic-status-tag>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcStatusTag label=\"Neutral\" status=\"neutral\" small />\n<IcStatusTag label=\"Success\" status=\"success\" small />\n<IcStatusTag label=\"Warning\" status=\"warning\" small />\n<IcStatusTag label=\"Danger\" status=\"danger\" small />`,\n  },\n];\n\n<ComponentPreview style={{ gap: \"8px\" }} snippets={snippetsSmall}>\n  <IcStatusTag label=\"Neutral\" status=\"neutral\" small />\n  <IcStatusTag label=\"Success\" status=\"success\" small />\n  <IcStatusTag label=\"Warning\" status=\"warning\" small />\n  <IcStatusTag label=\"Danger\" status=\"danger\" small />\n</ComponentPreview>\n",
      "path": "/components/status-tags/code",
      "date": "2023-02-03",
      "title": "Status tag",
      "status": "BETA",
      "subTitle": "Status tags are short, clear and digestible ways to display the status of something on the page.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/status-tags",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/status-tags"
        },
        {
          "title": "Code",
          "path": "/components/status-tags/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/status-tags/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/status-tags/code.mdx",
        "createdAt": "2023-04-14T11:24:28.649Z",
        "lastModified": "2023-04-14T11:24:28.649Z",
        "size": 3723,
        "formattedSize": "3.6 KB"
      }
    },
    {
      "id": "components__status-tags__guidancex",
      "contents": "\nimport { IcStatusTag } from \"@ukic/react\";\nimport statusTagFig1 from \"./images/fig-1-do-use-status-tags-exclusively-to-denote-status.png\";\nimport statusTagFig2 from \"./images/fig-2-do-not-use-status-tags-for-anything-other-than-denoting-status.png\";\nimport statusTagFig3 from \"./images/fig-3-do-not-use-a-mix-of-primary-and-secondary-status-tags-to-show-the same-statuses-message-within-a-group-of-items.png\";\nimport statusTagFig4 from \"./images/fig-4-do-use-the-correct-status-tag-size-to-match-other-ui-component-sizes.png\";\nimport statusTagFig5 from \"./images/fig-5-do-not-mix-sizes-when-using-multiple-ui-components.png\";\nimport statusTagFig6 from \"./images/fig-6-do-use-adjectives-to-describe-status.png\";\nimport statusTagFig7 from \"./images/fig-7-do-not-use-verbs-in-status-tags.png\";\nimport statusTagFig8 from \"./images/fig-8-do-use-relevant-wording-that-supports-the-status-tag-colour.png\";\nimport statusTagFig9 from \"./images/fig-9-do-not-use-wording-which-directly-contrasts-and-or does-not-support-the-status-of-the-tag.png\";\nimport statusTagFig10 from \"./images/fig-10-avoid-using-long-labels-as-it-will-force-the-text-to-truncate.png\";\n\n## Introduction\n\nThe status tag has four types:\n\n- Neutral\n- Success\n- Warning\n- Danger\n\nEach status tag has a filled and outlined appearance option and is available in two sizes.\n\n<ComponentPreview style={{ gap: \"8px\" }}>\n  <IcStatusTag label=\"Neutral\" status=\"neutral\" />\n  <IcStatusTag label=\"Success\" status=\"success\" />\n  <IcStatusTag label=\"Warning\" status=\"warning\" />\n  <IcStatusTag label=\"Danger\" status=\"danger\" />\n</ComponentPreview>\n\n## When to use\n\nDisplay a status tag to show the status of an item in an application. For example, status tags could be used to show if a system is online or offline, if a document has been actioned or approved, or if a displayed train network is currently active or not.\n\n### Filled\n\nFilled status tags use the status colours to denote the type of status tag.\n\nUse filled status tags to convey emphasis and importance.\n\n### Outlined\n\nOutlined status tags use a lighter colour variation of the relevant status colour.\n\nUse outlined status tags to provide emphasis to less important items.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={statusTagFig1}\n    imageAlt=\"A good example of a success status tag labelled ‘approved’ used to show the status of a page titled ‘Guidance’.\"\n    state=\"good\"\n    caption=\"Use status tags to convey the current status of something.\"\n  />\n</DoubleDoDontCaution>\n\n## When not to use\n\nDon't use status tags to display anything other than status, use [static chips](/components/chips/#static-chips).\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={statusTagFig2}\n    imageAlt=\"An example of a status tag being used to display the author of a page.\"\n    state=\"bad\"\n    caption=\"Don't use status tags for anything other than denoting status.\"\n  />\n</DoubleDoDontCaution>\n\nDon't use a mix of filled and outlined status tags when using them together.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={statusTagFig3}\n    imageAlt=\"An incorrect example of filled and outlined status tags being used in the same page section.\"\n    state=\"bad\"\n    caption=\"Don't use a mix of filled and outlined status tags to show the same status messages within a group of items.\"\n  />\n</DoubleDoDontCaution>\n\n## Layout and placement\n\nWhen components are used together the size of the components should match. For example, a default sized status tag should be used with a default sized input component.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={statusTagFig4}\n    imageAlt=\"A good example of default sized status tags being used in the same section as other default sized components, and a small status tag being used in the same section as another small component.\"\n    state=\"good\"\n    caption=\"Use the correct status tag size to match other UI component sizes.\"\n  />\n  <DoDontCaution\n    imageSrc={statusTagFig5}\n    imageAlt=\"An incorrect example of small sized status tags used in the same section as other default sized components, and a default status tag being used in the same section as a small component.\"\n    state=\"bad\"\n    caption=\"Don't mix sizes when using multiple UI components.\"\n  />\n</DoubleDoDontCaution>\n\n## Content\n\n### Labels\n\nUse adjectives in the status tag label over verbs. Verbs may indicate to a user that by clicking on them the tag will be interactive.\n\nText in tags should be all capitals to increase readability.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={statusTagFig6}\n    imageAlt=\"A correct example of a status tag which has the label 'submitted'.\"\n    state=\"good\"\n    caption=\"Use adjectives to describe status. \"\n  />\n  <DoDontCaution\n    imageSrc={statusTagFig7}\n    imageAlt=\"An incorrect example of a status tag which has the label 'submit'.\"\n    state=\"bad\"\n    caption=\"Don't use verbs in status tags.\"\n  />\n</DoubleDoDontCaution>\n\nUse the right status tag type that is relevant to the label. Don't use labels which convey different information to what the status colour conveys.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={statusTagFig8}\n    imageAlt=\"A correct example of status tag labelling. The default variant has the label 'incomplete', the success variant has the label 'accepted’, the warning variant has the label 'in review', the danger variant has the label 'rejected'.\"\n    state=\"good\"\n    caption=\"Use relevant wording that supports the status tag colour.\"\n  />\n  <DoDontCaution\n    imageSrc={statusTagFig9}\n    imageAlt=\"An incorrect example of status tag labelling. The default variant has the label 'urgent', the success variant has the label 'error’, the warning variant has the label 'success', the danger variant has the label 'approved'.\"\n    state=\"bad\"\n    caption=\"Don't use wording which directly contradicts or doesn’t support the status of the tag.\"\n  />\n</DoubleDoDontCaution>\n\nUse concise labels for better readability. Longer labels will force the text to truncate.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={statusTagFig10}\n    imageAlt=\"An example of a long label being truncated.\"\n    state=\"caution\"\n    caption=\"Avoid using long labels as it will force the text to truncate.\"\n  />\n</DoubleDoDontCaution>\n\n## Related components\n\n- [Chips](/components/chips)\n",
      "path": "/components/status-tags",
      "navPriority": 22,
      "date": "2023-02-03",
      "title": "Status tag",
      "status": "BETA",
      "subTitle": "Status tags are short, clear and digestible ways to display the status of something on the page.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/status-tags",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/status-tags"
        },
        {
          "title": "Code",
          "path": "/components/status-tags/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/status-tags/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/status-tags/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.649Z",
        "lastModified": "2023-04-14T11:24:28.649Z",
        "size": 6871,
        "formattedSize": "6.7 KB"
      }
    },
    {
      "id": "components__stepper__accessibilityx",
      "contents": "\n## Easy to use for everyone\n\nThe stepper component is informational and non-interactive, acting as a visual aid to inform the user about their current progress within a form.\n\n## For Assistive Technology\n\nThe stepper is a visual aid and is non-interactive. It's therefore included in the tab-indexing for keyboard navigation as individual list items allowing it to be read out by screen readers, using the aria-current attribute.\n\n## Based on\n\nThe stepper component has been based on the following resources:\n\n- [Multi-page Forms](https://www.w3.org/WAI/tutorials/forms/multi-page/), W3C, accessed July 2022.\n- [Stepbar or multi-step process](https://a11y-guidelines.orange.com/en/web/components-examples/stepbar/), Orange, accessed July 2022.\n\n## Testing\n\nWe've tested this component against WCAG 2.1 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/stepper/accessibility",
      "date": "2023-02-03",
      "title": "Stepper",
      "status": "BETA",
      "subTitle": "A stepper is a visual representation of a user's progress through a predefined set of steps in a linear process.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/stepper",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/stepper"
        },
        {
          "title": "Code",
          "path": "/components/stepper/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/stepper/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/stepper/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.649Z",
        "lastModified": "2023-04-14T11:24:28.649Z",
        "size": 1459,
        "formattedSize": "1.4 KB"
      }
    },
    {
      "id": "components__stepper__codex",
      "contents": "\nimport { IcStepper, IcStep } from \"@ukic/react\";\n\n## Component demo\n\nexport const snippets = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-stepper>\n    <ic-step step-title=\"Order coffee\" step-type=\"completed\"></ic-step>\n    <ic-step step-title=\"Pay for order\" step-type=\"current\"></ic-step>\n    <ic-step step-title=\"Collect\" step-type=\"disabled\"></ic-step>\n</ic-stepper>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcStepper>\n    <IcStep stepTitle=\"Order coffee\" stepType=\"completed\" />\n    <IcStep stepTitle=\"Pay for order\" stepType=\"current\" />\n    <IcStep stepTitle=\"Collect\" stepType=\"disabled\" />\n</IcStepper>`,\n  },\n];\n\n<ComponentPreview snippets={snippets}>\n  <IcStepper>\n    <IcStep stepTitle=\"Order coffee\" stepType=\"completed\" />\n    <IcStep stepTitle=\"Pay for order\" stepType=\"current\" />\n    <IcStep stepTitle=\"Collect\" stepType=\"disabled\" />\n  </IcStepper>\n</ComponentPreview>\n\n## Step details\n\n<ComponentDetails component=\"ic-step\" />\n\n## Stepper details\n\n<ComponentDetails component=\"ic-stepper\" />\n\n## Variants\n\n### Compact stepper\n\nexport const compactStepper = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-stepper variant=\"compact\">\n  <ic-step step-title=\"Order coffee\" step-type=\"completed\"></ic-step>\n  <ic-step step-title=\"Pay for order\" step-type=\"current\"></ic-step>\n  <ic-step step-title=\"Collect\" step-type=\"disabled\"></ic-step>\n</ic-stepper>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcStepper variant=\"compact\">\n  <IcStep stepTitle=\"Order coffee\" stepType=\"completed\" />\n  <IcStep stepTitle=\"Pay for order\" stepType=\"current\" />\n  <IcStep stepTitle=\"Collect\" stepType=\"disabled\" />\n</IcStepper>`,\n  },\n];\n\n<ComponentPreview snippets={compactStepper}>\n  <IcStepper variant=\"compact\">\n    <IcStep stepTitle=\"Order coffee\" stepType=\"completed\" />\n    <IcStep stepTitle=\"Pay for order\" stepType=\"current\" />\n    <IcStep stepTitle=\"Collect\" stepType=\"disabled\" />\n  </IcStepper>\n</ComponentPreview>\n\n### Left-aligned\n\nexport const leftAligned = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-stepper aligned=\"left\">\n  <ic-step step-title=\"Order coffee\" step-type=\"completed\"></ic-step>\n  <ic-step step-title=\"Pay for order\" step-type=\"current\"></ic-step>\n  <ic-step step-title=\"Collect\" step-type=\"disabled\"></ic-step>\n</ic-stepper>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcStepper aligned=\"left\">\n  <IcStep stepTitle=\"Order coffee\" stepType=\"completed\" />\n  <IcStep stepTitle=\"Pay for order\" stepType=\"current\" />\n  <IcStep stepTitle=\"Collect\" stepType=\"disabled\" />\n</IcStepper>`,\n  },\n];\n\n<ComponentPreview snippets={leftAligned}>\n  <IcStepper aligned=\"left\">\n    <IcStep stepTitle=\"Order coffee\" stepType=\"completed\" />\n    <IcStep stepTitle=\"Pay for order\" stepType=\"current\" />\n    <IcStep stepTitle=\"Collect\" stepType=\"disabled\" />\n  </IcStepper>\n</ComponentPreview>\n\n### With hidden step information\n\nexport const hiddenStepInfo = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-stepper hide-step-info=\"true\">\n  <ic-step step-title=\"Order coffee\" step-type=\"completed\"></ic-step>\n  <ic-step step-title=\"Pay for order\" step-type=\"current\"></ic-step>\n  <ic-step step-title=\"Collect\" step-type=\"disabled\"></ic-step>\n</ic-stepper>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcStepper hideStepInfo>\n  <IcStep stepTitle=\"Order coffee\" stepType=\"completed\" />\n  <IcStep stepTitle=\"Pay for order\" stepType=\"current\" />\n  <IcStep stepTitle=\"Collect\" stepType=\"disabled\" />\n</IcStepper>`,\n  },\n];\n\n<ComponentPreview snippets={hiddenStepInfo}>\n  <IcStepper hideStepInfo>\n    <IcStep stepTitle=\"Order coffee\" stepType=\"completed\" />\n    <IcStep stepTitle=\"Pay for order\" stepType=\"current\" />\n    <IcStep stepTitle=\"Collect\" stepType=\"disabled\" />\n  </IcStepper>\n</ComponentPreview>\n\n### With subtitles\n\nexport const withSubtitles = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-stepper>\n  <ic-step step-title=\"Order coffee\" step-type=\"completed\"></ic-step>\n  <ic-step \n    step-title=\"Customise your order\" \n    step-subtitle=\"Optional\" \n    step-type=\"completed\" \n  >\n  </ic-step>\n  <ic-step \n    step-title=\"Pay for order\" \n    step-subtitle=\"We accept all major debit/credit cards\" \n    step-type=\"current\" \n  >\n  </ic-step>\n  <ic-step step-title=\"Collect\" step-type=\"disabled\"></ic-step>\n</ic-stepper>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcStepper>\n  <IcStep stepTitle=\"Order coffee\" stepType=\"completed\" />\n  <IcStep \n    stepTitle=\"Customise your order\" \n    stepSubtitle=\"Optional\" \n    stepType=\"completed\" \n    />\n  <IcStep \n    stepTitle=\"Pay for order\" \n    stepSubtitle=\"We accept all major debit/credit cards\" \n    stepType=\"current\" \n  />\n  <IcStep stepTitle=\"Collect\" stepType=\"disabled\"/>\n</IcStepper>`,\n  },\n];\n\n<ComponentPreview snippets={withSubtitles}>\n  <IcStepper>\n    <IcStep stepTitle=\"Order coffee\" stepType=\"completed\" />\n    <IcStep\n      stepTitle=\"Customise your order\"\n      stepSubtitle=\"Optional\"\n      stepType=\"completed\"\n    />\n    <IcStep\n      stepTitle=\"Pay for order\"\n      stepSubtitle=\"We accept all major debit/credit cards\"\n      stepType=\"current\"\n    />\n    <IcStep stepTitle=\"Collect\" stepType=\"disabled\" />\n  </IcStepper>\n</ComponentPreview>\n\n### Custom connector width\n\nexport const customConnectorWidth = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-stepper connector-width=\"150\">\n  <ic-step step-title=\"Order coffee\" step-type=\"completed\"></ic-step>\n  <ic-step step-title=\"Pay for order\" step-type=\"current\"></ic-step>\n  <ic-step step-title=\"Collect\" step-type=\"disabled\"></ic-step>\n</ic-stepper>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcStepper aligned=\"left\" connectorWidth={150}>\n  <IcStep stepTitle=\"Order coffee\" stepType=\"completed\" />\n  <IcStep stepTitle=\"Pay for order\" stepType=\"current\" />\n  <IcStep stepTitle=\"Collect\" stepType=\"disabled\" />\n</IcStepper>`,\n  },\n];\n\n<ComponentPreview snippets={customConnectorWidth}>\n  <IcStepper aligned=\"left\" connectorWidth={150}>\n    <IcStep stepTitle=\"Order coffee\" stepType=\"completed\" />\n    <IcStep stepTitle=\"Pay for order\" stepType=\"current\" />\n    <IcStep stepTitle=\"Collect\" stepType=\"disabled\" />\n  </IcStepper>\n</ComponentPreview>\n",
      "path": "/components/stepper/code",
      "date": "2023-02-03",
      "title": "Stepper",
      "status": "BETA",
      "subTitle": "A stepper is a visual representation of a user's progress through a predefined set of steps in a linear process.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/stepper",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/stepper"
        },
        {
          "title": "Code",
          "path": "/components/stepper/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/stepper/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/stepper/code.mdx",
        "createdAt": "2023-04-14T11:24:28.649Z",
        "lastModified": "2023-04-14T11:24:28.649Z",
        "size": 6694,
        "formattedSize": "6.5 KB"
      }
    },
    {
      "id": "components__stepper__guidancex",
      "contents": "\nimport { IcStepper, IcStep } from \"@ukic/react\";\nimport stepperFig1 from \"./images/fig-1-stepper-component-being-used-to-describe-the-steps-of-a-multistep-form.png\";\nimport stepperFig2 from \"./images/fig-2-use-concise-labels-within-a-stepper.png\";\nimport stepperFig3 from \"./images/fig-3-dont-use-long-labels-within-a-stepper.png\";\nimport stepperFig4 from \"./images/fig-4-a-stepper-accompanied-by-a-page-title-showing-how-the-stepper-should-be-implemented.png\";\nimport stepperFig5 from \"./images/fig-5-dont-use-a-compact-stepper-if-the-page-content-does-not-include-the-step-name-in-a-heading.png\";\nimport stepperFig6 from \"./images/fig-6-a-stepper-that-is-leftaligned-at-the-top-of-the-page-showing-how-the-stepper-should-be-implemented.png\";\nimport stepperFig7 from \"./images/fig-7-a-stepper-that-is-centrealigned-at-the-top-of-the-page-showing-how-the-stepper-should-not-be-implemented.png\";\nimport stepperFig8 from \"./images/fig-8-use-compact-stepper-when-there-is-not-much-room.png\";\n\n## Introduction\n\nAn example of the stepper component.\n\n<ComponentPreview>\n  <IcStepper>\n    <IcStep stepTitle=\"Order coffee\" stepType=\"completed\" />\n    <IcStep stepTitle=\"Pay for order\" stepType=\"current\" />\n    <IcStep stepTitle=\"Collect\" stepType=\"disabled\" />\n  </IcStepper>\n</ComponentPreview>\n\n## Component variants\n\n### Default\n\nUse the default stepper when you have the available space.\n\n### Compact\n\nUse the compact variant for compact layouts or processes with many steps.\n\n## When to use\n\nUse steppers when a multi-step linear process is required. Steps are displayed from left to right and show the direction of movement through the process.\n\n<DoDontCaution\n  imageSrc={stepperFig1}\n  imageAlt=\"An image showing a form titled 'Make a coffee' featuring a stepper with four steps, titled 'Take order', 'Make drink', 'Take payment', and 'Finish'. The first step is selected, and the page below shows three input fields and a button labelled 'Confirm order'.\"\n  state=\"good\"\n  caption=\"Stepper component being used to describe the steps of a multi-step form.\"\n/>\n\nAlways indicate which step the user is currently on. This gives a sense of control and describes their position in the process in relation to where they have been, as well as how much they have left to do.\n\n## When not to use\n\nDon't use the stepper to indicate a non-linear process where steps can be completed in any order. Linear processes require each step to be completed in order.\n\n## Interaction behaviour\n\n### Steps\n\nSteps are single elements which together form the stepper. Steps have 4 different states:\n\n- Active: Indicates that the step is available but not yet completed by the user. This step type is rendered as current if displayed in the compact stepper.\n\n- Current: Shows the step the user is currently on.\n\n- Completed: Shows a previous step which has been completed by the user.\n\n- Disabled: Shows a step that is unavailable. This could be because it's conditional on another step. If a step is always unavailable, then it should not be included in the stepper when it's loaded.\n\n<ComponentPreview>\n  <IcStepper>\n    <IcStep stepTitle=\"Add details\" stepType=\"completed\" />\n    <IcStep stepTitle=\"Customer\" stepType=\"current\" />\n    <IcStep stepTitle=\"Upload\" />\n    <IcStep stepTitle=\"Submit\" stepType=\"disabled\" />\n  </IcStepper>\n</ComponentPreview>\n\n## Layout and placement\n\nAlways align steppers to the left and place them above the main body content of the page.\n\n<DoDontCaution\n  imageSrc={stepperFig6}\n  imageAlt=\"An image showing a stepper with four steps, titled 'Warm kettle', 'Add milk', 'Pour water', and 'Drink coffee'. The first step is selected, and the stepper is accurately placed at the top-left of a page.\"\n  state=\"good\"\n  caption=\"A stepper that is left-aligned at the top of the page, showing how the stepper should be implemented.\"\n/>\n\n<DoDontCaution\n  imageSrc={stepperFig7}\n  imageAlt=\"An image showing a stepper with four steps, titled 'Warm kettle', 'Add milk’, 'Pour water’, and 'Drink coffee'. The first step is selected, and the stepper is incorrectly placed in the centre of a page.\"\n  state=\"bad\"\n  caption=\"A stepper that is centre-aligned at the top of the page, showing how the stepper should not be implemented.\"\n/>\n\nWhen a stepper is too large to fit comfortably within its container, it will switch to use the compact stepper. This shows the current step along with its status, as well as the next step in the process.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={stepperFig8}\n    imageAlt=\"A compact stepper showing the current step labelled 'warm kettle' and the next step label 'add milk'.\"\n    state=\"good\"\n    caption=\"The compact stepper shows the current step as well as the next step in the process.\"\n  />\n</DoubleDoDontCaution>\n\n## Content\n\n### Labels\n\nUse the step title to describe each step concisely in one or two words. Avoid using lengthy step titles.\n\n<DoDontCaution\n  imageSrc={stepperFig2}\n  imageAlt=\"An image showing a stepper with four steps, labelled 'Take order', 'make drink', 'Take payment', and 'Finish’. The first step is selected.\"\n  state=\"good\"\n  caption=\"Use concise labels within a stepper.\"\n/>\n\n<DoDontCaution\n  imageSrc={stepperFig3}\n  imageAlt=\"An image showing a stepper with four steps, each with very long labels. The first step is selected.\"\n  state=\"caution\"\n  caption=\"Avoid using long labels within a stepper.\"\n/>\n\nWhen a stepper is used, always use page titles and section headings on the page content itself.\n\n<DoDontCaution\n  imageSrc={stepperFig4}\n  imageAlt=\"An image showing a form titled 'Make a coffee' featuring a stepper with four steps, labelled 'Take order', 'Make drink', 'Take payment', and 'Finish’. The first step, 'Take order', is selected, and the page below shows three input fields and a button labelled 'Confirm order'.\"\n  state=\"good\"\n  caption=\"A stepper accompanied by a page title, showing how the stepper should be implemented.\"\n/>\n\nHide step information only if the step content is clearly labelled itself. Do not omit step labels if no headings are provided in the step content.\n\n<DoDontCaution\n  imageSrc={stepperFig5}\n  imageAlt=\"An image showing a form without a heading featuring a stepper with 4 steps, each without a label. The first unlabelled step is selected, and the page below shows three input fields and a button labelled ‘Confirm order’.\"\n  state=\"bad\"\n  caption=\"Don’t use a stepper without step labels if the page content does not include the step name in a heading.\"\n/>\n\nSet a step status to show whether the step is required or optional in the step's subtitle. Override the step subtitle text to provide a custom message.\n\n### Validation\n\nValidate each step as the user moves through the process. Use the standard error handling approach to display inline [alerts](/components/alerts) and error messages if the user attempts to proceed to the next step without first completing the current step correctly.\n",
      "path": "/components/stepper",
      "navPriority": 23,
      "date": "2023-02-03",
      "title": "Stepper",
      "status": "BETA",
      "subTitle": "A stepper is a visual representation of a user's progress through a predefined set of steps in a linear process.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/stepper",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/stepper"
        },
        {
          "title": "Code",
          "path": "/components/stepper/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/stepper/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/stepper/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.649Z",
        "lastModified": "2023-04-14T11:24:28.649Z",
        "size": 7480,
        "formattedSize": "7.3 KB"
      }
    },
    {
      "id": "components__switch__accessibilityx",
      "contents": "\n## Easy to use for everyone\n\nA switch is selected or unselected using the **space bar** key when focused.\n\nAdditional I/O visuals have been added to assist to the understanding of which state of the switch means 'on' and which means 'off'.\n\nHigh contrast colours have been used to emphasise the difference between 'on' and 'off' states. The conventional positioning of a switch's handle on the right-hand side also denotes the 'on' state.\n\n## For Assistive Technology\n\nSwitches use the ARIA `switch` role so that the change of state is announced by screen readers.\n\n## Based on\n\nThe switch component has been based on the following resources:\n\n- [ARIA: switch role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/Switch_role), MDN web docs, accessed July 2022.\n- [Toggle Buttons](https://inclusive-components.design/toggle-button/), Inclusive Components, accessed July 2022.\n- [On Designing and Building Toggle Switches](https://www.sarasoueidan.com/blog/toggle-switch-design/), Sara Soueidan, accessed July 2022.\n- [Toggle-Switch Guidelines](https://www.nngroup.com/articles/toggle-switch-guidelines/), Alita Joyce - Nielsen Norman Group, accessed July 2022.\n- [Updated Switch script & more](https://www.scottohara.me/note/2019/04/03/switch-script.html), Scott O'Hara, accessed July 2022.\n- [An accessible toggle](https://kittygiraudel.com/2021/04/05/an-accessible-toggle/), Kitty Giraudel, accessed July 2022.\n- [Switch Component: Toggle Button](https://scottaohara.github.io/a11y_styled_form_controls/src/toggle-button-switch/), Scott O'Hara, accessed July 2022.\n\n## Testing\n\nWe've tested this component against WCAG 2.1 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/switch/accessibility",
      "date": "2023-02-03",
      "title": "Switch",
      "status": "BETA",
      "subTitle": "Switches are used to quickly toggle an option on or off.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/switch",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/switch"
        },
        {
          "title": "Code",
          "path": "/components/switch/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/switch/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/switch/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.653Z",
        "lastModified": "2023-04-14T11:24:28.653Z",
        "size": 2242,
        "formattedSize": "2.2 KB"
      }
    },
    {
      "id": "components__switch__codex",
      "contents": "\nimport { IcSwitch } from \"@ukic/react\";\n\n## Component demo\n\nexport const snippetsDefault = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-switch label=\"Unlimited coffee\"></ic-switch>\n<script>\n  const switch = document.querySelector('ic-switch');\n  switch.addEventListener('icChange', (ev) => {\n    console.log({\n      checked: ev.detail.checked,\n      value: ev.detail.value\n    })\n  })\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSwitch\n  label=\"Unlimited coffee\"\n  onIcChange={(ev) => console.log({ \n    checked: ev.detail.checked, \n    value: ev.detail.value\n  })}\n/>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsDefault}>\n  <IcSwitch\n    label=\"Unlimited coffee\"\n    onIcChange={(ev) =>\n      console.log({\n        checked: ev.detail.checked,\n        value: ev.detail.value,\n      })\n    }\n  />\n</ComponentPreview>\n\n## Switch details\n\n<ComponentDetails component=\"ic-switch\" />\n\n## Variants\n\n### State\n\nexport const snippetsState = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-switch label=\"Unlimited coffee\" show-state=\"true\"></ic-switch>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSwitch label=\"Unlimited coffee\" showState/>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsState}>\n  <IcSwitch label=\"Unlimited coffee\" showState />\n</ComponentPreview>\n\n### Small\n\nexport const snippetsSmall = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-switch label=\"Unlimited coffee\" show-state=\"true\" small=\"true\"></ic-switch>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSwitch label=\"Unlimited coffee\" showState small/>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsSmall}>\n  <IcSwitch label=\"Unlimited coffee\" showState small />\n</ComponentPreview>\n\n### Disabled\n\nexport const snippetsDisabled = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-switch label=\"Unlimited coffee\" show-state=\"true\" disabled=\"true\"></ic-switch>\n<ic-switch label=\"Unlimited coffee\" show-state=\"true\" disabled=\"true\" checked=\"true\"></ic-switch>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSwitch label=\"Unlimited coffee\" showState disabled/>\n<IcSwitch label=\"Unlimited coffee\" showState disabled checked/>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsDisabled}>\n  <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"8px\" }}>\n    <IcSwitch label=\"Unlimited coffee\" showState disabled />\n    <IcSwitch label=\"Unlimited coffee\" showState disabled checked />\n  </div>\n</ComponentPreview>\n\n### Helper text and right adornment\n\nexport const snippetsHelperAndAdornment = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-switch label=\"Unlimited coffee\" helper-text=\"Helper Text\">\n  <svg slot=\"right-adornment\" ...></svg>\n</ic-switch>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcSwitch label=\"Unlimited coffee\" helperText=\"Helper Text\">\n  <SlottedSVG slot=\"right-adornment\" ... />\n</IcSwitch>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsHelperAndAdornment}>\n  <IcSwitch label=\"Unlimited coffee\" helperText=\"Helper Text\">\n    <svg\n      slot=\"right-adornment\"\n      width=\"16\"\n      height=\"16\"\n      viewBox=\"0 0 16 16\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M8 8C10.21 8 12 6.21 12 4C12 1.79 10.21 0 8 0C5.79 0 4 1.79 4 4C4 6.21 5.79 8 8 8ZM8 10C5.33 10 0 11.34 0 14V16H16V14C16 11.34 10.67 10 8 10Z\"\n        fill=\"black\"\n      />\n    </svg>\n  </IcSwitch>\n</ComponentPreview>\n",
      "path": "/components/switch/code",
      "date": "2023-02-06",
      "title": "Switch",
      "status": "BETA",
      "subTitle": "Switches are used to quickly toggle an option on or off.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/switch",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/switch"
        },
        {
          "title": "Code",
          "path": "/components/switch/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/switch/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/switch/code.mdx",
        "createdAt": "2023-04-14T11:24:28.653Z",
        "lastModified": "2023-04-14T11:24:28.653Z",
        "size": 3861,
        "formattedSize": "3.8 KB"
      }
    },
    {
      "id": "components__switch__guidancex",
      "contents": "\nimport { IcSwitch, IcTypography } from \"@ukic/react\";\nimport switchVid1 from \"./images/anim-1-avoid-change-a-switch-state-from-a-different-trigger.mp4\";\nimport switchVid2 from \"./images/anim-2-dont-change-switch-label-at-same-time-as-switch-state.mp4\";\nimport switchFig1 from \"./images/fig-1-make-sure-switch-changes-take-effect-immediately.png\";\nimport switchFig2 from \"./images/fig-2-dont-use-a-separate-trigger-to-make-switch-changes-take-effect.png\";\nimport switchFig3 from \"./images/fig-3-dont-use-a-switch-for-yes-no-answers.png\";\nimport switchFig4 from \"./images/fig-4-give-switches-clear-labels.png\";\nimport switchFig5 from \"./images/fig-5-dont-give-switches-ambiguous-labels.png\";\nimport switchFig6 from \"./images/fig-6-dont-mix-switches-with-icons-with-switches-without-icons.png\";\n\n## Introduction\n\nAn example of the switch component.\n\n<ComponentPreview>\n  <IcSwitch label=\"Unlimited coffee\" />\n</ComponentPreview>\n\n## When to use\n\nUse switches to turn a single option 'on' or 'off' and when you want the selection to take immediate effect.\n\nUse switches when there is an obvious default value: either 'on' or 'off'.\n\n## When not to use\n\nDon't use a switch when the selection of the option should take effect after a separate trigger such as a submit button. Instead, use a single [checkbox](/components/checkboxes).\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={switchFig1}\n    imageAlt=\"An example settings panel with text that says 'Your changes will take place immediately'. Three switches are displayed for 'notifications', 'don't disturb' and 'night mode'.\"\n    state=\"good\"\n    caption=\"Make sure the change in a switch's state causes immediate effect.\"\n  />\n  <DoDontCaution\n    imageSrc={switchFig2}\n    imageAlt=\"An example settings panel with text that says 'Remember to save your changes'. Three switches are displayed for 'notifications', 'don't disturb' and 'night mode'. A button that says 'Save changes' sits below the switches. \"\n    state=\"bad\"\n    caption=\"Don't use a separate trigger to make the change in state take effect.\"\n  />\n</DoubleDoDontCaution>\n\nSwitches always have a default state: either 'on' or 'off'. Don't use a switch if there is no default setting. Instead, use checkboxes or two [radio buttons](/components/radio).\n\nDon't use a switch as an input in a form. Use them to instantaneously control a single option.\n\nDon't use a switch for 'yes' or 'no' answers. Use two [radio buttons](/components/radio) instead.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={switchFig3}\n    imageAlt=\"An example settings panel with a single switch with a heading that says 'Do you want to receive notifications?''. The switch is in the 'on' position and it has a label that says 'Yes'.\"\n    state=\"bad\"\n    caption=\"Don't use a switch for 'yes' or 'no' answers.\"\n  />\n</DoubleDoDontCaution>\n\n## Interaction behaviour\n\nAvoid automatically altering a switch's state based on another trigger. A change in a switch's state should always be the user's decision.\n\n<video width=\"50%\" muted controls loop>\n  <source src={switchVid1} type=\"video/mp4\" />\n</video>\n\n<IcTypography\n  variant=\"label\"\n  style={{ marginTop: \"-16px\", marginBottom: \"24px\" }}\n>\n  Avoid changing a switches state without the user’s specific instruction.\n</IcTypography>\n\n## Sizing\n\nUse a default sized switch in most scenarios where other default sized components are used.\n\nUse a small sized switch with other small sized components for compact layouts.\n\n## Content\n\nUse clear labels so that it's obvious what the switch will do when in the 'on' or 'off' position. Don't make them neutral or ambiguous. The switch should read 'Label: on' or 'Label: off'.\n\nFor example, a switch to turn notifications 'on' or 'off', with a label that says 'Notifications', is understandable when read as 'Notifications: on' and 'Notifications: off'. If the label said 'Turn notifications off', it's ambiguous and more difficult to understand what the 'on' and 'off' position will do.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={switchFig4}\n    imageAlt=\"An example settings panel with a single switch in the 'off' position. It's label says 'Notifications'.\"\n    state=\"good\"\n    caption=\"Give switches labels that make it clear what the switch will do in either the 'on' or 'off' position.\"\n  />\n  <DoDontCaution\n    imageSrc={switchFig5}\n    imageAlt=\"An example settings panel with a single switch in the 'off' position. It's label says 'Turn notifications off?'.\"\n    state=\"bad\"\n    caption=\"Don't give switches ambiguous labels that makes it hard to understand what the switch will do.\"\n  />\n</DoubleDoDontCaution>\n\nAvoid using additional labels that say 'on' or 'off' in the switch label. The position of the switch describes this itself. Changing the label between state changes makes it difficult to understand the current state.\n\n<video width=\"50%\" muted controls loop>\n  <source src={switchVid2} type=\"video/mp4\" />\n</video>\n\n<IcTypography\n  variant=\"label\"\n  style={{ marginTop: \"-16px\", marginBottom: \"24px\" }}\n>\n  Don’t change the switch’s label at the same time as the state changes.\n</IcTypography>\n\nUse an icon with a switch label only if it aids the recognition of the option.\n\nDon't group switches with icons with other switches without icons.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={switchFig6}\n    imageAlt=\"An example settings panel with three switches. The first switch is on with a label that says 'Notifications'. The second switch is off with a label that says 'Don't disturb'. The third switch is off with a label that includes a moon icon and says 'Night mode'.\"\n    state=\"bad\"\n    caption=\"Don't mix switches with icons with switches without icons.\"\n  />\n</DoubleDoDontCaution>\n",
      "path": "/components/switch",
      "navPriority": 24,
      "date": "2023-02-03",
      "title": "Switch",
      "status": "BETA",
      "subTitle": "Switches are used to quickly toggle an option on or off.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/switch",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/switch"
        },
        {
          "title": "Code",
          "path": "/components/switch/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/switch/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/switch/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.653Z",
        "lastModified": "2023-04-14T11:24:28.653Z",
        "size": 6214,
        "formattedSize": "6.1 KB"
      }
    },
    {
      "id": "components__tabs__accessibilityx",
      "contents": "\n## Easy to use for everyone\n\nWe’ve made sure that tabs are easy to use for people who use a keyboard to navigate. The tab bar acts as a single focusable element, whilst its tabs can be individually focused using the **arrow** keys. This avoids the user having to move focus through every tab in order to reach the content.\n\nInstead, they move focus into the tab bar, focus on the tab they wish to view using the **arrow** keys, select it using the **space** or **enter** key, and can then directly move focus to the content within the selected tab. Using **shift+tab** moves focus back to the tab bar and highlights the currently selected tab.\n\nUsing the **home** key moves focus to the first tab in the tab bar, and the **end** key moves focus to the last tab.\n\nWhen a compact version of a tab bar is displayed, the tabs can be accessed using the same keyboard functionality described above. When focus is moved to different tabs, the compact tab bar automatically scrolls to show the currently focused tab in the visible area.\n\n## For Assistive Technology\n\nUsing the arrow keys in screen readers allows people to move between all elements of the page. When a selected tab is focused on, the down arrow key would tell the screen reader to move to the first element within the tab's content. Each tab container is labelled by the tab it relates to so that the relationship between them is clear when using a screen reader.\n\n## Based on\n\nThis tabs component is based on the following resources:\n\n- [Tabbed Interfaces, Inclusive Components](https://inclusive-components.design/tabbed-interfaces/), Heydon Pickering, accessed March 2022.\n- [Example of tabs with automatic activation](https://www.w3.org/TR/wai-aria-practices/examples/tabs/tabs-1/tabs.html), w3, accessed March 2022.\n- [Example of tabs with manual activation](https://www.w3.org/TR/wai-aria-practices/examples/tabs/tabs-2/tabs.html), w3, accessed March 2022.\n- [Deciding when to make selection automatically follow focus](https://www.w3.org/TR/wai-aria-practices/#kbd_selection_follows_focus), WAI Aria Practices, accessed March 2022.\n\n## Testing\n\nWe've tested this component against WCAG 2.1 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/tabs/accessibility",
      "date": "2023-02-03",
      "title": "Tabs",
      "status": "BETA",
      "subTitle": "Tabs let users navigate between content within the same context. Tabs organise complex layouts by moving content into multiple sections.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/tabs",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/tabs"
        },
        {
          "title": "Code",
          "path": "/components/tabs/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/tabs/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/tabs/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.657Z",
        "lastModified": "2023-04-14T11:24:28.657Z",
        "size": 2821,
        "formattedSize": "2.8 KB"
      }
    },
    {
      "id": "components__tabs__codex",
      "contents": "\nimport { IcTab, IcTabContext, IcTabGroup, IcTabPanel } from \"@ukic/react\";\n\n## Component demo\n\nexport const snippets = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-tab-context>\n  <ic-tab-group label=\"Example tab group\">\n    <ic-tab>One</ic-tab>\n    <ic-tab>Two</ic-tab>\n    <ic-tab>Three</ic-tab>\n  </ic-tab-group>\n  <ic-tab-panel>Tab One</ic-tab-panel>\n  <ic-tab-panel>Tab Two</ic-tab-panel>\n  <ic-tab-panel>Tab Three</ic-tab-panel>\n</ic-tab-context>\n<script>\n  const tabContext = document.querySelector('ic-tab-context');\n  tabContext.addEventListener('icTabSelect', (ev) => console.log(ev.detail.tabIndex))\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcTabContext onIcTabSelect={(ev) => console.log(ev.detail.tabIndex)}>\n  <IcTabGroup label=\"Example tab group\">\n    <IcTab>One</IcTab>\n    <IcTab>Two</IcTab>\n    <IcTab>Three</IcTab>\n  </IcTabGroup>\n  <IcTabPanel>Tab One</IcTabPanel>\n  <IcTabPanel>Tab Two</IcTabPanel>\n  <IcTabPanel>Tab Three</IcTabPanel>\n</IcTabContext>`,\n  },\n];\n\n<ComponentPreview snippets={snippets}>\n  <IcTabContext onIcTabSelect={(ev) => console.log(ev.detail.tabIndex)}>\n    <IcTabGroup label=\"Example tab group\">\n      <IcTab>One</IcTab>\n      <IcTab>Two</IcTab>\n      <IcTab>Three</IcTab>\n    </IcTabGroup>\n    <IcTabPanel>Tab One</IcTabPanel>\n    <IcTabPanel>Tab Two</IcTabPanel>\n    <IcTabPanel>Tab Three</IcTabPanel>\n  </IcTabContext>\n</ComponentPreview>\n\n## Tab details\n\n<ComponentDetails component=\"ic-tab\" />\n\n## Tab context details\n\n<ComponentDetails component=\"ic-tab-context\" />\n\n## Tab list details\n\n<ComponentDetails component=\"ic-tab-group\" />\n\n## Tab panel details\n\n<ComponentDetails component=\"ic-tab-panel\" />\n\n## Variants\n\n### With icons\n\nexport const withIcons = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-tab-context>\n  <ic-tab-group label=\"Example tab group\">\n    <ic-tab>\n      One\n      <svg slot=\"icon\">...</svg>\n    </ic-tab>\n    <ic-tab>\n      Two\n      <svg slot=\"icon\">...</svg>\n    </ic-tab>\n    <ic-tab>\n      Three\n      <svg slot=\"icon\">...</svg>\n    </ic-tab>\n  </ic-tab-group>\n  <ic-tab-panel>Tab One</ic-tab-panel>\n  <ic-tab-panel>Tab Two</ic-tab-panel>\n  <ic-tab-panel>Tab Three</ic-tab-panel>\n</ic-tab-context>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcTabContext>\n  <IcTabGroup label=\"Example tab group\">\n    <IcTab>\n      One\n      <SlottedSVG slot=\"icon\" ... />\n    </IcTab>\n    <IcTab>\n      Two\n      <SlottedSVG slot=\"icon\" ... />\n    </IcTab>\n    <IcTab>\n      Three\n      <SlottedSVG slot=\"icon\" ... />\n    </IcTab>\n  </IcTabGroup>\n  <IcTabPanel>Tab One</IcTabPanel>\n  <IcTabPanel>Tab Two</IcTabPanel>\n  <IcTabPanel>Tab Three</IcTabPanel>\n</IcTabContext>`,\n  },\n];\n\n<ComponentPreview snippets={withIcons}>\n  <IcTabContext>\n    <IcTabGroup label=\"Example tab group\">\n      <IcTab>\n        One\n        <svg\n          slot=\"icon\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          height=\"24px\"\n          viewBox=\"0 0 24 24\"\n          width=\"24px\"\n          fill=\"#000000\"\n        >\n          <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n          <path d=\"M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z\" />\n        </svg>\n      </IcTab>\n      <IcTab>\n        Two\n        <svg\n          slot=\"icon\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          height=\"24px\"\n          viewBox=\"0 0 24 24\"\n          width=\"24px\"\n          fill=\"#000000\"\n        >\n          <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n          <path d=\"M19 3H4.99c-1.11 0-1.98.89-1.98 2L3 19c0 1.1.88 2 1.99 2H19c1.1 0 2-.9 2-2V5c0-1.11-.9-2-2-2zm0 12h-4c0 1.66-1.35 3-3 3s-3-1.34-3-3H4.99V5H19v10z\" />\n        </svg>\n      </IcTab>\n      <IcTab>\n        Three\n        <svg\n          slot=\"icon\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          height=\"24px\"\n          viewBox=\"0 0 24 24\"\n          width=\"24px\"\n          fill=\"#000000\"\n        >\n          <path d=\"M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z\" />\n        </svg>\n      </IcTab>\n    </IcTabGroup>\n    <IcTabPanel>Tab One</IcTabPanel>\n    <IcTabPanel>Tab Two</IcTabPanel>\n    <IcTabPanel>Tab Three</IcTabPanel>\n  </IcTabContext>\n</ComponentPreview>\n\n### Disabled\n\nexport const disabled = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-tab-context>\n  <ic-tab-group label=\"Example tab group\">\n    <ic-tab>One</ic-tab>\n    <ic-tab disabled=\"true\">Two</ic-tab>\n    <ic-tab>Three</ic-tab>\n  </ic-tab-group>\n  <ic-tab-panel>Tab One</ic-tab-panel>\n  <ic-tab-panel>Tab Two</ic-tab-panel>\n  <ic-tab-panel>Tab Three</ic-tab-panel>\n</ic-tab-context>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcTabContext>\n  <IcTabGroup label=\"Example tab group\">\n    <IcTab>One</IcTab>\n    <IcTab disabled>Two</IcTab>\n    <IcTab>Three</IcTab>\n  </IcTabGroup>\n  <IcTabPanel>Tab One</IcTabPanel>\n  <IcTabPanel>Tab Two</IcTabPanel>\n  <IcTabPanel>Tab Three</IcTabPanel>\n</IcTabContext>`,\n  },\n];\n\n<ComponentPreview snippets={disabled}>\n  <IcTabContext>\n    <IcTabGroup label=\"Example tab group\">\n      <IcTab>One</IcTab>\n      <IcTab disabled>Two</IcTab>\n      <IcTab>Three</IcTab>\n    </IcTabGroup>\n    <IcTabPanel>Tab One</IcTabPanel>\n    <IcTabPanel>Tab Two</IcTabPanel>\n    <IcTabPanel>Tab Three</IcTabPanel>\n  </IcTabContext>\n</ComponentPreview>\n\n### Light\n\nexport const light = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-tab-context appearance=\"light\">\n  <ic-tab-group label=\"Example tab group\">\n    <ic-tab>One</ic-tab>\n    <ic-tab>Two</ic-tab>\n    <ic-tab>Three</ic-tab>\n  </ic-tab-group>\n  <ic-tab-panel>Tab One</ic-tab-panel>\n  <ic-tab-panel>Tab Two</ic-tab-panel>\n  <ic-tab-panel>Tab Three</ic-tab-panel>\n</ic-tab-context>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcTabContext appearance=\"light\">\n  <IcTabGroup label=\"Example tab group\">\n    <IcTab>One</IcTab>\n    <IcTab>Two</IcTab>\n    <IcTab>Three</IcTab>\n  </IcTabGroup>\n  <IcTabPanel>Tab One</IcTabPanel>\n  <IcTabPanel>Tab Two</IcTabPanel>\n  <IcTabPanel>Tab Three</IcTabPanel>\n</IcTabContext>`,\n  },\n];\n\n<ComponentPreview snippets={light} style={{ backgroundColor: \"#2c2f34\" }}>\n  <IcTabContext appearance=\"light\">\n    <IcTabGroup label=\"Example tab group\">\n      <IcTab>One</IcTab>\n      <IcTab>Two</IcTab>\n      <IcTab>Three</IcTab>\n    </IcTabGroup>\n    <IcTabPanel>Tab One</IcTabPanel>\n    <IcTabPanel>Tab Two</IcTabPanel>\n    <IcTabPanel>Tab Three</IcTabPanel>\n  </IcTabContext>\n</ComponentPreview>\n\n### Compact\n\nexport const compact = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-tab-context>\n  <div style={{ width: \"60%\", margin: \"auto\" }}>\n    <ic-tab-group label=\"Example tab group\">\n      <ic-tab>One</ic-tab>\n      <ic-tab>Two</ic-tab>\n      <ic-tab>Three</ic-tab>\n      <ic-tab>Four</ic-tab>\n      <ic-tab>Five</ic-tab>\n    </ic-tab-group>\n    <ic-tab-panel>Tab One</ic-tab-panel>\n    <ic-tab-panel>Tab Two</ic-tab-panel>\n    <ic-tab-panel>Tab Three</ic-tab-panel>\n    <ic-tab-panel>Tab Four</ic-tab-panel>\n    <ic-tab-panel>Tab Five</ic-tab-panel>\n  </div>\n</ic-tab-context>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcTabContext>\n  <div style={{ width: \"60%\", margin: \"auto\" }}>\n    <IcTabGroup label=\"Example tab group\">\n      <IcTab>One</IcTab>\n      <IcTab>Two</IcTab>\n      <IcTab>Three</IcTab>\n      <IcTab>Four</IcTab>\n      <IcTab>Five</IcTab>\n    </IcTabGroup>\n    <IcTabPanel>Tab One</IcTabPanel>\n    <IcTabPanel>Tab Two</IcTabPanel>\n    <IcTabPanel>Tab Three</IcTabPanel>\n    <IcTabPanel>Tab Four</IcTabPanel>\n    <IcTabPanel>Tab Five</IcTabPanel>\n  </div>\n</IcTabContext>`,\n  },\n];\n\n<ComponentPreview snippets={compact}>\n  <IcTabContext>\n    <div style={{ width: \"60%\", margin: \"auto\" }}>\n      <IcTabGroup label=\"Example tab group\">\n        <IcTab>One</IcTab>\n        <IcTab>Two</IcTab>\n        <IcTab>Three</IcTab>\n        <IcTab>Four</IcTab>\n        <IcTab>Five</IcTab>\n      </IcTabGroup>\n      <IcTabPanel>Tab One</IcTabPanel>\n      <IcTabPanel>Tab Two</IcTabPanel>\n      <IcTabPanel>Tab Three</IcTabPanel>\n      <IcTabPanel>Tab Four</IcTabPanel>\n      <IcTabPanel>Tab Five</IcTabPanel>\n    </div>\n  </IcTabContext>\n</ComponentPreview>\n",
      "path": "/components/tabs/code",
      "date": "2023-02-06",
      "title": "Tabs",
      "status": "BETA",
      "subTitle": "Tabs let users navigate between content within the same context. Tabs organise complex layouts by moving content into multiple sections.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/tabs",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/tabs"
        },
        {
          "title": "Code",
          "path": "/components/tabs/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/tabs/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/tabs/code.mdx",
        "createdAt": "2023-04-14T11:24:28.657Z",
        "lastModified": "2023-04-14T11:24:28.657Z",
        "size": 8670,
        "formattedSize": "8.5 KB"
      }
    },
    {
      "id": "components__tabs__guidancex",
      "contents": "\nimport { IcTab, IcTabContext, IcTabGroup, IcTabPanel } from \"@ukic/react\";\nimport tabsFig1 from \"./images/fig-1-light-tab-bar-example.png\";\nimport tabsFig2 from \"./images/fig-2-dark-tab-bar-example.png\";\nimport tabsFig3 from \"./images/fig-3-dont-separate-the-tab-container-from-the-tab-bar.png\";\nimport tabsFig4 from \"./images/fig-4-compact-tab-presentation.png\";\nimport tabsFig5 from \"./images/fig-5-keep-labels-concise.png\";\nimport tabsFig6 from \"./images/fig-6-dont-use-long-labels.png\";\nimport tabsFig7 from \"./images/fig-7-avoid-using-too-many-tabs.png\";\nimport tabsFig8 from \"./images/fig-8-use-clear-icons-for-tabs.png\";\nimport tabsFig9 from \"./images/fig-9-dont-use-ambiguous-icons.png\";\nimport tabsFig10 from \"./images/fig-10-dont-mix-icon-tabs-with-normal-tabs.png\";\n\n## Introduction\n\nAn example of the tab component.\n\n<ComponentPreview>\n  <IcTabContext>\n    <IcTabGroup label=\"Example tab group\">\n      <IcTab>One</IcTab>\n      <IcTab>Two</IcTab>\n      <IcTab>Three</IcTab>\n    </IcTabGroup>\n    <IcTabPanel>Tab One</IcTabPanel>\n    <IcTabPanel>Tab Two</IcTabPanel>\n    <IcTabPanel>Tab Three</IcTabPanel>\n  </IcTabContext>\n</ComponentPreview>\n\n## When to use\n\nUse tabs to organise large amounts of related content into different sections and allow people to quickly switch between them. Tabs display one section at a time.\n\nAlways consider the amount of content presented in one page and decide if it can be reduced or split across multiple pages to make it more digestible instead of placing into tabs.\n\n## When not to use\n\nDon’t use tabs if the order of the content is important, such as in a checkout process. Instead use a [stepper](/components/stepper) to order the sections into a linear process.\n\nDon’t use tabs if the content on different tabs needs to be compared.\n\n## Colour\n\nUse a dark tab bar on light backgrounds and use a light tab bar on darker backgrounds.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={tabsFig1}\n    imageAlt=\"A recipe site showing a recipe titled ‘Hazelnut macchiato recipe’. The recipe sits on a white background and has a dark tab bar with two tabs for ‘Ingredients’ and ‘Method’.\"\n    state=\"good\"\n    caption=\"Use a dark tab bar on light backgrounds.\"\n  />\n  <DoDontCaution\n    imageSrc={tabsFig2}\n    imageAlt=\"A recipe site showing a recipe titled ‘Hazelnut macchiato recipe’. The recipe sits on a dark blue background and has a light tab bar with two tabs for ‘Ingredients’ and ‘Method’.\"\n    state=\"good\"\n    caption=\"Use a light tab bar on dark backgrounds.\"\n  />\n</DoubleDoDontCaution>\n\n## Layout and placement\n\nAlways place tabs directly above the content container that they control.\n\nDon’t position tabs so that they are unconnected from the content that belongs to them.\n\n<DoDontCaution\n  imageSrc={tabsFig3}\n  imageAlt=\"A recipe site showing a page titled ‘Hazelnut macchiato recipe’. The page title has a tab bar showing two tabs ‘Ingredients’ and ‘Method’. Between the tab bar and the tab container is a link to ‘our menu’.\"\n  state=\"bad\"\n  caption=\"Don’t separate the tab container from the tab bar.\"\n/>\n\nOn smaller screen sizes, tab bars with a large number of tabs will collapse into a compact tab selector instead.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={tabsFig4}\n    imageAlt=\"A recipe site showing a page titled ‘Hazelnut macchiato recipe’. The page title has a tab bar showing a series of tabs. Three tabs are viewable on the screen and scroll buttons are displayed in the tab bar indicating that more tabs can be scrolled into view.\"\n    state=\"good\"\n    caption=\"A tab bar showing multiple tabs in a compact layout. Scroll controls are added to navigate through the tab bar.\"\n  />\n</DoubleDoDontCaution>\n\n## Content\n\n### Labels\n\nKeep labels short and informative so that the tab’s content is clear. Tab labels always display on one line, so keeping them short means that more tabs can be displayed if required.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={tabsFig5}\n    imageAlt=\"A recipe page showing a tab bar with two tabs labelled ‘Ingredients’ and ‘Method’.\"\n    state=\"good\"\n    caption=\"Use concise labels on tabs.\"\n  />\n  <DoDontCaution\n    imageSrc={tabsFig6}\n    imageAlt=\"A recipe page showing a tab bar with two tabs labelled ‘This is what goes in it’ and 'How it's made’.\"\n    state=\"bad\"\n    caption=\"Don’t use long labels.\"\n  />\n</DoubleDoDontCaution>\n\n### Order of tabs\n\nArrange the tabs in an order that makes the most sense in context. Always show the first tab by default when the page loads. Place the most important content in the first tab.\n\nAvoid using six or more tabs as this may add too much complexity to the page. Consider if content can be reduced or split across multiple pages instead.\n\n<DoDontCaution\n  imageSrc={tabsFig7}\n  imageAlt=\"A recipe page with a tab bar with six tabs.\"\n  state=\"caution\"\n  caption=\"Avoid using too many tabs as it can complicate the page.\"\n/>\n\n### Icons\n\nAdd icons to tab labels to provide an extra visual cue to the tab’s content. Ensure that icons are relevant to the tab content.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={tabsFig8}\n    imageAlt=\"A tab bar with two icon tabs labelled ‘Ingredients’ and ‘Method’. The ingredients tab has a fridge icon and the method tab has a checklist icon.\"\n    state=\"good\"\n    caption=\"Use clear icons on tab labels.\"\n  />\n  <DoDontCaution\n    imageSrc={tabsFig9}\n    imageAlt=\"A tab bar with two icon tabs labelled ‘Ingredients’ and ‘Method’. Both icons are difficult to understand as they don't clearly match the label.\"\n    state=\"bad\"\n    caption=\"Don’t use ambiguous icons.\"\n  />\n</DoubleDoDontCaution>\n\nDon’t use icons for some tabs and not others. Always apply icons to all tabs if using them.\n\n<DoDontCaution\n  imageSrc={tabsFig10}\n  imageAlt=\" A recipe page that shows a tab bar with three tabs. Only one tab out of the three uses an icon.\"\n  state=\"bad\"\n  caption=\"Don’t mix normal tabs with icon tabs. Use either all normal tabs or all icon tabs.\"\n/>\n\n## Accessibility considerations\n\nWhen deciding to use tabs, consider whether this component gives users the most understandable and usable way of navigating between the content.\n\nConsider laying out your content into a single page with anchor links to move between sections.\n\nAlso consider using other containers such as accordions that are more suited to responsive behaviour as they use a single column.\n",
      "path": "/components/tabs",
      "navPriority": 25,
      "date": "2023-02-03",
      "title": "Tabs",
      "status": "BETA",
      "subTitle": "Tabs let users navigate between content within the same context. Tabs organise complex layouts by moving content into multiple sections.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/tabs",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/tabs"
        },
        {
          "title": "Code",
          "path": "/components/tabs/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/tabs/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/tabs/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.657Z",
        "lastModified": "2023-04-14T11:24:28.657Z",
        "size": 7026,
        "formattedSize": "6.9 KB"
      }
    },
    {
      "id": "components__text-input__accessibilityx",
      "contents": "\n# Accessibility\n\n## Easy to use for everyone\n\nText inputs can have `aria-labelledby` or `aria-label` tags that provide additional content to the visible label.\n\n## For Assistive Technology\n\nText inputs use `aria-invalid=\"true\"` and `aria-live=\"assertive\"` for validation. Use `aria-invalid=\"false\"` for successes or warnings and `aria-live=\"polite\"` to announce the character count.\n\nWe have included a hidden label through `aria-describedby`, contained in a hidden span to inform the users of the maximum character count when the component is focused.\n\n## Based on\n\nThe text input component has been based on the following resources:\n\n- [Labeling controls](https://www.w3.org/WAI/tutorials/forms/labels/), W3, accessed July 2022.\n- [Validation Input](https://www.w3.org/WAI/tutorials/forms/validation/), W3, accessed July 2022.\n- [Inputs](https://a11y-101.com/development/inputs), A11Y 101, accessed July 2022.\n- [Creating accessible forms](https://webaim.org/techniques/forms/controls), WebAIM, accessed July 2022.\n\n## Testing\n\nWe've tested this component against WCAG 2.1 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/text-input/accessibility",
      "date": "2023-02-03",
      "title": "Text field",
      "status": "BETA",
      "subTitle": "Text fields let users input and edit text. Text fields capture a single line of text and text areas capture multiple lines of text.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/text-input",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/text-input"
        },
        {
          "title": "Code",
          "path": "/components/text-input/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/text-input/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/text-input/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.657Z",
        "lastModified": "2023-04-14T11:24:28.657Z",
        "size": 1769,
        "formattedSize": "1.7 KB"
      }
    },
    {
      "id": "components__text-input__codex",
      "contents": "\nimport { IcTextField } from \"@ukic/react\";\n\n## Component demo\n\nexport const snippetsDefault = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-text-field \n    label=\"What is your favourite coffee?\" \n    placeholder=\"Placeholder\" \n    helper-text=\"Such as Arabica, Robusta or Liberica\">\n</ic-text-field>\n<script>\n  const textField = document.querySelector('ic-text-field');\n  textfield.addEventListenter('icChange', (ev) => console.log(ev.detail.value));\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcTextField \n  label=\"What is your favourite coffee?\" \n  placeholder=\"Placeholder\" \n  helperText=\"Such as Arabica, Robusta or Liberica\"\n  onIcChange={(ev) => console.log(ev.detail.value)}\n/>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsDefault}>\n  <IcTextField\n    label=\"What is your favourite coffee?\"\n    placeholder=\"Placeholder\"\n    helperText=\"Such as Arabica, Robusta or Liberica\"\n    onIcChange={(ev) => console.log(ev.detail.value)}\n  />\n</ComponentPreview>\n\n## Text field details\n\n<ComponentDetails component=\"ic-text-field\" />\n\n## Variants\n\n### With icon, value and max length\n\nexport const snippetsIconValueMaxLength = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-text-field \n    max-length=\"25\" \n    value=\"Arabica\" \n    label=\"What is your favourite coffee?\" \n    required=\"true\" \n    placeholder=\"Placeholder\" \n    helper-text=\"Such as Arabica, Robusta or Liberica\" >\n  <svg slot=\"icon\" ...></svg>\n</ic-text-field>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcTextField \n    maxLength=\"25\" \n    value=\"Arabica\" \n    label=\"What is your favourite coffee?\" \n    required \n    placeholder=\"Placeholder\" \n    helperText=\"Such as Arabica, Robusta or Liberica\">\n  <SlottedSVG slot=\"icon\" ... />\n</IcTextField>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsIconValueMaxLength}>\n  <IcTextField\n    maxLength=\"25\"\n    value=\"Arabica\"\n    label=\"What is your favourite coffee?\"\n    required\n    placeholder=\"Placeholder\"\n    helperText=\"Such as Arabica, Robusta or Liberica\"\n  >\n    <svg\n      slot=\"icon\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height=\"24px\"\n      viewBox=\"0 0 24 24\"\n      width=\"24px\"\n      fill=\"#000000\"\n    >\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z\" />\n    </svg>\n  </IcTextField>\n</ComponentPreview>\n\n### Disabled\n\nexport const snippetsDisabled = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-text-field \n    label=\"What is your favourite coffee?\" \n    required=\"true\" \n    placeholder=\"Placeholder\" \n    disabled=\"true\">\n  <svg slot=\"icon\" ...></svg>\n</ic-text-field>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcTextField \n    label=\"What is your favourite coffee?\" \n    required \n    placeholder=\"Placeholder\" \n    disabled>\n  <SlottedSVG slot=\"icon\" ... />\n</IcTextField>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsDisabled}>\n  <IcTextField\n    label=\"What is your favourite coffee?\"\n    required\n    placeholder=\"Placeholder\"\n    disabled\n  >\n    <svg\n      slot=\"icon\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height=\"24px\"\n      viewBox=\"0 0 24 24\"\n      width=\"24px\"\n      fill=\"#000000\"\n    >\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z\" />\n    </svg>\n  </IcTextField>\n</ComponentPreview>\n\n### Validation\n\nexport const snippetsValidation = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-text-field \n    validation-status=\"success\" \n    validation-text=\"Good choice!\" \n    value=\"Arabica\" max-length=\"25\" \n    label=\"What is your favourite coffee?\" \n    required=\"true\" placeholder=\"Placeholder\" \n    helper-text=\"Such as Arabica, Robusta or Liberica\">\n</ic-text-field>\n<ic-text-field \n  validation-status=\"success\" \n  validation-text=\"Good choice!\" \n  validation-inline=\"true\" \n  value=\"Arabica\" \n  max-length=\"25\" \n  label=\"What is your favourite coffee?\" \n  required=\"true\" placeholder=\"Placeholder\" \n  helper-text=\"Such as Arabica, Robusta or Liberica\">\n</ic-text-field>\n<ic-text-field \n  validation-status=\"warning\" \n  validation-text=\"A very long warning message to test if wrapping works\" \n  value=\"Arabica\"\n  max-length=\"25\" \n  label=\"What is your favourite coffee?\" \n  required=\"true\" \n  placeholder=\"Placeholder\" \n  helper-text=\"Such as Arabica, Robusta or Liberica\">\n</ic-text-field>\n<ic-text-field \n  validation-status=\"error\" \n  validation-text=\"now it has really gone to (coffee) pot\" \n  value=\"Tea\" \n  max-length=\"25\" \n  label=\"What is your favourite coffee?\" \n  required=\"true\" \n  placeholder=\"Placeholder\" \n  helper-text=\"Such as Arabica, Robusta or Liberica\">\n</ic-text-field>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcTextField \n    maxLength=\"25\" \n    value=\"Arabica\" \n    label=\"What is your favourite coffee?\" \n    required \n    helperText=\"Such as Arabica, Robusta or Liberica\" \n    validationStatus=\"success\" \n    validationText=\"Good choice!\" />\n<IcTextField \n  maxLength=\"25\" \n  value=\"Arabica\" \n  label=\"What is your favourite coffee?\" \n  required \n  helperText=\"Such as Arabica, Robusta or Liberica\" \n  validationStatus=\"success\" \n  validationText=\"Good choice!\" \n  validationInline />\n<IcTextField \n  maxLength=\"25\" \n  value=\"Arabica\" \n  label=\"What is your favourite coffee?\" \n  required \n  helperText=\"Such as Arabica, Robusta or Liberica\" \n  validationStatus=\"warning\" \n  validationText=\"A very long warning message to test if wrapping works\" />\n<IcTextField \n  maxLength=\"25\" \n  value=\"Tea\" \n  label=\"What is your favourite coffee?\" \n  required helperText=\"Such as Arabica, Robusta or Liberica\" \n  validationStatus=\"error\" \n  validationText=\"Now it has really gone to (coffee) pot\" />`,\n  },\n];\n\n<ComponentPreview snippets={snippetsValidation}>\n  <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"8px\" }}>\n    <IcTextField\n      maxLength=\"25\"\n      value=\"Arabica\"\n      label=\"What is your favourite coffee?\"\n      required\n      helperText=\"Such as Arabica, Robusta or Liberica\"\n      validationStatus=\"success\"\n      validationText=\"Good choice!\"\n    />\n    <IcTextField\n      maxLength=\"25\"\n      value=\"Arabica\"\n      label=\"What is your favourite coffee?\"\n      required\n      helperText=\"Such as Arabica, Robusta or Liberica\"\n      validationStatus=\"success\"\n      validationText=\"Good choice!\"\n      validationInline\n    />\n    <IcTextField\n      maxLength=\"25\"\n      value=\"Arabica\"\n      label=\"What is your favourite coffee?\"\n      required\n      helperText=\"Such as Arabica, Robusta or Liberica\"\n      validationStatus=\"warning\"\n      validationText=\"A very long warning message to test if wrapping works\"\n    />\n    <IcTextField\n      maxLength=\"25\"\n      value=\"Tea\"\n      label=\"What is your favourite coffee?\"\n      required\n      helperText=\"Such as Arabica, Robusta or Liberica\"\n      validationStatus=\"error\"\n      validationText=\"Now it has really gone to (coffee) pot\"\n    />\n  </div>\n</ComponentPreview>\n\n### Text area with resize\n\nexport const snippetsTextArea = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-text-field \n    rows=\"6\" \n    resize=\"true\" \n    label=\"What is your favourite coffee?\" \n    placeholder=\"Placeholder\" \n    helper-text=\"Such as Arabica, Robusta or Liberica\">\n</ic-text-field>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcTextField \n    rows=\"6\" \n    resize \n    label=\"What is your favourite coffee?\" \n    placeholder=\"Placeholder\" \n    helperText=\"Such as Arabica, Robusta or Liberica\" />`,\n  },\n];\n\n<ComponentPreview snippets={snippetsTextArea}>\n  <IcTextField\n    rows=\"6\"\n    resize\n    label=\"What is your favourite coffee?\"\n    placeholder=\"Placeholder\"\n    helperText=\"Such as Arabica, Robusta or Liberica\"\n  />\n</ComponentPreview>\n",
      "path": "/components/text-input/code",
      "date": "2023-02-06",
      "title": "Text field",
      "status": "BETA",
      "subTitle": "Text fields let users input and edit text. Text fields capture a single line of text and text areas capture multiple lines of text.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/text-input",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/text-input"
        },
        {
          "title": "Code",
          "path": "/components/text-input/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/text-input/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/text-input/code.mdx",
        "createdAt": "2023-04-14T11:24:28.657Z",
        "lastModified": "2023-04-14T11:24:28.657Z",
        "size": 8298,
        "formattedSize": "8.1 KB"
      }
    },
    {
      "id": "components__text-input__guidancex",
      "contents": "\nimport { IcTextField } from \"@ukic/react\";\nimport textInputFig1 from \"./images/fig-1-a-textfield-with-helper-text.png\";\nimport textInputFig2 from \"./images/fig-2-a-textfield-with-an-example-of-placeholder-text-and-user-inputted-text.png\";\nimport textInputFig3 from \"./images/fig-3-use-understandable-visual-icons-to-add-clarity-to-the-field-and-draw-attention.png\";\nimport textInputFig4 from \"./images/fig-4-dont-use-unrelated-icons.png\";\nimport textInputFig5 from \"./images/fig-5-examples-of-a-textarea-with-a-character-count.png\";\nimport textInputFig6 from \"./images/fig-6-three-text-fields-correctly-sized-to-the-expected-length-of-input.png\";\nimport textInputFig7 from \"./images/fig-7-three-text-fields-not-correctly-sized-to-expected-content.png\";\nimport textInputFig8 from \"./images/fig-8-textfields-showing-the-three-different-validation-states.png\";\nimport textInputFig9 from \"./images/fig-9-use-inline-validation-for-successes-that-dont-require-success-labels.png\";\n\n## Component variants\n\nThere are two types of text fields:\n\n- Single line text fields\n- Multi-line text fields (also known as text areas)\n\n### Text fields\n\nUse text fields for entering and editing single lines of text.\n\n<ComponentPreview>\n  <IcTextField\n    label=\"What is your favourite coffee?\"\n    placeholder=\"Placeholder\"\n    helperText=\"Such as Arabica, Robusta or Liberica\"\n  />\n</ComponentPreview>\n\n### Text areas\n\nUse text areas for entering and editing large amounts of text that require more than a single line.\n\n<ComponentPreview>\n  <IcTextField\n    rows=\"6\"\n    label=\"What is your favourite coffee?\"\n    placeholder=\"Placeholder\"\n    helperText=\"Such as Arabica, Robusta or Liberica\"\n  />\n</ComponentPreview>\n\n## When to use\n\nUse text fields as part of a form or other data collection page for capturing text input.\n\n## Content\n\n### Labels\n\nUse clear labels to indicate what information should be entered into the field.\n\n### Helper text\n\nUse helper text in addition to the field label when additional information helps users understand what information is required.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={textInputFig1}\n    imageAlt=\"A text field component with a label and helper text.\"\n    state=\"good\"\n    caption=\"A text field with helper text.\"\n  />\n</DoubleDoDontCaution>\n\n### Placeholder text\n\nUse placeholder text to optionally provide an example of what to type into the field.\n\nOnly use placeholder text if it makes it easier to fill in the text field.\n\nDon't use placeholder text to convey additional meaning other than an example of the expected input.\n\n<DoDontCaution\n  imageSrc={textInputFig2}\n  imageAlt=\"An image showing two text fields, both with a label which states 'Email'. One shows a placeholder email in the input box, while the other shows a filled in input box with an actual email address.\"\n  state=\"good\"\n  caption=\"A text field with an example of placeholder text and user-inputted text.\"\n/>\n\n### Icons\n\nWhen including an icon in a text input make sure that the icon is understandable and relevant to the type of input required by the field. Always provide alternative descriptions for icons. Don't use icons if they aren't necessary.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={textInputFig3}\n    imageAlt=\"An image showing two text fields. The top one titled 'Username' features an icon of a person, and the field titled 'Password' features an icon of a lock.\"\n    state=\"good\"\n    caption=\"Use understandable visual icons to add clarity to the field and draw attention.\"\n  />\n  <DoDontCaution\n    imageSrc={textInputFig4}\n    imageAlt=\"An image showing two text fields. The top one titled 'Username' features an icon of a telephone, and the field titled 'Password' features an icon of a dog paw.\"\n    state=\"bad\"\n    caption=\"Incorrect use of icons can cause confusion.\"\n  />\n</DoubleDoDontCaution>\n\n## Character count\n\nInclude a character limit and counter to show how close the current input is to the maximum input length.\n\n<DoDontCaution\n  imageSrc={textInputFig5}\n  imageAlt=\"An example of two text areas with a character count. The first is below the character count, and the second is over the character count and is showing an error.\"\n  state=\"good\"\n  caption=\"Use a character count to clearly inform users of the character limit.\"\n/>\n\n## Layout and placement\n\n### Field width\n\nMake the width of the field reflect the length of content you expect the user to enter.\n\n<DoDontCaution\n  imageSrc={textInputFig6}\n  imageAlt=\"An image showing three text fields. The top two, titled 'First name' and 'Second name' take up half the horizontal size of the third one, titled 'Address'.\"\n  state=\"good\"\n  caption=\"Three text fields correctly sized to the expected length of input.\"\n/>\n\n<DoDontCaution\n  imageSrc={textInputFig7}\n  imageAlt=\"An image showing three text fields. The top two, titled 'First name' and 'Second name' are the same horizontal size of the third one, titled 'Address'.\"\n  state=\"bad\"\n  caption=\"Three text fields not correctly sized to expected content.\"\n/>\n\n## Validation (error handling)\n\nReal-time validation helps the user streamline their process and efficiently complete a form. All error validation should be accompanied by an error label. Use inline validation for successes that don't require success labels.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={textInputFig8}\n    imageAlt=\"An image showing three different text fields with different validation states. The first one shows an success validation message. The second one shows a warning validation message. The third one shows an error validation message.\"\n    state=\"good\"\n    caption=\"Text fields showing the three different validation states.\"\n  />\n  <DoDontCaution\n    imageSrc={textInputFig9}\n    imageAlt=\"A text field labelled 'Favourite hot drink', with a green tick icon within the input field to show the successful validation state.\"\n    state=\"good\"\n    caption=\"Use inline validation for successes that don't require success labels.\"\n  />\n</DoubleDoDontCaution>\n",
      "path": "/components/text-input",
      "navPriority": 26,
      "date": "2023-02-03",
      "title": "Text field",
      "status": "BETA",
      "subTitle": "Text fields let users input and edit text. Text fields capture a single line of text and text areas capture multiple lines of text.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/text-input",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/text-input"
        },
        {
          "title": "Code",
          "path": "/components/text-input/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/text-input/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/text-input/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.661Z",
        "lastModified": "2023-04-14T11:24:28.661Z",
        "size": 6599,
        "formattedSize": "6.4 KB"
      }
    },
    {
      "id": "components__toasts__accessibilityx",
      "contents": "\n## Easy to use for everyone\n\nToasts can be difficult for people to notice due to their auto-dismiss behaviour meaning they can easily be missed.\n\nOur guidance highlights the importance of making sure that the content of toast messages is always non-essential to completing a task.\n\nIf more time is needed to read the toast's content, then a longer timeout duration can be set. A user can also hover over the toast with their mouse to pause the timer. Auto-dismiss toasts also include a visual timer, to show how long remains until it disappears.\n\nIf any actions are included within a toast then it can’t be set to auto-dismiss. This gives a user extra time to locate and trigger the action.\n\n## For Assistive Technology\n\nAuto-dismissible toasts use a role of alert which uses an `aria-live` region to announce the contents immediately to users of assistive technology.\n\nToasts that don't auto-dismiss use a role of dialog and focus is moved to the toast when displayed. After dismissing the toast, focus is returned to the same position on the page before the toast was displayed. Focus is also trapped between the toast's interactive elements, so that users can complete the action quickly and easily.\n\nPressing `Escape` on the keyboard will dismiss manual toasts immediately.\n\n## Based on\n\nThe toast component has been based on the following resources:\n\n- [A toast to a11y toasts](https://www.scottohara.me/blog/2019/07/08/a-toast-to-a11y-toasts.html), Scott O’Hara, accessed March 20222.\n- [Scraping burned toast](https://adrianroselli.com/2019/06/scraping-burned-toast.html), Adrian Roselli, accessed March 2022.\n- [Defining toast messages](https://adrianroselli.com/2020/01/defining-toast-messages.html), Adrian Roselli, accessed March 2022.\n- [2.2.1 Timing adjustable](https://www.w3.org/WAI/WCAG21/Understanding/timing-adjustable.html), WCAG 2.1, accessed March 2022.\n- [Dialog role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/dialog_role), MDN web docs, accessed March 2022.\n\n## Testing\n\nWe’ve tested this component against WCAG 2.1 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/toasts/accessibility",
      "date": "2023-02-03",
      "title": "Toast",
      "status": "BETA",
      "subTitle": "Toasts give brief, non-critical updates about events that happen in an app. Toasts are sometimes called 'snackbars'.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/toasts",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/toasts"
        },
        {
          "title": "Code",
          "path": "/components/toasts/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/toasts/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/toasts/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.661Z",
        "lastModified": "2023-04-14T11:24:28.661Z",
        "size": 2730,
        "formattedSize": "2.7 KB"
      }
    },
    {
      "id": "components__toasts__codex",
      "contents": "\nimport {\n  IcToast,\n  IcToastRegion,\n  IcButton,\n  IcLink,\n  SlottedSVG,\n} from \"@ukic/react\";\nimport {\n  useRef\n} from 'react';\n\nexport const defaultSnippet = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-button onclick=\"displayToast()\">Display toast</ic-button>\n<ic-toast-region>\n  <ic-toast id=\"toast-01\" heading=\"Your coffee is ready\"></ic-toast>\n</ic-toast-region>\n<script>\n  const toastRegion = document.querySelector(\"ic-toast-region\");\n  function displayToast() {\n    var toast = document.querySelector(\"#toast-01\");\n    toastRegion.setVisible(toast);\n  }\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `const toastRegionEl = useRef(null);\nconst toastEl = useRef(null);\nconst handleClick = () => {\n  toastRegionEl.current.setVisible(toastEl.current);\n}\nreturn (\n  <>\n    <IcButton onClick={handleClick}>Display toast component</IcButton>\n    <IcToastRegion ref={toastRegionEl}>\n      <IcToast heading='Your coffee is ready' ref={toastEl} />\n    </IcToastRegion>\n  </>\n)`,\n  },\n];\n\n## Component demo\n\nexport const DefaultToast = () => {\n  const toastRegionEl = useRef(null);\n  const toastEl = useRef(null);\n  const handleClick = async () => {\n    await toastRegionEl.current.setVisible(toastEl.current);\n  };\n  return (\n    <>\n      <IcButton onClick={handleClick}>Display toast component</IcButton>\n      <IcToastRegion ref={toastRegionEl}>\n        <IcToast heading=\"Your coffee is ready\" ref={toastEl} />\n      </IcToastRegion>\n    </>\n  );\n}\n\n<ComponentPreview snippets={defaultSnippet}>\n  <DefaultToast />\n</ComponentPreview>\n\n## Toast region details\n\n<ComponentDetails component=\"ic-toast-region\" />\n\n## Toast details\n\n<ComponentDetails component=\"ic-toast\" />\n\n## Variants\n\nexport const withVariantSnippet = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-button onclick=\"displayToast()\">Display success toast</ic-button>\n<ic-toast-region>\n  <ic-toast id=\"toast-02\" heading=\"Your coffee is ready\" message=\"Please dismiss and collect\"></ic-toast>\n</ic-toast-region>\n<script>\n  const toastRegion = document.querySelector(\"ic-toast-region\");\n  function displayToast() {\n    const successToast = document.querySelector(\"#toast-02\");\n    toastRegion.setVisible(successToast);\n  }\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `const toastRegionEl = useRef(null);\nconst toastEl = useRef(null);\nconst handleClick = async () => {\n  await toastRegionEl.current.setVisible(toastEl.current);\n}\nreturn (\n  <>\n    <IcButton onClick={handleClick}>Display success toast</IcButton>\n    <IcToastRegion ref={toastRegionEl}>\n      <IcToast\n        heading='Your coffee is ready'\n        ref={toastEl}\n        message='Please dismiss and collect'\n        variant='success'\n      />\n    </IcToastRegion>\n  </>\n)`,\n  },\n];\n\nexport const WithVariantToast = () => {\n  const toastRegionEl = useRef(null);\n  const toastEl = useRef(null);\n  const handleClick = async () => {\n    await toastRegionEl.current.setVisible(toastEl.current);\n  };\n  return (\n    <>\n      <IcButton onClick={handleClick}>Display success toast</IcButton>\n      <IcToastRegion ref={toastRegionEl}>\n        <IcToast\n          heading=\"Your coffee is ready\"\n          ref={toastEl}\n          message=\"Please dismiss and collect\"\n          variant=\"success\"\n        />\n      </IcToastRegion>\n    </>\n  );\n}\n\n<ComponentPreview snippets={withVariantSnippet}>\n  <WithVariantToast />\n</ComponentPreview>\n\n### Multi-line\n\nexport const withMultilineSnippet = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-button onclick=\"displayToast()\">Display multi-line toast</ic-button>\n<ic-toast-region>\n  <ic-toast id=\"toast-03\" heading=\"Your coffee is ready\" message=\"Please dismiss and come to collect your delicious coffee from the barista right away before it gets cold. Dont delay! We wouldn't want you to lose out on your fantastic coffee now would we?\"></ic-toast>\n</ic-toast-region>\n<script>\n  const toastRegion = document.querySelector(\"ic-toast-region\");\n  function displayToast() {\n    const multilineToast = document.querySelector(\"#toast-03\");\n    toastRegion.setVisible(multilineToast);\n  }\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `const toastRegionEl = useRef(null);\nconst toastEl = useRef(null);\nconst handleClick = async () => {\n  await toastRegionEl.current.setVisible(toastEl.current);\n}\nreturn (\n  <>\n    <IcButton onClick={handleClick}>Display multi-line toast</IcButton>\n    <IcToastRegion ref={toastRegionEl}>\n      <IcToast\n        heading='Your coffee is ready'\n        ref={toastEl}\n        message='Please dismiss and come to collect your delicious coffee from the barista right away before it gets cold. Dont delay! We wouldnt want you to lose out on your fantastic coffee now would we?'\n      />\n    </IcToastRegion>\n  </>\n)`,\n  },\n];\n\nexport const MultilineToast = () => {\n  const toastRegionEl = useRef(null);\n  const toastEl = useRef(null);\n  const handleClick = async () => {\n    await toastRegionEl.current.setVisible(toastEl.current);\n  };\n  return (\n    <>\n      <IcButton onClick={handleClick}>Display multi-line toast</IcButton>\n      <IcToastRegion ref={toastRegionEl}>\n        <IcToast\n          heading=\"Your coffee is ready\"\n          ref={toastEl}\n          message=\"Please dismiss and come to collect your delicious coffee from the barista right away before it gets cold. Dont delay! We wouldnt want you to lose out on your fantastic coffee now would we?\"\n        />\n      </IcToastRegion>\n    </>\n  );\n}\n\n<ComponentPreview snippets={withMultilineSnippet}>\n  <MultilineToast />\n</ComponentPreview>\n\n### Slotted 'action' toast\n\nexport const slottedActionsSnippet = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-button onclick=\"displayButtonToast()\">Display slotted buttons toast</ic-button>\n<ic-button onclick=\"displayLinkToast()\">Display slotted buttons toast</ic-button>\n<ic-toast-region>\n  <ic-toast id=\"toast-04\" heading=\"Your coffee is ready\" message=\"Please dismiss and try again\" variant='warning'>\n    <ic-button slot='action' appearance='light'>Retry</ic-button>\n  </ic-toast>\n  <ic-toast id=\"toast-05\" heading=\"Your coffee is ready\" message=\"Please dismiss and try again\" variant='warning'>\n    <ic-link slot='action' appearance='light'>Retry</ic-link>\n  </ic-toast>\n</ic-toast-region>\n<script>\n  const toastRegion = document.querySelector(\"ic-toast-region\");\n  function displayButtonToast() {\n    const slottedButtonToast = document.querySelector(\"#toast-04\");\n    toastRegion.setVisible(slottedButtonToast);\n  }\n  function displayLinkToast() {\n    const slottedLinkToast = document.querySelector(\"#toast-05\");\n    toastRegion.setVisible(slottedLinkToast);\n  }\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `const toastRegionEl = useRef(null);\nconst buttonToastEl = useRef(null);\nconst linkToastEl = useRef(null);\nconst handleButtonToastClick = async () => {\n  await toastRegionEl.current.setVisible(buttonToastEl.current);\n}\nconst handleLinkToastClick = async () => {\n  await toastRegionEl.current.setVisible(linkToastEl.current);\n}\nreturn (\n  <>\n    <div style={{'display': 'flex', 'gap': '8px'}}>\n      <IcButton onClick={handleButtonToastClick}>Display slotted button toast</IcButton>\n      <IcButton onClick={handleLinkToastClick}>Display slotted link toast</IcButton>\n    </div>\n    <IcToastRegion ref={toastRegionEl}>\n      <IcToast\n        heading='Your coffee is ready'\n        ref={buttonToastEl}\n        message='Please dismiss and try again'\n        variant='warning'\n      >\n        <IcButton slot='action' appearance='light'>Retry</IcButton>\n      </IcToast>\n      <IcToast\n        heading='Your coffee is ready'\n        ref={linkToastEl}\n        message='Please dismiss and try again'\n        variant='warning'\n      >\n        <IcLink href=\"#\" slot=\"action\" appearance=\"light\">Retry</IcLink>\n      </IcToast>\n    </IcToastRegion>\n  </>\n)`,\n  },\n];\n\nexport const SlottedActionsToast = () => {\n  const toastRegionEl = useRef(null);\n  const buttonToastEl = useRef(null);\n  const linkToastEl = useRef(null);\n  const handleButtonToastClick = async () => {\n    await toastRegionEl.current.setVisible(buttonToastEl.current);\n  };\n  const handleLinkToastClick = async () => {\n    await toastRegionEl.current.setVisible(linkToastEl.current);\n  };\n  return (\n    <>\n      <div style={{ display: \"flex\", gap: \"8px\" }}>\n        <IcButton onClick={handleButtonToastClick}>\n          Display slotted button toast\n        </IcButton>\n        <IcButton onClick={handleLinkToastClick}>\n          Display slotted link toast\n        </IcButton>\n      </div>\n      <IcToastRegion ref={toastRegionEl}>\n        <IcToast\n          heading=\"Your coffee is ready\"\n          ref={buttonToastEl}\n          message=\"Please dismiss and try again\"\n          variant=\"warning\"\n        >\n          <IcButton slot=\"action\" appearance=\"light\">\n            Retry\n          </IcButton>\n        </IcToast>\n        <IcToast\n          heading=\"Your coffee is ready\"\n          ref={linkToastEl}\n          message=\"Please dismiss and try again\"\n          variant=\"warning\"\n        >\n          <IcLink href=\"#\" slot=\"action\" appearance=\"light\">\n            Retry\n          </IcLink>\n        </IcToast>\n      </IcToastRegion>\n    </>\n  );\n}\n\n<ComponentPreview snippets={slottedActionsSnippet}>\n  <SlottedActionsToast />\n</ComponentPreview>\n\n### Auto-dismiss\n\nexport const autoDismissSnippet = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-button onclick=\"displayToast()\">Display auto-dismiss toast</ic-button>\n<ic-toast-region>\n  <ic-toast id=\"toast-06\" heading=\"Your coffee is ready\" dismiss-mode=\"automatic\" auto-dismiss-timeout=\"10000\" variant='info'></ic-toast>\n</ic-toast-region>\n<script>\n  const toastRegion = document.querySelector(\"ic-toast-region\");\n  function displayToast() {\n    var toast = document.querySelector(\"#toast-06\");\n    toastRegion.setVisible(toast);\n  }\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `const toastRegionEl = useRef(null);\nconst toastEl = useRef(null);\nconst handleClick = () => {\n  toastRegionEl.current.setVisible(toastEl.current);\n}\nreturn (\n  <>\n    <IcButton onClick={handleClick}>Display auto-dismiss toast</IcButton>\n    <IcToastRegion ref={toastRegionEl}>\n      <IcToast heading='Your coffee is ready' ref={toastEl} dismissMode=\"automatic\" autoDismissTimeout={10000} variant='info' />\n    </IcToastRegion>\n  </>\n)`,\n  },\n];\n\nexport const AutoDismissToast = () => {\n  const toastRegionEl = useRef(null);\n  const toastEl = useRef(null);\n  const handleClick = () => {\n    toastRegionEl.current.setVisible(toastEl.current);\n  };\n  return (\n    <>\n      <IcButton onClick={handleClick}>Display auto-dismiss toast</IcButton>\n      <IcToastRegion ref={toastRegionEl}>\n        <IcToast\n          heading=\"Your coffee is ready\"\n          ref={toastEl}\n          dismissMode=\"automatic\"\n          autoDismissTimeout={10000}\n          variant=\"info\"\n        />\n      </IcToastRegion>\n    </>\n  );\n}\n\n<ComponentPreview snippets={autoDismissSnippet}>\n  <AutoDismissToast />\n</ComponentPreview>\n\n### Custom neutral icon and aria-labels\n\nexport const customIconAriaLabelsSnippet = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-button onclick=\"displayToast()\">Display auto-dismiss toast</ic-button>\n<ic-toast-region>\n  <ic-toast id=\"toast-07\" heading=\"Your coffee is ready\" variant='neutral' neutral-icon-aria-label=\"It is time to collect your coffee\" dismiss-button-aria-label=\"Dismiss me\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" slot='neutral-icon' viewBox=\"0 0 24 24\">\n      <title>coffee-outline</title>\n      <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n    </svg>\n  </ic-toast>\n</ic-toast-region>\n<script>\n  const toastRegion = document.querySelector(\"ic-toast-region\");\n  function displayToast() {\n    var toast = document.querySelector(\"#toast-07\");\n    toastRegion.setVisible(toast);\n  }\n</script>`,\n  },\n  {\n    language: \"React\",\n    snippet: `const toastRegionEl = useRef(null);\nconst toastEl = useRef(null);\nconst handleClick = () => {\n  toastRegionEl.current.setVisible(toastEl.current);\n}\nreturn (\n  <>\n    <IcButton onClick={handleClick}>Display custom icon and aria-label toast</IcButton>\n    <IcToastRegion ref={toastRegionEl}>\n      <IcToast\n        heading='Your coffee is ready'\n        ref={toastEl}\n        variant='neutral'\n        neutralIconAriaLabel=\"It is time to collect your coffee\"\n        dismissButtonAriaLabel=\"Dismiss me\"\n      >\n        <SlottedSVG slot='neutral-icon'>\n          <title>coffee-outline</title>\n          <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n        </SlottedSVG>\n      </IcToast>\n    </IcToastRegion>\n  </>\n)`,\n  },\n];\n\nexport const CustomIconAriaLabels = () => {\n  const toastRegionEl = useRef(null);\n  const toastEl = useRef(null);\n  const handleClick = () => {\n    toastRegionEl.current.setVisible(toastEl.current);\n  };\n  return (\n    <>\n      <IcButton onClick={handleClick}>\n        Display custom icon and aria-labels toast\n      </IcButton>\n      <IcToastRegion ref={toastRegionEl}>\n        <IcToast\n          heading=\"Your coffee is ready\"\n          ref={toastEl}\n          variant=\"neutral\"\n          neutralIconAriaLabel=\"It is time to collect your coffee\"\n          dismissButtonAriaLabel=\"Dismiss me\"\n        >\n          <SlottedSVG slot=\"neutral-icon\">\n            <title>coffee-outline</title>\n            <path d=\"M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z\" />\n          </SlottedSVG>\n        </IcToast>\n      </IcToastRegion>\n    </>\n  );\n}\n\n<ComponentPreview snippets={customIconAriaLabelsSnippet}>\n  <CustomIconAriaLabels />\n</ComponentPreview>\n",
      "path": "/components/toasts/code",
      "date": "2023-02-03",
      "title": "Toast",
      "status": "BETA",
      "subTitle": "Toasts give brief, non-critical updates about events that happen in an app. Toasts are sometimes called 'snackbars'.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/toasts",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/toasts"
        },
        {
          "title": "Code",
          "path": "/components/toasts/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/toasts/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/toasts/code.mdx",
        "createdAt": "2023-04-14T11:24:28.661Z",
        "lastModified": "2023-04-14T11:24:28.661Z",
        "size": 14443,
        "formattedSize": "14.1 KB"
      }
    },
    {
      "id": "components__toasts__guidancex",
      "contents": "\nimport { IcTypography, IcToast, IcToastRegion, IcButton } from \"@ukic/react\";\nimport { useRef } from \"react\";\nimport toastVid1 from \"./images/anim-1-auto-dismiss-toast.mp4\";\nimport toastVid2 from \"./images/anim-2-manual-dismiss-toast.mp4\";\nimport toastFig1 from \"./images/fig-1c-toast-with-action-button.png\";\nimport toastFig2 from \"./images/fig-2c-toast-with-link.png\";\nimport toastFig3 from \"./images/fig-3c-dont-use-toast-to-display-errors.png\";\nimport toastFig4 from \"./images/fig-4c-correct-toast-positioning.png\";\nimport toastFig5 from \"./images/fig-5c-incorrect-toast-positioning.png\";\nimport toastFig6 from \"./images/fig-6c-toast-with-description.png\";\n\n## Introduction\n\nAn example of the toast component.\n\nexport const IntroToast = () => {\n  const toastRegionEl = useRef(null);\n  const toastEl = useRef(null);\n  const handleClick = () => {\n    toastRegionEl.current.setVisible(toastEl.current);\n  };\n  return (\n    <>\n      <IcButton onClick={handleClick}>Display toast component</IcButton>\n      <IcToastRegion ref={toastRegionEl}>\n        <IcToast id=\"toast-01\" heading=\"Your coffee is ready\" ref={toastEl} />\n      </IcToastRegion>\n    </>\n  );\n};\n\n<ComponentPreview>\n  <IntroToast />\n</ComponentPreview>\n\n## When to use\n\nUse toasts to provide non-essential information relating to a user’s current task.\n\nUse toasts to provide an additional method of feedback about a user action. Avoid using toasts as the only method of conveying information to the user.\n\nToasts can be set to disappear on their own, or remain visible on screen until actioned. Toasts that automatically disappear should not contain any essential information.\n\nAn action such as a link or button can be included but isn’t recommended. Try to place actions in the main content of the page instead. If an action is included, then the toast can't be set to automatically dismiss.\n\n<DoDontCaution\n  imageSrc={toastFig1}\n  imageAlt=\"A comments section with a toast message that says ‘Comment added’ with an ‘undo’ button and a dismiss button.\"\n  state=\"caution\"\n  caption=\"A toast message containing an action button. The toast has to be manually dismissed.\"\n/>\n\n<DoDontCaution\n  imageSrc={toastFig2}\n  imageAlt=\"A comments section with a toast message that says ‘Comment added’ with a link that reads ‘View our privacy statement’, and a dismiss button.\"\n  state=\"caution\"\n  caption=\"A toast message containing a link. The toast has to be manually dismissed.\"\n/>\n\nIt's best to use toasts for passive success messages, for example 'document saved'. This provides useful additional feedback about the completion of a process, without being the only method of conveying this information.\n\n## When not to use\n\nIf the message must be seen, use an [alert](/components/alerts) or dialog depending on the severity of the problem.\n\n<DoDontCaution\n  imageSrc={toastFig3}\n  imageAlt=\"A comments section with a toast message displaying an error that reads ‘Your comment couldn’t be saved’.\"\n  state=\"bad\"\n  caption=\"Don’t use toast messages to display errors.\"\n/>\n\nUse a dialog to display messages a user must see or acknowledge.\n\n## Interaction behaviour\n\n### Action\n\nUse a single action in a toast. A button or link can be provided, but the toast can't automatically dismiss if an action is included.\n\n### Auto-dismiss\n\nToasts can be set to auto-dismiss after an adjustable length of time. Make sure that auto-dismissing toasts are displayed for long enough for their content to be read. Make sure the toast content is non-critical so it doesn’t matter if it's missed.\n\n<video width=\"100%\" muted controls loop>\n  <source src={toastVid1} type=\"video/mp4\" />\n</video>\n\n<IcTypography\n  variant=\"label\"\n  style={{ marginTop: \"-16px\", marginBottom: \"24px\" }}\n>\n  A page with a toast that appears at the bottom center of the screen and\n  disappears after a short delay.\n</IcTypography>\n\nToasts that contain an action or link can’t be set to auto-dismiss.\n\nToasts that don’t auto-dismiss will have a close button.\n\n<video width=\"100%\" muted controls loop>\n  <source src={toastVid2} type=\"video/mp4\" />\n</video>\n\n<IcTypography\n  variant=\"label\"\n  style={{ marginTop: \"-16px\", marginBottom: \"24px\" }}\n>\n  A page with a toast, that has a close button, that appears at the bottom\n  center of the screen and disappears only when the dismiss button is clicked.\n</IcTypography>\n\n### Layout and placement\n\nToasts always appear centred at the bottom of the screen. Positioning toasts here makes sure that they don't obscure key content or navigation that might be positioned at the top of the screen.\n\nOnly one toast can be displayed at a time. If multiple toasts are required, they are queued one after the other.\n\n<DoDontCaution\n  imageSrc={toastFig4}\n  imageAlt=\"An app called ‘Better latte than never’ displaying an article page and showing a toast message positioned at the bottom and centre of the screen that reads ‘Comment added’.  \"\n  state=\"good\"\n  caption=\"Position toast message at the centre and bottom of the screen.  \"\n/>\n\n<DoDontCaution\n  imageSrc={toastFig5}\n  imageAlt=\"An app whose title is obscured by a toast message positioned at the top of the screen that reads ‘Comment added’.\"\n  state=\"bad\"\n  caption=\"Don’t position toasts at the top of the screen as they may interfere with important content.  \"\n/>\n\n## Content\n\nUse short messages in toasts. Use the optional description text in addition to the toast title for additional content.\n\n<DoDontCaution\n  imageSrc={toastFig6}\n  imageAlt=\"An app called ‘Better latte than never’ showing an article page with comments that displays a toast message with a title that says ‘Comment added’ and a description that says ‘Thanks for letting us know.’.\"\n  state=\"good\"\n  caption=\"Use the optional toast description to provide more information on the toast message.\"\n/>\n\nUse one of the following statuses to provide additional meaning to the message:\n\n- Success\n- Warning\n- Error\n- Info\n- Status unknown\n\nSpecify a custom icon when using status unknown. Make sure that the icon is related to the toast’s content and that an alt-text description is provided.\n\n## Accessibility considerations\n\nWhen using an auto-dismissible toast message, the app needs to provide a method to extend the duration of the message. This is to satisfy the [WCAG 2.1 success criterion 2.2.1 Timing Adjustable](https://www.w3.org/WAI/WCAG21/Understanding/timing-adjustable.html).\n\n## Related components\n\n- [Alerts](/components/alerts)\n- [App errors](/patterns/app-errors)\n- [Success messages](/patterns/success)\n",
      "path": "/components/toasts",
      "navPriority": 27,
      "date": "2023-02-03",
      "title": "Toast",
      "status": "BETA",
      "subTitle": "Toasts give brief, non-critical updates about events that happen in an app. Toasts are sometimes called 'snackbars'.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/toasts",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/toasts"
        },
        {
          "title": "Code",
          "path": "/components/toasts/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/toasts/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/toasts/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.661Z",
        "lastModified": "2023-04-14T11:24:28.661Z",
        "size": 7104,
        "formattedSize": "6.9 KB"
      }
    },
    {
      "id": "components__tooltips__accessibilityx",
      "contents": "\n## Easy to use for everyone\n\nTooltips can be used by people using any input method. They display by default on hover or on focus.\n\nTo ensure the tooltip content can be understood, the tooltip remains displayed if the cursor is moved over the tooltip area, even if it leaves the associated element’s area.\n\nThe text displayed within a tooltip is selectable so that it can be copied or focused with a virtual cursor.\n\n## For Assistive Technology\n\nTooltips use `aria-describedby` or `aria-labelledby` to link it with the associated element.\n\n## Based on\n\nThe tooltip component has been based on the following resources:\n\n- [Tooltips in the time of WCAG 2.1](https://sarahmhigley.com/writing/tooltips-in-wcag-21/), Sarah M Higley, accessed August 2022.\n- [Tooltip guidelines](https://www.nngroup.com/articles/tooltip-guidelines/), Nielsen Normal Group, accessed August 2022.\n\n## Testing\n\nWe've tested this component against WCAG 2.1 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/tooltips/accessibility",
      "date": "2023-02-03",
      "title": "Tooltip",
      "status": "BETA",
      "subTitle": "Tooltips provide helpful information when the cursor hovers over an element or when focus is applied.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/tooltips",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/tooltips"
        },
        {
          "title": "Code",
          "path": "/components/tooltips/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/tooltips/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/tooltips/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.669Z",
        "lastModified": "2023-04-14T11:24:28.669Z",
        "size": 1582,
        "formattedSize": "1.5 KB"
      }
    },
    {
      "id": "components__tooltips__codex",
      "contents": "\nimport { IcTooltip, IcButton } from \"@ukic/react\";\n\n## Component demo\n\nexport const snippets = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-tooltip target=\"text-button\" label=\"This is a description of the button\" placement=\"top\"></ic-tooltip>\n<ic-tooltip target=\"text-button\" label=\"This is a description of the button\" placement=\"bottom\"></ic-tooltip>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcTooltip target=\"text-button\" label=\"This is a description of the button\" placement=\"top\" />\n<IcTooltip target=\"text-button\" label=\"This is a description of the button\" placement=\"bottom\" />`,\n  },\n];\n\n<ComponentPreview snippets={snippets}>\n  <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"8px\" }}>\n    <IcTooltip\n      label=\"This is a description of the button\"\n      target=\"test-button\"\n      placement=\"top\"\n    >\n      <IcButton id=\"test-button\" aria-describedby=\"ic-tooltip-test-button\">\n        Top\n      </IcButton>\n    </IcTooltip>\n    <IcTooltip\n      label=\"This is a description of the button\"\n      target=\"test-button\"\n      placement=\"bottom\"\n    >\n      <IcButton id=\"test-button\" aria-describedby=\"ic-tooltip-test-button\">\n        Bottom\n      </IcButton>\n    </IcTooltip>\n  </div>\n</ComponentPreview>\n\n## Tooltip details\n\n<ComponentDetails component=\"ic-tooltip\" />\n\n## Variants\n\n### Left placement\n\nexport const snippetsLeft = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-tooltip target=\"text-button\" label=\"This is a description\" placement=\"left\"></ic-tooltip>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcTooltip target=\"text-button\" label=\"This is a description\" placement=\"left\" />`,\n  },\n];\n\n<ComponentPreview\n  style={{\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n  }}\n  snippets={snippetsLeft}\n>\n  <IcTooltip\n    label=\"This is a description\"\n    target=\"test-button\"\n    placement=\"left\"\n  >\n    <IcButton id=\"test-button\" aria-describedby=\"ic-tooltip-test-button\">\n      Left\n    </IcButton>\n  </IcTooltip>\n</ComponentPreview>\n\n### Right placement\n\nexport const snippetsRight = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-tooltip target=\"text-button\" label=\"This is a description\" placement=\"right\"></ic-tooltip>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcTooltip target=\"text-button\" label=\"This is a description\" placement=\"right\" />`,\n  },\n];\n\n<ComponentPreview\n  style={{\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n  }}\n  snippets={snippetsRight}\n>\n  <IcTooltip\n    label=\"This is a description\"\n    target=\"test-button\"\n    placement=\"right\"\n  >\n    <IcButton id=\"test-button\" aria-describedby=\"ic-tooltip-test-button\">\n      Right\n    </IcButton>\n  </IcTooltip>\n</ComponentPreview>\n",
      "path": "/components/tooltips/code",
      "date": "2023-02-03",
      "title": "Tooltip",
      "status": "BETA",
      "subTitle": "Tooltips provide helpful information when the cursor hovers over an element or when focus is applied.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/tooltips",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/tooltips"
        },
        {
          "title": "Code",
          "path": "/components/tooltips/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/tooltips/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/tooltips/code.mdx",
        "createdAt": "2023-04-14T11:24:28.669Z",
        "lastModified": "2023-04-14T11:24:28.669Z",
        "size": 3227,
        "formattedSize": "3.2 KB"
      }
    },
    {
      "id": "components__tooltips__guidancex",
      "contents": "\nimport { IcTooltip, IcButton } from \"@ukic/react\";\nimport tooltipsFig1 from \"./images/fig-1-tooltips-provide-text-alternatives.png\";\nimport tooltipsFig2 from \"./images/fig-2-dont-describe-unrelated-things.png\";\nimport tooltipsFig3 from \"./images/fig-3-keep-the-tooltip-visible-when-cursor-is-over-tooltip.png\";\nimport tooltipsFig4 from \"./images/fig-4-use-multiple-lines-to-show-longer-messages.png\";\nimport tooltipsFig5 from \"./images/fig-5-avoid-position-tooltips-so-they-obscure-other-content.png\";\nimport tooltipsFig6 from \"./images/fig-6-dont-include-interactive-content-in-a-tooltip.png\";\n\n## Introduction\n\nAn example of the tooltip component.\n\n<ComponentPreview>\n  <IcTooltip label=\"This is a description of the button\" target=\"test-button\">\n    <IcButton id=\"test-button\" aria-describedby=\"ic-tooltip-test-button\">\n      Default\n    </IcButton>\n  </IcTooltip>\n</ComponentPreview>\n\n## When to use\n\nWhen interacting with an element, use a tooltip to provide additional and helpful information.\n\nAlways use tooltips on icon buttons to provide a textual alternative.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={tooltipsFig1}\n    imageAlt=\"A focused icon button displaying a tooltip that says 'Search'.\"\n    state=\"good\"\n    caption=\"Use tooltips to provide a text alternative to icon buttons.\"\n  />\n</DoubleDoDontCaution>\n\n## When not to use\n\nDon't use tooltips to provide information relating to anything other than the element the tooltip is attached to.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={tooltipsFig2}\n    imageAlt=\"Three icon buttons with a cursor hovering over the search icon button. A tooltip is displayed that says 'Settings, inbox and search'.\"\n    state=\"bad\"\n    caption=\"Don't use tooltips to contain information regarding another element.\"\n  />\n</DoubleDoDontCaution>\n\nDon't use tooltips to provide vital information to completing a task. Instead, include vital information on the page itself.\n\nDon't use tooltips if its content is unnecessary. Not every element needs to have a tooltip.\n\n## Interaction behaviour\n\nTooltips are triggered by hovering over its associated element, or by focusing on it. Make sure the tooltip is displayed the whole time the associated element is focused or hovered over.\n\nMoving the pointer over the tooltip's content maintains the tooltip visibility even if the pointer has moved out of the associated element's area.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={tooltipsFig3}\n    imageAlt=\"A button showing a tooltip with the cursor hovering over the button, and a second button showing a tooltip with the cursor hovering over the tooltip content.\"\n    state=\"good\"\n    caption=\"Tooltips display when hovering over the triggering element or the tooltip itself.\"\n  />\n</DoubleDoDontCaution>\n\n## Sizing\n\nSet the width of a tooltip to contain the content. Adhere to readable line lengths when setting tooltip widths, and wrap content onto multiple lines if necessary.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={tooltipsFig4}\n    imageAlt=\"Three icon buttons and a tooltip displayed. The tooltip says ‘Search for drinks, recipes and pairing suggestions’ and wraps onto two lines.\"\n    state=\"good\"\n    caption=\"Size the tooltip so that its content adheres to readable line lengths.\"\n  />\n</DoubleDoDontCaution>\n\n## Layout and placement\n\nAvoid positioning tooltips so that they obscure other content. Use the directional options to place the tooltip on different sides of the associated element.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={tooltipsFig5}\n    imageAlt=\"A set of icon buttons that are obscured by a tooltip that is displayed.\"\n    state=\"caution\"\n    caption=\"Avoid positioning tooltips so that they obscure other content.\"\n  />\n</DoubleDoDontCaution>\n\n## Content\n\nUse short, simple sentences within a tooltip. Don't provide more than one sentence in a tooltip. If a lot of information is required in a tooltip, consider placing it on the page content itself.\n\nInclude an icon on a tooltip if it helps to provide additional meaning, but don't use icons if they don't add anything.\n\nDon't include links or other interactive content within a tooltip. If an interaction is useful, place it within the page content.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={tooltipsFig6}\n    imageAlt=\"A tooltip that says 'For advanced search click here' where the word 'here' is a link.\"\n    state=\"bad\"\n    caption=\"Don't use interactive content within a tooltip.\"\n  />\n</DoubleDoDontCaution>\n",
      "path": "/components/tooltips",
      "navPriority": 28,
      "date": "2023-02-03",
      "title": "Tooltip",
      "status": "BETA",
      "subTitle": "Tooltips provide helpful information when the cursor hovers over an element or when focus is applied.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/tooltips",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/tooltips"
        },
        {
          "title": "Code",
          "path": "/components/tooltips/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/tooltips/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/tooltips/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.669Z",
        "lastModified": "2023-04-14T11:24:28.669Z",
        "size": 5048,
        "formattedSize": "4.9 KB"
      }
    },
    {
      "id": "components__top-nav__accessibilityx",
      "contents": "\nimport topNavFig11 from \"./images/fig-11-tab-order.png\";\n\n## Easy to use for everyone\n\nOn top navigation layouts which contain a search button (rather than an expanded search bar), when the search button is activated the search bar will appear below, extending the height of the top navigation and shifting other content down.\n\nFocus will move to the search bar automatically, allowing users to begin typing their query. When focus is moved from the search bar, the search bar will be hidden and focus is returned to the search button unless it was moved elsewhere. When the search bar is next opened, any input previously entered should persist.\n\nAll individual components used within the top navigation use their own accessibility guidance.\n\nThe top navigation forms an app's main navigation. Therefore, it always appears at the start of a page's tab index. It also uses a `navigation` landmark to allow quick navigation from anywhere within a page's content.\n\nThe top navigation content uses logical tabbing order to move between the focusable elements.\n\nThe order that the top navigation's internal elements follow is:\n\n1. App title (homepage)\n2. Search bar\n3. First icon button\n4. Second icon button\n5. Third icon button\n6. First tab\n7. Second tab\n8. Third tab\n9. Fourth tab\n\n<DoDontCaution\n  imageSrc={topNavFig11}\n  imageAlt=\"An example top navigation that displays the tab order of its internal elements.\"\n  state=\"none\"\n  caption=\"Tab ordering of the top navigation's internal elements.\"\n/>\n\n## For Assistive Technology\n\nThe secondary links and icon buttons have accessible labels that are announced by a screen reader when focused.\n\nOn smaller screens, the drawer menu acts modally and captures focus within its elements until the menu is closed.\n\nCollapsible groups in the drawer menu use `aria-expanded` to indicate whether the group is open or closed.\n\n## Based on\n\nThe top navigation component has been based on the following resources:\n\n- [Navigation Landmark](https://www.w3.org/WAI/ARIA/apg/example-index/landmarks/navigation.html), W3, accessed July 2022.\n\n## Testing\n\nWe've tested this component against WCAG 2.1 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/top-nav/accessibility",
      "date": "2023-02-03",
      "title": "Top navigation",
      "status": "BETA",
      "subTitle": "Top navigation sits across the top of the page. It includes the app name, search bar, main navigation and secondary links.  ",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/top-nav",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/top-nav"
        },
        {
          "title": "Code",
          "path": "/components/top-nav/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/top-nav/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/top-nav/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.673Z",
        "lastModified": "2023-04-14T11:24:28.673Z",
        "size": 2808,
        "formattedSize": "2.7 KB"
      }
    },
    {
      "id": "components__top-nav__codex",
      "contents": "\nimport {\n  IcTopNavigation,\n  IcSearchBar,\n  IcNavigationButton,\n  IcNavigationItem,\n  IcNavigationGroup,\n} from \"@ukic/react\";\n\nimport { MemoryRouter, NavLink } from \"react-router-dom\";\n\n## Component demo\n\nexport const snippetsDefault = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-top-navigation app-title=\"ICDS\" status=\"alpha\" version=\"v0.0.7\">\n  <svg slot=\"app-icon\" ...></svg>\n  <ic-search-bar slot=\"search\" placeholder=\"Search\" label=\"Search\"></ic-search-bar>\n  <ic-navigation-button label=\"Notifications\" slot=\"buttons\">\n    <svg slot=\"icon\" ...></svg>\n  </ic-navigation-button>\n  <ic-navigation-item slot=\"navigation\" label=\"Get started\" href=\"#\"></ic-navigation-item>\n  <ic-navigation-item slot=\"navigation\" label=\"Accessibility\" href=\"#\"></ic-navigation-item>\n  <ic-navigation-item slot=\"navigation\" label=\"Styles\" href=\"#\"></ic-navigation-item>\n  <ic-navigation-item slot=\"navigation\" label=\"Components\" href=\"#\" selected=\"true\"></ic-navigation-item>\n  <ic-navigation-item slot=\"navigation\" label=\"Patterns\" href=\"#\"></ic-navigation-item>\n  <ic-navigation-item slot=\"navigation\" label=\"Community\" href=\"#\"></ic-navigation-item>\n</ic-top-navigation>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcTopNavigation appTitle=\"ICDS\" status=\"alpha\" version=\"v0.0.7\">\n  <SlottedSVG slot=\"app-icon\" ... />\n  <IcSearchBar slot=\"search\" placeholder=\"Search\" label=\"Search\" />\n  <IcNavigationButton label=\"Notifications\" slot=\"buttons\">\n    <SlottedSVG slot=\"icon\" ... />\n  </IcNavigationButton>\n  <IcNavigationItem slot=\"navigation\" label=\"Get started\" href=\"#\" />\n  <IcNavigationItem slot=\"navigation\" label=\"Accessibility\" href=\"#\" />\n  <IcNavigationItem slot=\"navigation\" label=\"Styles\" href=\"#\" />\n  <IcNavigationItem slot=\"navigation\" label=\"Components\" href=\"#\" selected />\n  <IcNavigationItem slot=\"navigation\" label=\"Patterns\" href=\"#\" />\n  <IcNavigationItem slot=\"navigation\" label=\"Community\" href=\"#\" />\n</IcTopNavigation>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsDefault}>\n  <IcTopNavigation appTitle=\"ICDS\" status=\"alpha\" version=\"v0.0.7\">\n    <svg\n      slot=\"app-icon\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height=\"24px\"\n      viewBox=\"0 0 24 24\"\n      width=\"24px\"\n      fill=\"#000000\"\n    >\n      <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n      <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z\" />\n    </svg>\n    <IcSearchBar slot=\"search\" placeholder=\"Search\" label=\"Search\" />\n    <IcNavigationButton label=\"Notifications\" slot=\"buttons\">\n      <svg\n        slot=\"icon\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        height=\"24px\"\n        viewBox=\"0 0 24 24\"\n        width=\"24px\"\n        fill=\"#000000\"\n      >\n        <path d=\"M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z\" />\n      </svg>\n    </IcNavigationButton>\n    <IcNavigationItem slot=\"navigation\" label=\"Get started\" href=\"#\" />\n    <IcNavigationItem slot=\"navigation\" label=\"Accessibility\" href=\"#\" />\n    <IcNavigationItem slot=\"navigation\" label=\"Styles\" href=\"#\" />\n    <IcNavigationItem\n      slot=\"navigation\"\n      label=\"Components\"\n      href=\"#\"\n      selected=\"true\"\n    />\n    <IcNavigationItem slot=\"navigation\" label=\"Patterns\" href=\"#\" />\n    <IcNavigationItem slot=\"navigation\" label=\"Community\" href=\"#\" />\n  </IcTopNavigation>\n</ComponentPreview>\n\n## Top navigation details\n\n<ComponentDetails component=\"ic-top-navigation\" />\n\n## Navigation group details\n\n<ComponentDetails component=\"ic-navigation-group\" />\n\n## Navigation item details\n\n<ComponentDetails component=\"ic-navigation-item\" />\n\n## Navigation button details\n\n<ComponentDetails component=\"ic-navigation-button\" />\n\n## Variants\n\n### Grouped links\n\nexport const snippetsGroupedLinks = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-top-navigation app-title=\"ICDS\" status=\"alpha\" version=\"v0.0.7\">\n  <svg slot=\"app-icon\" ...></svg>\n  <ic-search-bar slot=\"search\" placeholder=\"Search\" label=\"Search\"></ic-search-bar>\n  <ic-navigation-group slot=\"navigation\" label=\"Navigation group\" expandable=\"true\">\n      <ic-navigation-item label=\"Navigation\" href=\"#\"></ic-navigation-item>\n      <ic-navigation-item label=\"Navigation\" href=\"#\"></ic-navigation-item>\n      <ic-navigation-item label=\"Navigation\" href=\"#\"></ic-navigation-item>\n      <ic-navigation-item label=\"Navigation\" href=\"#\"></ic-navigation-item>\n      <ic-navigation-item label=\"Navigation\" href=\"#\"></ic-navigation-item>\n      <ic-navigation-item label=\"Navigation\" href=\"#\"></ic-navigation-item>\n      <ic-navigation-item label=\"Navigation\" href=\"#\"></ic-navigation-item>\n      <ic-navigation-item label=\"Navigation\" href=\"#\"></ic-navigation-item>\n      <ic-navigation-item label=\"Navigation\" href=\"#\"></ic-navigation-item>\n    </ic-navigation-group>\n    <ic-navigation-group slot=\"navigation\" label=\"Second navigation group\" expandable=\"true\">\n      <ic-navigation-item label=\"Second navigation\" href=\"#\"></ic-navigation-item>\n      <ic-navigation-item label=\"Second navigation\" href=\"#\"></ic-navigation-item>\n      <ic-navigation-item label=\"Second navigation\" href=\"#\"></ic-navigation-item>\n      <ic-navigation-item label=\"Second navigation\" href=\"#\"></ic-navigation-item>\n      <ic-navigation-item label=\"Second navigation\" href=\"#\"></ic-navigation-item>\n      <ic-navigation-item label=\"Second navigation\" href=\"#\"></ic-navigation-item>\n      <ic-navigation-item label=\"Second navigation\" href=\"#\"></ic-navigation-item>\n      <ic-navigation-item label=\"Second navigation\" href=\"#\"></ic-navigation-item>\n      <ic-navigation-item label=\"Second navigation\" href=\"#\"></ic-navigation-item>\n    </ic-navigation-group>\n</ic-top-navigation>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcTopNavigation appTitle=\"ICDS\" status=\"alpha\" version=\"v0.0.7\">\n  <SlottedSVG slot=\"app-icon\" ... />\n  <IcSearchBar slot=\"search\" placeholder=\"Search\" label=\"Search\" />\n  <IcNavigationGroup slot=\"navigation\" label=\"Navigation group\" expandable>\n    <IcNavigationItem label=\"Navigation\" href=\"#\" />\n    <IcNavigationItem label=\"Navigation\" href=\"#\" />\n    <IcNavigationItem label=\"Navigation\" href=\"#\" />\n    <IcNavigationItem label=\"Navigation\" href=\"#\" />\n    <IcNavigationItem label=\"Navigation\" href=\"#\" />\n    <IcNavigationItem label=\"Navigation\" href=\"#\" />\n    <IcNavigationItem label=\"Navigation\" href=\"#\" />\n    <IcNavigationItem label=\"Navigation\" href=\"#\" />\n    <IcNavigationItem label=\"Navigation\" href=\"#\" />\n  </IcNavigationGroup>\n  <IcNavigationGroup slot=\"navigation\" label=\"Second navigation group\" expandable>\n    <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n    <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n    <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n    <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n    <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n    <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n    <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n    <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n    <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n  </IcNavigationGroup>\n</IcTopNavigation>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsGroupedLinks} style={{ zIndex: \"1\" }}>\n  <IcTopNavigation appTitle=\"ICDS\" status=\"alpha\" version=\"v0.0.7\">\n    <svg\n      slot=\"app-icon\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height=\"24px\"\n      viewBox=\"0 0 24 24\"\n      width=\"24px\"\n      fill=\"#000000\"\n    >\n      <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n      <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z\" />\n    </svg>\n    <IcSearchBar slot=\"search\" placeholder=\"Search\" label=\"Search\" />\n    <IcNavigationGroup\n      slot=\"navigation\"\n      label=\"Navigation group\"\n      expandable=\"true\"\n    >\n      <IcNavigationItem label=\"Navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Navigation\" href=\"#\" />\n    </IcNavigationGroup>\n    <IcNavigationGroup\n      slot=\"navigation\"\n      label=\"Second navigation group\"\n      expandable=\"true\"\n    >\n      <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n    </IcNavigationGroup>\n  </IcTopNavigation>\n</ComponentPreview>\n\n### Centre aligned\n\nexport const snippetsCentreAligned = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-top-navigation app-title=\"ICDS\" status=\"alpha\" version=\"v0.0.7\" content-aligned=\"center\">\n  <svg slot=\"app-icon\" ...></svg>\n  <ic-navigation-button label=\"button1\" slot=\"buttons\" onclick=\"alert('test')\">\n    <svg slot=\"icon\" ...></svg>\n  </ic-navigation-button>\n  <ic-navigation-item slot=\"navigation\" label=\"Navigation\" href=\"/\"></ic-navigation-item>\n  <ic-navigation-item slot=\"navigation\" label=\"Navigation\" href=\"/\"></ic-navigation-item>\n  <ic-navigation-item slot=\"navigation\" label=\"Navigation\" href=\"/\"></ic-navigation-item>\n  <ic-navigation-item slot=\"navigation\" label=\"Navigation\" href=\"/\" selected=\"true\"></ic-navigation-item>\n  <ic-navigation-item slot=\"navigation\" label=\"Navigation\" href=\"/\"></ic-navigation-item>\n</ic-top-navigation>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcTopNavigation appTitle=\"ICDS\" status=\"alpha\" version=\"v0.0.7\" contentAligned=\"center\">\n  <SlottedSVG slot=\"app-icon\" ... />\n  <IcNavigationButton label=\"button1\" slot=\"buttons\" onclick=\"alert('test')\">\n    <SlottedSVG slot=\"icon\" ... />\n  </IcNavigationButton>\n  <IcNavigationItem slot=\"navigation\" label=\"Navigation\" href=\"/\" />\n  <IcNavigationItem slot=\"navigation\" label=\"Navigation\" href=\"/\" />\n  <IcNavigationItem slot=\"navigation\" label=\"Navigation\" href=\"/\" />\n  <IcNavigationItem slot=\"navigation\" label=\"Navigation\" href=\"/\" selected />\n  <IcNavigationItem slot=\"navigation\" label=\"Navigation\" href=\"/\" />\n</IcTopNavigation>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsCentreAligned}>\n  <IcTopNavigation\n    appTitle=\"ICDS\"\n    status=\"alpha\"\n    version=\"v0.0.7\"\n    contentAligned=\"center\"\n  >\n    <svg\n      slot=\"app-icon\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height=\"24px\"\n      viewBox=\"0 0 24 24\"\n      width=\"24px\"\n      fill=\"#000000\"\n    >\n      <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n      <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z\" />\n    </svg>\n    <IcNavigationButton label=\"button1\" slot=\"buttons\" onclick=\"alert('test')\">\n      <svg\n        slot=\"icon\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        height=\"24px\"\n        viewBox=\"0 0 24 24\"\n        width=\"24px\"\n        fill=\"#000000\"\n      >\n        <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z\" />\n      </svg>\n    </IcNavigationButton>\n    <IcNavigationItem slot=\"navigation\" label=\"Navigation\" href=\"/\" />\n    <IcNavigationItem slot=\"navigation\" label=\"Navigation\" href=\"/\" />\n    <IcNavigationItem slot=\"navigation\" label=\"Navigation\" href=\"/\" />\n    <IcNavigationItem\n      slot=\"navigation\"\n      label=\"Navigation\"\n      href=\"/\"\n      selected=\"true\"\n    />\n    <IcNavigationItem slot=\"navigation\" label=\"Navigation\" href=\"/\" />\n  </IcTopNavigation>\n</ComponentPreview>\n\n### Left aligned\n\nexport const snippetsLeftAligned = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-top-navigation app-title=\"ICDS\" status=\"alpha\" version=\"v0.0.7\" content-aligned=\"left\">\n  <svg slot=\"app-icon\" ...></svg>\n  <ic-search-bar slot=\"search\" placeholder=\"Search\" label=\"Search\"></ic-search-bar>\n  <ic-navigation-button label=\"button1\" slot=\"buttons\" onclick=\"alert('test')\">\n    <svg slot=\"icon\" ...></svg>\n  </ic-navigation-button>\n  <ic-navigation-item slot=\"navigation\" label=\"Navigation\" href=\"/\"></ic-navigation-item>\n  <ic-navigation-item slot=\"navigation\" label=\"Navigation\" href=\"/\"></ic-navigation-item>\n  <ic-navigation-item slot=\"navigation\" label=\"Navigation\" href=\"/\"></ic-navigation-item>\n  <ic-navigation-item slot=\"navigation\" label=\"Navigation\" href=\"/\" selected=\"true\"></ic-navigation-item>\n  <ic-navigation-item slot=\"navigation\" label=\"Navigation\" href=\"/\"></ic-navigation-item>\n</ic-top-navigation>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcTopNavigation appTitle=\"ICDS\" status=\"alpha\" version=\"v0.0.7\" contentAligned=\"left\">\n  <SlottedSVG slot=\"app-icon\" ... />\n  <IcSearchBar slot=\"search\" placeholder=\"Search\" label=\"Search\" />\n  <IcNavigationButton label=\"button1\" slot=\"buttons\" onclick=\"alert('test')\">\n    <SlottedSVG slot=\"icon\" ... />\n  </IcNavigationButton>\n  <IcNavigationItem slot=\"navigation\" label=\"Navigation\" href=\"/\" />\n  <IcNavigationItem slot=\"navigation\" label=\"Navigation\" href=\"/\" />\n  <IcNavigationItem slot=\"navigation\" label=\"Navigation\" href=\"/\" />\n  <IcNavigationItem slot=\"navigation\" label=\"Navigation\" href=\"/\" selected />\n  <IcNavigationItem slot=\"navigation\" label=\"Navigation\" href=\"/\" />\n</IcTopNavigation>`,\n  },\n];\n\n<ComponentPreview snippets={snippetsLeftAligned}>\n  <IcTopNavigation\n    appTitle=\"ICDS\"\n    status=\"alpha\"\n    version=\"v0.0.7\"\n    contentAligned=\"left\"\n  >\n    <svg\n      slot=\"app-icon\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height=\"24px\"\n      viewBox=\"0 0 24 24\"\n      width=\"24px\"\n      fill=\"#000000\"\n    >\n      <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n      <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z\" />\n    </svg>\n    <IcSearchBar slot=\"search\" placeholder=\"Search\" label=\"Search\" />\n    <IcNavigationButton label=\"button1\" slot=\"buttons\" onclick=\"alert('test')\">\n      <svg\n        slot=\"icon\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        height=\"24px\"\n        viewBox=\"0 0 24 24\"\n        width=\"24px\"\n        fill=\"#000000\"\n      >\n        <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z\" />\n      </svg>\n    </IcNavigationButton>\n    <IcNavigationItem slot=\"navigation\" label=\"Navigation\" href=\"/\" />\n    <IcNavigationItem slot=\"navigation\" label=\"Navigation\" href=\"/\" />\n    <IcNavigationItem slot=\"navigation\" label=\"Navigation\" href=\"/\" />\n    <IcNavigationItem\n      slot=\"navigation\"\n      label=\"Navigation\"\n      href=\"/\"\n      selected=\"true\"\n    />\n    <IcNavigationItem slot=\"navigation\" label=\"Navigation\" href=\"/\" />\n  </IcTopNavigation>\n</ComponentPreview>\n\n### With React Router (using slots)\n\nThe following example also demonstrates using a slotted app title link.\n\nexport const withReactRouter = [\n  {\n    language: \"React\",\n    snippet: `<MemoryRouter initialEntries={[\"/\"]}>\n  <IcTopNavigation status=\"alpha\" version=\"v0.0.7\">\n    <NavLink to=\"/\" slot=\"app-title\">ICDS</NavLink>\n    <SlottedSVG slot=\"app-icon\" ... />\n    <IcSearchBar slot=\"search\" placeholder=\"Search\" label=\"Search\" />\n    <IcNavigationButton label=\"button1\" slot=\"buttons\" onClick={() => alert('test')}>\n      <SlottedSVG slot=\"icon\" ... />\n    </IcNavigationButton>\n    <IcNavigationItem slot=\"navigation\">\n      <NavLink to=\"/\" slot=\"navigation-item\">Home</NavLink>\n    </IcNavigationItem>\n    <IcNavigationItem slot=\"navigation\">\n      <NavLink to=\"/daily-tippers\" slot=\"navigation-item\">Daily Tippers</NavLink>\n    </IcNavigationItem>\n  </IcTopNavigation>\n  <main>\n    <IcSectionContainer style={{padding: \"16px\"}}>\n      <Routes>\n        <Route path=\"/\" element={() => <IcTypography>This is the home page</IcTypography>} />\n        <Route path=\"/daily-tippers\" element={() => <IcTypography>This page is about daily tippers</IcTypography>} />\n      </Routes>\n    </IcSectionContainer>\n  </main>\n</MemoryRouter>\n    `,\n  },\n];\n\n<ComponentPreview\n  snippets={withReactRouter}\n  style={{ display: \"flex\", flexDirection: \"column\" }}\n>\n  <MemoryRouter initialEntries={[\"/\"]}>\n    <IcTopNavigation status=\"alpha\" version=\"v0.0.7\">\n      <NavLink to=\"/\" slot=\"app-title\">\n        ICDS\n      </NavLink>\n      <svg\n        slot=\"app-icon\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        height=\"24px\"\n        viewBox=\"0 0 24 24\"\n        width=\"24px\"\n        fill=\"#000000\"\n      >\n        <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z\" />\n      </svg>\n      <IcSearchBar slot=\"search\" placeholder=\"Search\" label=\"Search\" />\n      <IcNavigationButton\n        label=\"button1\"\n        slot=\"buttons\"\n        onClick={() => alert(\"test\")}\n      >\n        <svg\n          slot=\"icon\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          height=\"24px\"\n          viewBox=\"0 0 24 24\"\n          width=\"24px\"\n          fill=\"#000000\"\n        >\n          <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n          <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z\" />\n        </svg>\n      </IcNavigationButton>\n      <IcNavigationItem slot=\"navigation\">\n        <NavLink to=\"/\" slot=\"navigation-item\">\n          Home\n        </NavLink>\n      </IcNavigationItem>\n      <IcNavigationItem slot=\"navigation\">\n        <NavLink to=\"/daily-tippers\" slot=\"navigation-item\">\n          Daily Tippers\n        </NavLink>\n      </IcNavigationItem>\n    </IcTopNavigation>\n  </MemoryRouter>\n</ComponentPreview>\n",
      "path": "/components/top-nav/code",
      "date": "2023-02-03",
      "title": "Top navigation",
      "status": "BETA",
      "subTitle": "Top navigation sits across the top of the page. It includes the app name, search bar, main navigation and secondary links.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/top-navigation",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/top-nav"
        },
        {
          "title": "Code",
          "path": "/components/top-nav/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/top-nav/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/top-nav/code.mdx",
        "createdAt": "2023-04-14T11:24:28.673Z",
        "lastModified": "2023-04-14T11:24:28.673Z",
        "size": 19935,
        "formattedSize": "19.5 KB"
      }
    },
    {
      "id": "components__top-nav__guidancex",
      "contents": "\nimport {\n  IcTopNavigation,\n  IcSearchBar,\n  IcNavigationItem,\n  IcNavigationGroup,\n} from \"@ukic/react\";\nimport topNavFig1 from \"./images/fig-1-dont-use-both-side-and-top-navigation.png\";\nimport topNavFig2 from \"./images/fig-2-show-status-version-and-secondary-links.png\";\nimport topNavFig3 from \"./images/fig-3-top-nav-with-megamenu.png\";\nimport topNavFig4 from \"./images/fig-4-use-drawer-navigation-on-small-screens.png\";\nimport topNavFig5 from \"./images/fig-5-personality-colours.png\";\nimport topNavFig6 from \"./images/fig-6-dont-position-top-nav-not-full-width.png\";\nimport topNavFig7 from \"./images/fig-7-use-full-width-alignment.png\";\nimport topNavFig8 from \"./images/fig-8-use-centre-alignment.png\";\nimport topNavFig9 from \"./images/fig-9-dont-use-long-labels.png\";\nimport topNavFig10 from \"./images/fig-10-megamenu-with-too-many-links.png\";\n\n## Component variants\n\nTop navigation has two variants: standard and one with a mega-menu.\n\n### Standard\n\nUse a standard top navigation for apps with eight or fewer navigation options.\n\n<ComponentPreview>\n  <IcTopNavigation appTitle=\"ICDS\" status=\"alpha\" version=\"v0.0.7\">\n    <svg\n      slot=\"app-icon\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height=\"24px\"\n      viewBox=\"0 0 24 24\"\n      width=\"24px\"\n      fill=\"#000000\"\n    >\n      <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n      <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z\" />\n    </svg>\n    <IcSearchBar slot=\"search\" placeholder=\"Search\" label=\"Search\" />\n    <IcNavigationItem slot=\"navigation\" label=\"Get started\" href=\"#\" />\n    <IcNavigationItem slot=\"navigation\" label=\"Accessibility\" href=\"#\" />\n    <IcNavigationItem slot=\"navigation\" label=\"Styles\" href=\"#\" />\n    <IcNavigationItem\n      slot=\"navigation\"\n      label=\"Components\"\n      href=\"#\"\n      selected=\"true\"\n    />\n    <IcNavigationItem slot=\"navigation\" label=\"Patterns\" href=\"#\" />\n    <IcNavigationItem slot=\"navigation\" label=\"Community\" href=\"#\" />\n  </IcTopNavigation>\n</ComponentPreview>\n\n### With mega-menu\n\nUse a top navigation with mega-menu for apps with more than eight navigation options, or options that can be grouped into categories. The main link groups are displayed in the top navigation and open a mega-menu when hovered over or focused.\n\n<ComponentPreview style={{ zIndex: \"1\" }}>\n  <IcTopNavigation appTitle=\"ICDS\" status=\"alpha\" version=\"v0.0.7\">\n    <svg\n      slot=\"app-icon\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height=\"24px\"\n      viewBox=\"0 0 24 24\"\n      width=\"24px\"\n      fill=\"#000000\"\n    >\n      <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n      <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z\" />\n    </svg>\n    <IcSearchBar slot=\"search\" placeholder=\"Search\" label=\"Search\" />\n    <IcNavigationGroup\n      slot=\"navigation\"\n      label=\"Navigation group\"\n      expandable=\"true\"\n    >\n      <IcNavigationItem label=\"Navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Navigation\" href=\"#\" />\n    </IcNavigationGroup>\n    <IcNavigationGroup\n      slot=\"navigation\"\n      label=\"Second navigation group\"\n      expandable=\"true\"\n    >\n      <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n      <IcNavigationItem label=\"Second navigation\" href=\"#\" />\n    </IcNavigationGroup>\n  </IcTopNavigation>\n</ComponentPreview>\n\n## When to use\n\nUse the top navigation component for intranet-style and content heavy apps. Use it for apps with complex page structures where every page should be accessible from any other page using the mega-menu.\n\nUse top navigation alongside additional components like [page headers](/components/page-header) to create a variety of different [layout](/styles/layout-spacing) and navigation styles.\n\n## When not to use\n\nFor apps with a small number of pages, use [side navigation](/components/side-nav) as it's better suited for providing quick access and maximising the screen space for page content.\n\nUse either top navigation or side navigation. Don't use both at the same time.\n\n<DoDontCaution\n  imageSrc={topNavFig1}\n  imageAlt=\"An example app that shows a top navigation and side navigation used on the same page.\"\n  state=\"bad\"\n  caption=\"Don't use both top navigation and side navigation at the same time.\"\n/>\n\n## Optional elements\n\n### Search bar\n\nInclude an optional [search bar](/components/search-bar) to provide search functionality on every page in the app.\n\n### Secondary links\n\nInclude secondary links or actions that appear on the right-hand side of the top navigation. Use these for global utilities like application settings, or as links to other related sites.\n\n### App status and version\n\nUse the title adornment and app version to display the app's info in the top navigation.\n\n<DoDontCaution\n  imageSrc={topNavFig2}\n  imageAlt=\"An example of top navigation with a search bar included as well as secondary links and app status and version information.\"\n  state=\"good\"\n  caption=\"Top navigation with search bar, secondary links and app status and version.\"\n/>\n\n## Interaction behaviour\n\nWhen using a top navigation with mega-menu, the menu is displayed when hovering over, or focusing on, the main navigation groups.\n\n<DoDontCaution\n  imageSrc={topNavFig3}\n  imageAlt=\"An example top navigation with mega-menu showing the mega-menu appearing when the user hovers over a navigation group in the top navigation component.\"\n  state=\"good\"\n  caption=\"A mega-menu is displayed when hovering or focusing on the top navigation's main groups.\"\n/>\n\nOn smaller screens, both top navigation variants will display a menu button that opens a drawer menu from the right-hand side of the screen. The drawer menu can display lists of single links or grouped links that can be expanded and collapsed.\n\n<DoDontCaution\n  imageSrc={topNavFig4}\n  imageAlt=\"An example of top navigation displayed on a smaller screen. It displays a menu button that opens a drawer menu that includes the navigation links.\"\n  state=\"good\"\n  caption=\"Top navigation displayed on smaller screens uses a drawer menu to display its navigation links.\"\n/>\n\n## Colour\n\nThe top navigation uses the app's [theme colour](/styles/colour/#theme) as the background and automatically sets the foreground colour to ensure accessible contrast ratios.\n\nChange the app's theme colour to change the background colour of the top navigation and help distinguish your app from others your users may use.\n\n<DoDontCaution\n  imageSrc={topNavFig5}\n  imageAlt=\"Six examples of top navigation components using different theme colours.\"\n  state=\"good\"\n  caption=\"Examples of top navigation using different theme colours.\"\n/>\n\n## Sizing\n\nAlways position the top navigation at the top of the screen and make sure that it horizontally fills the browser window.\n\n<DoDontCaution\n  imageSrc={topNavFig6}\n  imageAlt=\"An example app with top navigation that does not horizontally fill the browser window.\"\n  state=\"bad\"\n  caption=\"Don't position the top navigation so that it does not horizontally fill the browser window.\"\n/>\n\n## Layout and placement\n\n### Alignment\n\nAlign the top navigation's content either full width or centred.\n\nUse full width alignment to position the top navigation content to the left and right of the browser window.\n\n<DoDontCaution\n  imageSrc={topNavFig7}\n  imageAlt=\"An example top navigation that is aligned full width. The app name and main navigation is aligned to the left-hand side of the browser window and the secondary links and search bar is aligned to the right.\"\n  state=\"good\"\n  caption=\"Use full width alignment to position the top navigation content to the left and right of the browser window.\"\n/>\n\nUse centre alignment to position the top navigation content in line with other page content.\n\n<DoDontCaution\n  imageSrc={topNavFig8}\n  imageAlt=\"An example top navigation with its content aligned to centre. The top navigation content aligns with the page margins used for the rest of the page content.\"\n  state=\"good\"\n  caption=\"Use centre alignment to position the top navigation content in line with other page content.\"\n/>\n\n## Content\n\n### Labels and icons\n\nFollow the [content style guidelines](/styles/content-style) for all navigation option labels as well as each option group label.\n\nFollow the [icon style guidelines](/styles/icons) when selecting icons for menu options or secondary links.\n\n### Navigation options\n\nMake sure to keep navigation option labels concise, as they may not all fit within the top navigation on all screen sizes.\n\nFor the standard variant, don't use more than eight links as this may not display correctly.\n\n<DoDontCaution\n  imageSrc={topNavFig9}\n  imageAlt=\"An example top navigation with eight links with long labels. The links don't fit horizontally within the top navigation.\"\n  state=\"bad\"\n  caption=\"Don't use lengthy navigation option labels as they may not fit on all screen sizes.\"\n/>\n\n### Mega-menu\n\nInclude up to five columns of navigation links in the mega-menu and aim to keep the number of links in each column to six or fewer.\n\n<DoDontCaution\n  imageSrc={topNavFig10}\n  imageAlt=\"An example top navigation with mega-menu that shows seven columns of links, with each column containing eight links.\"\n  state=\"caution\"\n  caption=\"Avoid using a mega-menu with more than five columns of links, and avoid using more than six links in each group.\"\n/>\n",
      "path": "/components/top-nav",
      "navPriority": 29,
      "date": "2023-02-03",
      "title": "Top navigation",
      "status": "BETA",
      "subTitle": "Top navigation sits across the top of the page. It includes the app name, search bar, main navigation and secondary links.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/top-nav",
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/top-nav"
        },
        {
          "title": "Code",
          "path": "/components/top-nav/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/top-nav/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/top-nav/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.673Z",
        "lastModified": "2023-04-14T11:24:28.673Z",
        "size": 11043,
        "formattedSize": "10.8 KB"
      }
    },
    {
      "id": "components__typography__accessibilityx",
      "contents": "\n## Easy to use for everyone\n\nTypography uses the [Open Sans](https://fonts.google.com/specimen/Open+Sans) font for most text and [Nunito Sans](https://fonts.google.com/specimen/Nunito+Sans) for `h1` and `h2`. These are flexible and readable fonts that works well across digital and print.\n\nBy wrapping elements, it allows the use of semantic headings and HTML tags to structure the app, and retains flexibility.\n\nUsing correct HTML will allow assistive technologies to read an overview of the page when landmarks, regions and headings are implemented appropriately.\n\n## Based on\n\nThe typography component is based on the following resources:\n\n- [WCAG 2.1 1.3.1 Info and Relationships](https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships), W3, accessed November 2022.\n\n## Testing\n\nWe've tested this component against WCAG 2.1 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.\n",
      "path": "/components/typography/accessibility",
      "date": "2023-02-03",
      "title": "Typography",
      "status": "BETA",
      "subTitle": "Use the typography component for consistent styling across typographical elements.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/typography",
      "hidden": false,
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/typography"
        },
        {
          "title": "Code",
          "path": "/components/typography/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/typography/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/typography/accessibility.mdx",
        "createdAt": "2023-04-14T11:24:28.677Z",
        "lastModified": "2023-04-14T11:24:28.677Z",
        "size": 1500,
        "formattedSize": "1.5 KB"
      }
    },
    {
      "id": "components__typography__codex",
      "contents": "\nimport { IcTypography } from \"@ukic/react\";\n\n## Component demo\n\nexport const snippets = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-typography variant=\"h2\">\n  <h5>H5 with H2 styling</h5>\n</ic-typography>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcTypography variant=\"h2\">\n  <h5>H5 with H2 styling</h5>\n</IcTypography>`,\n  },\n];\n\n<ComponentPreview snippets={snippets}>\n  <IcTypography variant=\"h2\">\n    <h5>H5 with H2 styling</h5>\n  </IcTypography>\n</ComponentPreview>\n\nexport const spacingSnippets = [\n  {\n    language: \"Web component\",\n    snippet: `<ic-typography variant=\"h2\" apply-vertical-margins=\"true\">\n  <h5>H5 with H2 styling and margins applied</h5>\n</ic-typography>`,\n  },\n  {\n    language: \"React\",\n    snippet: `<IcTypography variant=\"h2\" applyVerticalMargins>\n  <h5>H5 with H2 styling and margins applied</h5>\n</IcTypography>`,\n  },\n];\n\n## Typography details\n\n<ComponentDetails component=\"ic-typography\" />\n\n## Variants\n\n### With top and bottom margins applied\n\n<ComponentPreview snippets={spacingSnippets}>\n  <IcTypography variant=\"h2\" applyVerticalMargins>\n    <h5>H5 with H2 styling and margins applied</h5>\n  </IcTypography>\n</ComponentPreview>\n",
      "path": "/components/typography/code",
      "date": "2023-02-03",
      "title": "Typography",
      "status": "BETA",
      "subTitle": "Use the typography component for consistent styling across typographical elements.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/typography",
      "hidden": false,
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/typography"
        },
        {
          "title": "Code",
          "path": "/components/typography/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/typography/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/typography/code.mdx",
        "createdAt": "2023-04-14T11:24:28.677Z",
        "lastModified": "2023-04-14T11:24:28.677Z",
        "size": 1717,
        "formattedSize": "1.7 KB"
      }
    },
    {
      "id": "components__typography__guidancex",
      "contents": "\nimport { IcTypography } from \"@ukic/react\";\n\n## Introduction\n\nThe typography component is used to style text elements like `p`, `h1` and `label`. The element to be styled should be wrapped with the typography component.\n\nThe typography variants are defined on the [typography styles](/styles/typography) page.\n\nUse one of the typography component's variants to style an element. For example, the following uses a `h2` variant to wrap a `h5` element and apply the 'heading large' styling.\n\n<ComponentPreview>\n  <IcTypography variant=\"h2\">\n    <h5>&lt;h5&gt; with 'heading large' styling</h5>\n  </IcTypography>\n</ComponentPreview>\n\n## When to use\n\nUse typography to provide consistent styling across an app's text content.\n\nUse the logical order of `h#` tags in code for headings. For example, a `h3` heading needs to come after a `h2` heading but can be styled as any variant.\n\n## Vertical margins\n\nWhen using a typography component within page content, apply the vertical margins to evenly space out text elements on the page.\n\nIf using the typography component within other components or compact layouts, don't apply vertical margins. You can then position the typography component with precision.\n",
      "path": "/components/typography",
      "navPriority": 30,
      "date": "2023-02-03",
      "title": "Typography",
      "status": "BETA",
      "subTitle": "Use the typography component for consistent styling across typographical elements.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/components/typography",
      "hidden": false,
      "tabs": [
        {
          "title": "Guidance",
          "path": "/components/typography"
        },
        {
          "title": "Code",
          "path": "/components/typography/code"
        },
        {
          "title": "Accessibility",
          "path": "/components/typography/accessibility"
        }
      ],
      "meta": {
        "relativePath": "components/typography/guidance.mdx",
        "createdAt": "2023-04-14T11:24:28.677Z",
        "lastModified": "2023-04-14T11:24:28.677Z",
        "size": 1746,
        "formattedSize": "1.7 KB"
      }
    },
    {
      "id": "get-started__a-design-systemx",
      "contents": "\n## Our reasons behind building a Design System\n\nWe love what we've built. It’s already helped MI6, MI5, and GCHQ to create powerful and accessible capabilities that keep the UK and its partners safe and prosperous.\n\nWe’ve built our own Design System because of our unique requirements. We needed both flexibility and solid accessibility to [unlock efficiencies](https://gds.blog.gov.uk/2020/02/28/podcast-gov-uk-design-system/) at speed. We will continue to build on great Design Systems like the [UK Government Digital Service’s Design System](https://design-system.service.gov.uk/) and contribute back where possible.\n\nWe’re passionate about making sure that everyone can contribute equitably to our shared missions. We believe our Design System is the best way to help our teams and partners do that\n\n## Changing a culture\n\nBuilding our own Design System and UI Kit allows our teams and partners to join us on this journey. It’s key for our growth that they have a deep understanding of accessibility and good design practice.\n\nEvery organisation has a different culture. We’re supporting Engineering change across three huge departments and have proven it’s not as simple as ‘do what I say’ and ‘use this style guide’.\n\nWe need teams to understand the value of consistent, usable and accessible design. To achieve this across departments, platforms, technologies and skill level required a collaborative and community-driven approach.\n\n## Game-changing potential\n\nFaster capability development benefits everyone. The Design System has already proven that we can simultaneously speed up and improve the quality of what we build. This means the community and assets we adopt can better serve our fast-changing mission needs and we are confident on them being accessible.\n\nThe benefits of build-once and deep collaborative working, offered by our Design System have proven invaluable. We estimate our Design System will eventually speed up development by about 30%. In March 2022, we calculated that our prototype Design System delivered dev-and-design time efficiency improvements of about 15%. This is compared to using third-party open source component libraries.\n\n## This is for everyone\n\nThe complexity of the capabilities in use are high and user needs are often open-ended and require a level high skill. The key value delivered by our Design System is repeatable patterns across a huge number of diverse but interconnected systems.\n\nInclusion and accessibility is core to our Design System. We’ve put a lot of effort into the atomic design components (typography, buttons). We decided this to instil confidence in the control of our ecosystem as we learn more about the vast use cases we encounter\n\n## What now?\n\nWe’re interested to see the potential of our work and where it we can go now, sharing it with more and more people. Open sourcing is a big step, and opportunity, for MI6, MI5, and GCHQ.\n\nWe hope our experiences can support your efforts in improving accessibility and usability of complex government, enterprise, and specialist technology.\n\nWe want our Design System to continue to evolve and we’re excited to see what happens next. Please join us on this journey\n\n**- The IC Design System team from MI6, MI5, GCHQ, and partners.**\n",
      "path": "/get-started/a-design-system",
      "navPriority": 7,
      "date": "2022-11-15",
      "title": "Why we built a Design System",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/get-started/a-design-system.mdx",
      "meta": {
        "relativePath": "get-started/a-design-system.mdx",
        "createdAt": "2023-04-14T11:24:28.677Z",
        "lastModified": "2023-04-14T11:24:28.677Z",
        "size": 3522,
        "formattedSize": "3.4 KB"
      }
    },
    {
      "id": "get-started__angularx",
      "contents": "\nThese instructions were used with Angular version 13.2.5.\n\n## Step one\n\nIn the root of your project:\n\n```shell\n// using npm\nnpm install @ukic/web-components @ukic/fonts\n\n// using yarn\nrm package-lock.json\nyarn add @ukic/web-components @ukic/fonts\n```\n\n## Step two\n\nIn the `app.modules.ts` file, import the `CUSTOM_ELEMENTS_SCHEMA`.\n\n```jsx\nimport { CUSTOM_ELEMENTS_SCHEMA, NgModule } from \"@angular/core\";\n```\n\n## Step three\n\nThen include it in the `@NgModule` decorator object.\n\n```jsx\n@NgModule({\ndeclarations: [AppComponent],\nimports: [BrowserModule],\nproviders: [],\nbootstrap: [AppComponent],\nschemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\n```\n\n## Step four\n\nImport defineCustomElements in your `main.ts` file.\n\n```jsx\nimport { defineCustomElements } from \"@ukic/web-components/loader\";\n```\n\n## Step five\n\nCall defineCustomElements at the bottom of `main.ts`:\n\n```jsx\n//other configuration\n...\ndefineCustomElements();\n```\n\n## Step six\n\nDeclare the component in your `app.component.html` file.\n\n```html\n<ic-status-tag label=\"Neutral\"></ic-status-tag>\n```\n\n## Step seven\n\nTo get the correct styling with the ICDS components, import the core CSS file.\n\nAdd the following into the top level CSS file for your project. For newly generated Angular projects this will be `src/styles.css`.\n\n```css\n@import \"@ukic/fonts/dist/fonts.css\";\n@import \"@ukic/web-components/dist/core/core.css\";\n```\n\n<br />\n\nIn order to be rendered consistently across browsers and in line with modern standards, each of the ICDS components uses styles from a global CSS file based on [Normalize.css](https://necolas.github.io/normalize.css/).\n\nIf you would like to import these styles to apply them to the rest of your project and slotted elements used within any of the ICDS components, add the following into the top level CSS file as well.\n\n```css\n@import \"@ukic/web-components/dist/core/normalize.css\";\n```\n",
      "path": "/get-started/install-components/angular",
      "navPriority": 3,
      "date": "2022-11-15",
      "title": "Angular",
      "subTitle": "To use the components follow the relevant framework instructions.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/get-started/angular.mdx",
      "meta": {
        "relativePath": "get-started/angular.mdx",
        "createdAt": "2023-04-14T11:24:28.677Z",
        "lastModified": "2023-04-14T11:24:28.677Z",
        "size": 2175,
        "formattedSize": "2.1 KB"
      }
    },
    {
      "id": "get-started__custom-themex",
      "contents": "\n## Customising component colours\n\nSome components can have their theme colour changed by using either of the methods below. When the theme colour is changed, components will automatically update.\n\nOther styles on affected components will also adapt accordingly, such as text colour and focus border indicators.\n\n## CSS variables\n\n```css\n:root {\n  --ic-theme-primary-r: 92;\n  --ic-theme-primary-g: 9;\n  --ic-theme-primary-b: 72;\n}\n```\n\n## Theme component\n\nAlternatively, you can include the `ic-theme` component and set the `color` property:\n\n```jsx\n<ic-theme color=\"rgb(92, 9, 72)\"></ic-theme>\n<ic-theme color=\"#5c0949\"></ic-theme>\n```\n\n### Components that use the theme colour\n\n- [Footer](/components/footer)\n- [Hero](/components/hero)\n- [Side navigation](/components/side-nav)\n- [Top navigation](/components/top-nav)\n",
      "path": "/get-started/install-components/custom-theme",
      "navPriority": 10,
      "date": "2022-11-15",
      "title": "Custom theme",
      "subTitle": "How to change the theme colour of some components.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/get-started/custom-theme.mdx",
      "meta": {
        "relativePath": "get-started/custom-theme.mdx",
        "createdAt": "2023-04-14T11:24:28.677Z",
        "lastModified": "2023-04-14T11:24:28.677Z",
        "size": 1122,
        "formattedSize": "1.1 KB"
      }
    },
    {
      "id": "get-started__design-principlesx",
      "contents": "\n## Introduction\n\nDesign principles should be referred to throughout the whole design process to question whether design decisions uphold the principles or break them.\n\n## Inclusivity by design\n\nThe Design System's contents, components, patterns and processes should be able to be used by everyone equally. This means addressing accessibility and context of use as well as personal preference.\n\n## Consistency through re-use\n\nWe use re-usable patterns and components to drive consistency through its use of familiar and intuitive design.\n\n## Mission driven\n\nWe build by listening to the Intelligence Community in order to deliver their specific needs.\n\n## Research first\n\nWe make decisions based on data and research, not opinions.\n\n## Flexible, adaptive, powerful\n\nThe system should be flexible; it should adapt as necessary; it should empower users.\n\n## Continuously evolving\n\nThe system should evolve to stay in alignment with modern practices and adapt to include new content that helps to solve new design problems. Future proofing enables adoption and sustainability.\n\n## Transparent and open\n\nEnable feedback on processes and content from the entire community. Allow contribution from users as well as producers.\n",
      "path": "/get-started/design-principles",
      "navPriority": 6,
      "date": "2022-11-15",
      "title": "Design principles",
      "subTitle": "Follow our community design principles.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/get-started/design-principles.mdx?at=develop",
      "hidden": false,
      "meta": {
        "relativePath": "get-started/design-principles.mdx",
        "createdAt": "2023-04-14T11:24:28.677Z",
        "lastModified": "2023-04-14T11:24:28.677Z",
        "size": 1532,
        "formattedSize": "1.5 KB"
      }
    },
    {
      "id": "get-started__figmax",
      "contents": "\nimport { IcAlert } from \"@ukic/react\";\nimport figmaFig1 from \"./images/assets2x.png\";\nimport figmaFig2 from \"./images/libraries2x.png\";\n\n## About the Figma UI Kit\n\nWe've built a Figma UI Kit to use alongside the guidance and code you'll find on this website. It'll make it easier to prototype and build things quickly.\n\nAll Figma resources have been built with our users in mind, with a strong focus on making sure accessibility is embedded from the start. That way what we can provide an amazing experience, usable for everyone\n\n## Accessing the library\n\n<IcAlert\n  title=\"Need to know\"\n  message=\"The Figma UI Kit is currently only available to internal users, but we will be sharing it publicly soon.\"\n  variant=\"info\"\n/>\n\nThe UI Kit is turned on by default for all projects within our Figma organisation.\n\n1. In a new or existing Figma design file, click 'Assets' from the left-hand side panel then click the 'Team library' icon (the book).\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={figmaFig1}\n    imageAlt=\"Image of the left-hand side panel in Figma with the 'Assets' tab open and icon buttons on the right of the panel including the 'Team library' button.\"\n    state=\"none\"\n  />\n</DoubleDoDontCaution>\n\n2. Make sure the Intelligence Community Design System library is turned on.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={figmaFig2}\n    imageAlt=\"Image of the Libraries menu in Figma with the Intelligence Community Design System library turned on.\"\n    state=\"none\"\n  />\n</DoubleDoDontCaution>\n\n## How to use the Figma UI Kit components\n\nFind the details on the internal system to get started with Figma.\n",
      "path": "/get-started/figma",
      "navPriority": 5,
      "date": "2022-11-15",
      "title": "Get the Figma kit",
      "subTitle": "Reusable and flexible Figma components used to design, prototype and hand-off designs for apps and services.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/get-started/figma.mdx",
      "meta": {
        "relativePath": "get-started/figma.mdx",
        "createdAt": "2023-04-14T11:24:28.677Z",
        "lastModified": "2023-04-14T11:24:28.677Z",
        "size": 1967,
        "formattedSize": "1.9 KB"
      }
    },
    {
      "id": "get-started__gatsbyx",
      "contents": "\n## Step one\n\nIn the root of your project, run:\n\n```shell\n// using npm\nnpm install @ukic/react @ukic/fonts\n\n// using yarn\nrm package-lock.json\nyarn add @ukic/react @ukic/fonts\n```\n\n## Step Two\n\nInstall the `gatsby-plugin-stencil` package to allow Gatsby to render the components server-side.\n\n```shell\n// using npm\nnpm install --save gatsby-plugin-stencil\n```\n\n## Step three\n\nIn your `gatsby-config.js` file (at the root of the project), add the following:\n\n```js\nplugins: [\n  {\n    resolve: `gatsby-plugin-stencil`,\n\n    options: {\n      module: \"@ukic/web-components\",\n      renderToStringOptions: {\n        prettyHtml: true,\n      },\n    },\n  },\n];\n```\n\n## Step four\n\nImport the component(s) in your Gatsby pages.\n\n```jsx\nimport { IcComponent } from \"@ukic/react\";\n```\n\n## Step five\n\nTo get the correct styling for the ICDS components, import the core CSS file.\n\nAdd the following to the top level index file of your project.\n\n```jsx\nimport \"@ukic/fonts/dist/fonts.css\";\nimport \"@ukic/react/dist/core/core.css\";\n```\n\n<br />\n\nIn order to be rendered consistently across browsers and in line with modern standards, each of the ICDS components uses styles from a global CSS file based on [Normalize.css](https://necolas.github.io/normalize.css/).\n\nIf you would like to import these styles to apply them to the rest of your project and slotted elements used within any of the ICDS components, add the following into the top level index file as well.\n\n```jsx\nimport \"@ukic/react/dist/core/normalize.css\";\n```\n\n## Helpful links\n\nThe Gatsby documentation contains more information on the [gatsby-plugin-stencil](https://www.gatsbyjs.com/plugins/gatsby-plugin-stencil/) plugin. Further information can be found on [using Stencil web components in Gatsby](https://dev.to/brunnerlivio/use-stencil-with-gatsbyjs-1omo).\n",
      "path": "/get-started/install-components/gatsby",
      "navPriority": 7,
      "date": "2023-01-19",
      "title": "Gatsby",
      "subTitle": "How to use the components in a Gatsby project.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/get-started/gatsby.mdx",
      "meta": {
        "relativePath": "get-started/gatsby.mdx",
        "createdAt": "2023-04-14T11:24:28.677Z",
        "lastModified": "2023-04-14T11:24:28.677Z",
        "size": 2090,
        "formattedSize": "2.0 KB"
      }
    },
    {
      "id": "get-started__indexx",
      "contents": "\nimport { IcCard } from \"@ukic/react\";\n\n## Design System and UI Kit\n\n- [Accessibility guidance](/accessibility) to design, build and test apps and services that work for everyone.\n- [Style tokens](/styles) to create consistent experiences.\n- [Component guidance](/components) to implement accessible, usable and consistent user interfaces (UI).\n- [Patterns](/patterns) to help users with intuitive experiences for common user tasks.\n\n### For developers\n\n<IcCard\n  heading=\"Install the UI Kit components\"\n  message=\"Install and use the UI Kit component library. Use React or web components to quickly build accessible interfaces.\"\n  href=\"get-started/install-components\"\n  clickable\n  fullWidth\n/>\n\n### For designers\n\n<IcCard\n  heading=\"Figma UI Kit\"\n  message=\"Reusable and flexible Figma components used to design, prototype and hand-off designs for apps and digital products.\"\n  href=\"get-started/figma\"\n  clickable\n  fullWidth\n/>\n\n## Contribute\n\nWe are expanding the UI Kit. You can check out the [roadmap](/community/roadmap) for what's coming. If you would like to help please [read more on how to contribute](/community).\n\n## Using v1.0 component library\n\nYou can still use v1.0 (link available for internal users only). Support will be limited and the library deprecated in the future.\n",
      "path": "/get-started",
      "navPriority": 0,
      "date": "2022-11-15",
      "title": "Get started",
      "subTitle": "Use the Design System and UI Kit to create accessible, usable and consistent apps and services for the United Kingdom Intelligence Community.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/get-started/index.mdx",
      "meta": {
        "relativePath": "get-started/index.mdx",
        "createdAt": "2023-04-14T11:24:28.677Z",
        "lastModified": "2023-04-14T11:24:28.677Z",
        "size": 1645,
        "formattedSize": "1.6 KB"
      }
    },
    {
      "id": "get-started__install-componentsx",
      "contents": "\n## Installing the components\n\nThe UI Kit components are available on [npmjs.com](https://www.npmjs.com/), and can be installed from the command line.\n\n```shell\n// Web components, Angular, Vue, Svelte\nnpm install @ukic/web-components @ukic/fonts\n\n// React\nnpm install @ukic/react @ukic/fonts\n```\n\n## Using the components\n\nWeb components can be used without the need for a framework. To use web components without a framework, follow the [web components instructions](/get-started/install-components/web-components).\n\nTo use the components in a particular framework, follow the framework instructions.\n\n- [React](/get-started/install-components/react)\n- [Angular](/get-started/install-components/angular)\n- [Vue](/get-started/install-components/vue)\n- [Svelte](/get-started/install-components/svelte)\n\nCustom Elements Everywhere has [more information on how web components work with other frameworks](https://custom-elements-everywhere.com).\n",
      "path": "/get-started/install-components",
      "navPriority": 1,
      "date": "2022-11-15",
      "title": "Get the components",
      "subTitle": "Install and use the UI Kit component library. Use React or web components to quickly build accessible interfaces.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/get-started/install-components.mdx",
      "meta": {
        "relativePath": "get-started/install-components.mdx",
        "createdAt": "2023-04-14T11:24:28.677Z",
        "lastModified": "2023-04-14T11:24:28.677Z",
        "size": 1304,
        "formattedSize": "1.3 KB"
      }
    },
    {
      "id": "get-started__reactx",
      "contents": "\n## Step one\n\nIn the root of your project:\n\n```shell\n// using npm\nnpm install @ukic/react @ukic/fonts\n\n// using yarn\nrm package-lock.json\nyarn add @ukic/react @ukic/fonts\n```\n\n## Step two\n\nImport the component(s) in your React files.\n\n```jsx\nimport { IcComponent } from \"@ukic/react\";\n```\n\n## Step three\n\nTo get the correct styling with the ICDS components, import the core CSS file.\n\nAdd the following into the top level CSS file for your project.\n\n```css\n@import \"@ukic/fonts/dist/fonts.css\";\n@import \"@ukic/react/dist/core/core.css\";\n```\n\n<br />\n\nIn order to be rendered consistently across browsers and in line with modern standards, each of the ICDS components uses styles from a global CSS file based on [Normalize.css](https://necolas.github.io/normalize.css/).\n\nIf you would like to import these styles to apply them to the rest of your project and slotted elements used within any of the ICDS components, add the following into the top level CSS file as well.\n\n```css\n@import \"@ukic/react/dist/core/normalize.css\";\n```\n\n## Using NextJS\n\nThe `@ukic/react` package will need to be transpiled for use with NextJS. The steps required will depend on the version of NextJS you are using.\n\n### NextJS 13\n\nSet the following in the `next.config.js` file.\n\n```jsx\nconst nextConfig = {\n  //other configuration\n  transpilePackages: [\"@ukic/react\"],\n};\n\nmodule.exports = nextConfig;\n```\n\n### NextJS 12 and earlier\n\n#### Step one\n\nInstall the `next-transpile-modules` package in the root of your project.\n\n```shell\n// using npm\nnpm install next-transpile-modules\n\n// using yarn\nyarn add next-transpile-modules\n```\n\n#### Step two\n\nSet the following in the `next.config.js` file.\n\n```jsx\nconst nextConfig = {\n  //other configuration\n};\n\nconst withTM = require(\"next-transpile-modules\")([\"@ukic/react\"]);\nmodule.exports = withTM(nextConfig);\n```\n\n## Testing with Jest\n\nThe `@ukic/react` package will need to be transformed before you can use these components in Jest tests.\n\nAdd a `transformIgnorePatterns` field with the value `[\"/node_modules/(?!@ukic/react)\"]` to your Jest config.\n\n## Working with slotted SVGs\n\n### Step one\n\nTo slot an SVG into one of our React components, import the `SlottedSVG` component from `@ukic/react` into your React files. This will prevent an error stating that property 'slot' doesn't exist.\n\nTo scale the icons, use the [`viewBox` attribute](https://css-tricks.com/scale-svg/#aa-the-viewbox-attribute).\n\n```jsx\nimport { SlottedSVG } from \"@ukic/react\";\n```\n\n### Step two\n\nReplace any instances of `<svg>` with `<SlottedSVG>`.\n\n```jsx\n//Before\n<IcTopNavigation appTitle=\"App title\">\n  <svg slot=\"app-icon\" path={path} />\n  <svg slot=\"app-icon\">\n    <path d=\"...\" />\n  </svg>\n</IcTopNavigation>\n\n//After\n<IcTopNavigation appTitle=\"App title\">\n  {/* Can be implemented either way */}\n  <SlottedSVG slot=\"app-icon\" path={path} viewBox=\"0 0 24 24\" />\n  <SlottedSVG slot=\"app-icon\" viewBox=\"0 0 24 24\">\n    <path d=\"...\" />\n\n  </SlottedSVG>\n</IcTopNavigation>\n```\n\n### Using Material Design Icons (MDI) with SlottedSVG\n\nTo use `<SlottedSVG>` with MDI Icons, install and import the `@mdi/js` package.\n\n```bash\nnpm i @mdi/js\n```\n\n```jsx\nimport { mdiHome } from \"@mdi/js\";\n\n<IcTopNavigation appTitle=\"App title\">\n  <SlottedSVG slot=\"app-icon\" path={mdiHome} viewBox=\"0 0 24 24\" />\n</IcTopNavigation>;\n```\n",
      "path": "/get-started/install-components/react",
      "navPriority": 2,
      "date": "2023-01-13",
      "title": "React",
      "subTitle": "How to use the components in a React-based framework.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/get-started/react.mdx",
      "meta": {
        "relativePath": "get-started/react.mdx",
        "createdAt": "2023-04-14T11:24:28.677Z",
        "lastModified": "2023-04-14T11:24:28.677Z",
        "size": 3606,
        "formattedSize": "3.5 KB"
      }
    },
    {
      "id": "get-started__releases-versioningx",
      "contents": "\n## How we release and version\n\nThis page provides details on how the `@ukic/` packages will be released and versioned when published for open source.\n\nReleases will be triggered once the `develop` branch pull request is merged into the `main` branch. The package versions will follow the [semantic versioning](https://semver.org/) scheme.\n\n```js\nmajor.minor.patch;\n```\n\n<br />\n\n**Major releases** will contain breaking changes to the component libraries. Breaking changes will be communicated to the community as early as possible to allow teams to plan when to integrate the new packages into their projects. Major releases will be very infrequent with at least a year between them.\n\n**Minor releases** will contain new component features. Minor releases will be backwards-compatible with no requirement for the developer to make updates to their existing implementation. However, to use the new feature, the implementation will require a small update (such as adding a new prop) in order to use the new component API.\n\n**Patch releases** will contain bug fixes.\n\nMinor and/or patch releases will be scheduled after every two weeks. All changes to the component library will be recorded in the [CHANGELOG](https://github.com/mi6/ic-ui-kit/blob/main/CHANGELOG.md).\n\nAll packages will be published with identical version numbers.\n\n## Supporting versions\n\nAs the component library matures and new versions arrive, the ICDS team will actively maintain and support the previous version for up to 6 months. This is to allow the team to provide as much resource as possible on the current version. Any support for the legacy versions will only include security updates and bug fixes. No new features will be added.\n",
      "path": "/get-started/releases-versions",
      "date": "2022-11-21",
      "title": "Releases and versions",
      "subTitle": "Our approach to releases and versioning.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/get-started/releases-versioning.mdx",
      "meta": {
        "relativePath": "get-started/releases-versioning.mdx",
        "createdAt": "2023-04-14T11:24:28.677Z",
        "lastModified": "2023-04-14T11:24:28.677Z",
        "size": 1987,
        "formattedSize": "1.9 KB"
      }
    },
    {
      "id": "get-started__sveltex",
      "contents": "\nThese instructions were used with Svelte version 3.50.1.\n\n## Step one\n\nIn the root of your project:\n\n```shell\n// using npm\nnpm install @ukic/web-components @ukic/fonts\n\n// using yarn\nrm package-lock.json\nyarn add @ukic/web-components @ukic/fonts\n```\n\n## Step two\n\nImport defineCustomElements in your `main.ts` file.\n\n```jsx\nimport { defineCustomElements } from \"@ukic/web-components/loader\";\n```\n\n## Step three\n\nCall defineCustomElements in your `main.ts` file:\n\n```jsx\n//other configuration\n...\ndefineCustomElements();\n```\n\n## Step four\n\nIn your HTML, you can now declare a component as follows:\n\n```html\n<ic-status-tag label=\"Neutral\"></ic-status-tag>\n```\n\n## Step five\n\nTo get the correct styling with the ICDS components, import the core CSS file.\n\nAdd the following into the top level CSS file for your project. For newly generated Svelte projects this will be `src/global.css`.\n\n```css\n@import \"@ukic/fonts/dist/fonts.css\";\n@import \"@ukic/web-components/dist/core/core.css\";\n```\n\n<br />\n\nIn order to be rendered consistently across browsers and in line with modern standards, each of the ICDS components uses styles from a global CSS file based on [Normalize.css](https://necolas.github.io/normalize.css/).\n\nIf you would like to import these styles to apply them to the rest of your project and slotted elements used within any of the ICDS components, add the following into the top level CSS file as well.\n\n```css\n@import \"@ukic/web-components/dist/core/normalize.css\";\n```\n",
      "path": "/get-started/install-components/svelte",
      "navPriority": 6,
      "date": "2022-11-15",
      "title": "Svelte",
      "subTitle": "To use the components follow the relevant framework instructions.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/get-started/svelte.mdx",
      "meta": {
        "relativePath": "get-started/svelte.mdx",
        "createdAt": "2023-04-14T11:24:28.677Z",
        "lastModified": "2023-04-14T11:24:28.677Z",
        "size": 1780,
        "formattedSize": "1.7 KB"
      }
    },
    {
      "id": "get-started__test-componentsx",
      "contents": "\n## How we've built the components\n\nTypically, components sit in the DOM, also known as the ['light DOM'](https://www.codecademy.com/resources/blog/what-is-dom/). DOM stands for 'Document Object Model'. The light DOM represents the structure of a webpage as a tree, where each DOM object is a node.\n\nAt the core, the UI Kit components are based off the web components specification which utilises the shadow DOM. This makes it possible to encapsulate each component’s markup structure, styling and functionality.\n\nAccording to [Mozilla](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM), the \"shadow DOM allows hidden DOM trees to be attached to elements in the regular DOM tree — this shadow DOM tree starts with a shadow root, underneath which you can attach any element, in the same way as the normal DOM.\"\n\nTherefore, testing components within the shadow DOM can be problematic because elements inside a shadow root technically do not exist in the main DOM, and can prevent testing frameworks from selecting internal elements.\n\n## Testing the components\n\nTo ease the process of testing, here are guides to testing our UI Kit components in different testing frameworks.\n\n- [Jest](/get-started/test-components/testing-with-jest)\n- [React Testing Library](/get-started/test-components/testing-with-react-testing-library)\n- [Cypress](/get-started/test-components/testing-with-cypress)\n",
      "path": "/get-started/test-components",
      "navPriority": 2,
      "date": "2023-02-16",
      "title": "Testing the components",
      "subTitle": "Test the UI Kit components within the shadow DOM using a testing framework.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/get-started/test-components.mdx",
      "meta": {
        "relativePath": "get-started/test-components.mdx",
        "createdAt": "2023-04-14T11:24:28.677Z",
        "lastModified": "2023-04-14T11:24:28.677Z",
        "size": 1740,
        "formattedSize": "1.7 KB"
      }
    },
    {
      "id": "get-started__testing-with-cypressx",
      "contents": "\n## About Cypress\n\n[Cypress](https://www.cypress.io/) is a developer-friendly, Javascript-based front-end testing tool. It comes bundled with popular libraries like Mocha and Chai, allowing for swift adoption. Advantages include snapshots at the time of test execution, implicit wait commands, multiple browsers in which to test and real-time command execution with visual feedback.\n\nCypress allows for end-to-end testing, replicating how \"users interact with your app by using a real browser\", and component testing, also known as unit testing, which tests a component's functionality, styling & appearance in isolation.\n\n## Cypress and the Shadow DOM\n\nCypress gives two ways in which to test `@ukic` components in the [shadow DOM](https://design.sis.gov.uk/get-started/install-components/testing-with-jest#what-is-the-shadow-dom).\n\n### Configuring at test level\n\nAdd `includeShadowDom: true` to the `cy.get` query.\n\n```js\n// cypress/e2e/test.cy.js\nit(\"has an app bar with title link\", () => {\n  cy.get(\"ic-top-navigation\", { includeShadowDom: true })\n    .shadow()\n    .find(\".title-link\")\n    .should(\"have.attr\", \"href\", \"/\")\n    .should(\"have.text\", \"My App Title\");\n});\n```\n\nThis allows traversing the shadow DOM by chaining the `.shadow()` method.\n\n### Configuring at global level\n\nAdd `includeShadowDom: true` to the `cypress.config.js`.\n\n```js\n// cypress.config.js\nconst { defineConfig } = require(\"cypress\");\n\nmodule.exports = defineConfig({\n  includeShadowDom: true,\n  component: {\n    devServer: {\n      framework: \"create-react-app\",\n      bundler: \"webpack\",\n    },\n  },\n});\n```\n\nThis allows traversing the shadow DOM using assertions without having to explicitly chain the `.shadow()` method.\n\n## Example: Component testing\n\nBelow are examples of component tests on the `@ukic/react` components `IcTextfield` and `IcButton`. Component tests are normally located adjacent to the component they are testing and are rendered on a development server.\n\n```tsx\n// Textfield.tsx\nimport { IcTextField, IcButton } from \"@ukic/react\";\nimport React, { useState } from \"react\";\n\nfunction Textfield() {\n  const [favouriteCoffee, setFavouriteCoffee] = useState<String>(\"\");\n\n  const handleChange = (event) => {\n    event.preventDefault();\n    setFavouriteCoffee(event.detail.value);\n  };\n\n  const handleClick = () => {\n    console.log(\"This is the best coffee going:\", favouriteCoffee);\n  };\n\n  return (\n    <form>\n      <IcTextField\n        label=\"What is your favourite coffee?\"\n        placeholder=\"Placeholder\"\n        helperText=\"Such as Arabica, Robusta or Liberica\"\n        onIcChange={(ev) => handleChange(ev)}\n      />\n\n      <IcButton variant=\"primary\" onClick={() => handleClick()}>\n        Send\n      </IcButton>\n    </form>\n  );\n}\n\nexport default Textfield;\n```\n\n```tsx\n// Textfield.cy.tsx\nimport React from \"react\";\nimport Textfield from \"./Textfield.tsx\";\n\ndescribe(\"<Textfield />\", () => {\n  it(\"renders\", () => {\n    cy.mount(<Textfield />).should(\"have.property\", \"component\");\n  });\n  it(\"takes a value in the textfield and prints to console when the button is clicked\", () => {\n    // Render the component\n    cy.mount(<Textfield />);\n    // Capture the log to check later\n    cy.stub(window.console, \"log\").as(\"consoleLog\");\n\n    // Check the IcComponents have finished rendering\n    cy.get(\"ic-text-field\").should(\"have.class\", \"hydrated\");\n    cy.get(\"ic-button\").should(\"have.class\", \"hydrated\");\n\n    // Interact with the components and provide assertions\n    cy.get(\"#ic-text-field-input-1\").type(\"Black\");\n    cy.get(\"ic-button\").click();\n    cy.get(\"@consoleLog\").should(\n      \"be.calledWith\",\n      \"This is the best coffee going:\",\n      \"Black\"\n    );\n  });\n});\n```\n\n## Example: End-to-end testing\n\nBelow is an additional example for end-to-end tests on the same component. End-to-end tests normally live within the Cypress test directory and are rendered as a complete site with live interaction.\n\n```jsx\n// cypress/e2e/App.cy.js\ndescribe(\"Textfield\", () => {\n  beforeEach(() => {\n    cy.visit(\"http://localhost:3000/\", {\n      onBeforeLoad(window) {\n        // Capture the log to check later\n        cy.stub(window.console, \"log\").as(\"consoleLog\");\n      },\n    });\n  });\n\n  it(\"should have visited the correect URL\", () => {\n    // Check that your App server is running\n    cy.url().should(\"eq\", \"http://localhost:3000/\");\n  });\n\n  it(\"should check the label on the IcTextfield\", () => {\n    // Checks the component has rendered fully\n    cy.get(\"ic-text-field\").should(\"have.class\", \"hydrated\");\n    cy.get(\"ic-button\").should(\"have.class\", \"hydrated\");\n    cy.get(\"ic-text-field\").should(\n      \"have.html\",\n      '<input type=\"hidden\" class=\"ic-input\" name=\"ic-text-field-input-0\" value=\"\">'\n    );\n\n    // Interact with the components\n    cy.get(\"#ic-text-field-input-0\").type(\"Frappucino\");\n    cy.get(\"ic-button\").click();\n    cy.get(\"@consoleLog\").should(\n      \"be.calledWith\",\n      \"This is the best coffee going:\",\n      \"Frappucino\"\n    );\n  });\n});\n```\n",
      "path": "/get-started/test-components/testing-with-cypress",
      "date": "2023-02-22",
      "title": "Testing with Cypress",
      "subTitle": "How to test our components with Cypress.",
      "navPriority": 4,
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/get-started/testing-with-cypress.mdx",
      "meta": {
        "relativePath": "get-started/testing-with-cypress.mdx",
        "createdAt": "2023-04-14T11:24:28.677Z",
        "lastModified": "2023-04-14T11:24:28.677Z",
        "size": 5314,
        "formattedSize": "5.2 KB"
      }
    },
    {
      "id": "get-started__testing-with-jestx",
      "contents": "\n## About Jest\n\n[Jest](https://jestjs.io/) is a JavaScript testing framework designed to ensure correctness of any JavaScript codebase. It allows you to write tests with an approachable, familiar and feature-rich API that gives you results quickly.\n\nThese instructions have been written with JavaScript in mind. Jest also supports TypeScript. Further instructions on how to set up Jest for TypeScript can be found on their ['Getting Started'](https://jestjs.io/docs/getting-started#using-typescript) page.\n\n## Installing Jest\n\n### Step one\n\nInstall Jest with `npm` or `yarn`.\n\n```shell\nnpm install --save-dev jest\n\nyarn add --dev jest\n```\n\n### Step two\n\nCreate a test file using the extension: `.test.js` and add some tests.\n\n### Step three\n\nAdd the following section to your package.json:\n\n```shell\n{\n  \"scripts\": {\n    \"test\": \"jest\"\n  }\n}\n```\n\n### Step four\n\nFinally, run your tests using `npm test` or `yarn test`.\n\nMore information on setting up Jest can be found on [Jest’s Getting Started page](https://jestjs.io/docs/getting-started).\n\n## Testing shadow components\n\nIn the DOM, elements can be found using `document.querySelector`. Shadow components can be found in a similar way using the `shadowRoot` prefix. The shadow root is the root node of the shadow DOM tree.\n\nNote: components that have been slotted in can be found in the 'light' DOM. They are not a part of their parent component's shadow DOM.\n\n### Example\n\n```js\n// Find all navigation items in a top nav\ndocument\n  .querySelector(\"ic-top-navigation\")\n  .querySelectorAll(\"ic-navigation-item\");\n\n// Find the text content of the first navigation item in a top nav\ndocument\n  .querySelector(\"ic-top-navigation > ic-navigation-item:first-child\")\n  .shadowRoot.querySelector(\"ic-tooltip > a > ic-typography\").textContent;\n\n// Find the search button for the search bar in the top nav (nested shadow DOM)\ndocument\n  .querySelector(\"ic-top-navigation > ic-search-bar\")\n  .shadowRoot.querySelector(\"ic-button#search-submit-button\")\n  .shadowRoot.querySelector(\"#ic-button-with-tooltip-search-submit-button\");\n```\n\n## Example test\n\nBelow is an example of a React component that uses the `IcTopNavigation` component. The labels for the navigation items are being mapped to the `IcNavigationItem` component.\n\n```js\n// topNav.js\nimport React from \"react\";\nimport { IcTopNavigation, IcNavigationItem, IcSearchBar } from \"@ukic/react\";\n\nexport const topNav = () => {\n  const navItemLabels = [\"About\", \"Drinks\", \"Recipes\", \"Blog\"];\n\n  const navItems = navItemsLabels.map((navItemLabel, index) => (\n    <IcNavigationItem\n      key={index}\n      label={navItemLabel}\n      href={`/${navItemLabel}`}\n      slot=\"navigation\"\n    />\n  ));\n\n  return (\n    <IcTopNavigation\n      appTitle=\"Wake me up before you cocoa\"\n      status=\"alpha\"\n      version=\"v0.0.7\"\n    >\n      <IcSearchBar slot=\"search\" placeholder=\"Search\" label=\"Search\" />\n      {navItems}\n    </IcTopNavigation>\n  );\n};\n```\n\nWe are now going to test that the labels are being mapped correctly using the Arrange-Act-Assert pattern.\n\nJest has a range of [matchers](https://jestjs.io/docs/expect) to choose from for your test assertions. Below, we make use of the `.toMatch` matcher for our test assertion.\n\n```js\n// topNav.test.js\ndescribe(\"top navigation\", () => {\n  it(\"renders navigation items correctly\", async () => {\n    // Arrange\n    const navItemsLabels = [\"About\", \"Drinks\", \"Recipes\", \"Blog\"];\n\n    // Act\n    const navItems = Array.from(\n      document.querySelectorAll(\"ic-top-navigation ic-navigation-item\")\n    ).map((i) => i.shadowRoot.querySelector(\".ic-tooltip\").textContent);\n\n    // Assert\n    navItems.forEach((navItem, i) => {\n      expect(navItem).toMatch(navItemsLabels[i]);\n    });\n  });\n});\n```\n",
      "path": "/get-started/test-components/testing-with-jest",
      "date": "2023-02-16",
      "title": "Testing with Jest",
      "subTitle": "How to test our components with Jest.",
      "navPriority": 2,
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/get-started/testing-with-jest.mdx",
      "meta": {
        "relativePath": "get-started/testing-with-jest.mdx",
        "createdAt": "2023-04-14T11:24:28.677Z",
        "lastModified": "2023-04-14T11:24:28.677Z",
        "size": 4038,
        "formattedSize": "3.9 KB"
      }
    },
    {
      "id": "get-started__testing-with-react-testing-libraryx",
      "contents": "\n## About React Testing Library\n\n[React Testing Library (RTL)](https://testing-library.com/docs/react-testing-library/intro) provides a set of utility functions which interrogate the DOM tree in order to build maintainable React tests. The recommended approach with React Testing Library is to test React components based on how the users view the components rather than the implementation of the component. For example, a user would view a button by the label 'Add', so the library provides a method called `getByText()` to facilitate that.\n\n## Shadow DOM Testing Library\n\nIt is not possible to exclusively use RTL to test `@ukic/react` components, as they are React-wrapped web components which use the [shadow DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM) (`<ShadowRoot>`). RTL does not provide utility functions which traverse beyond the shadow DOM.\nWith the addition of [Shadow DOM Testing Library](https://github.com/KonnorRogers/shadow-dom-testing-library), elements within the shadow DOM can be selected and then interacted with by using methods provided by RTL. Shadow DOM Testing Library provides functions with 'Shadow' prefixed to the query type (e.g. `getByShadowText()`).\n\n```tsx\n// DOM tree for IcAlert.\n<ic-alert class=\"dark hydrated\" message=\"Foo\" role=\"alert\">\n  <ShadowRoot>\n    ...\n    <ic-typography class=\"ic-typography-body hydrated\">\n      <ShadowRoot>\n        <slot />\n      </ShadowRoot>\n      Foo\n    </ic-typography>\n    ...\n  </ShadowRoot>\n</ic-alert>\n```\n\n```tsx\nimport { IcAlert } from \"@ukic/react\";\nimport { render, waitFor } from \"@testing-library/react\";\nimport { screen } from \"shadow-dom-testing-library\";\n\nit(\"renders IcAlert\", async () => {\n  const { getByRole /* container */ } = render(<IcAlert message=\"Foo\" />);\n\n  // Wait for IcAlert to hydrate before continuing to view the full IcAlert DOM tree.\n  await waitFor(() => {\n    expect(getByRole(\"alert\")).toHaveClass(\"hydrated\");\n\n    // 'container' can also be used with querySelector to select ic-alert.\n    // expect(container.querySelector('ic-alert')).toHaveClass('hydrated');\n  });\n\n  expect(await screen.findByShadowText(\"Foo\")).toBeInTheDocument();\n});\n```\n\n## Examples with IcSelect and IcTextField\n\nBelow are additional examples on testing `@ukic/react` components using RTL and Shadow DOM Testing Library with `IcSelect` and `IcTextField`.\n\n### IcSelect\n\n```jsx\n// Select.tsx\nimport { useState } from \"react\";\nimport { IcSelect } from \"@ukic/react\";\nimport { IcMenuOption } from \"@ukic/web-components\";\n\ninterface IcMenuOptions {\n  options: IcMenuOption[];\n}\n\nconst Select = ({ options }: IcMenuOptions) => {\n  const [selectedValue, setSelectedValue] =\n    (useState < string) | (undefined > undefined);\n  return (\n    <IcSelect\n      label=\"Title\"\n      onIcChange={(e) => setSelectedValue(e.detail.value)}\n      options={options}\n      value={selectedValue}\n    />\n  );\n};\n\nexport default Select;\n```\n\n```jsx\n// Select.test.tsx\nimport { fireEvent, render, waitFor } from '@testing-library/react';\nimport { screen } from 'shadow-dom-testing-library';\nimport Select from '../components/Select';\nimport userEvent from '@testing-library/user-event';\n\nconst options = [\n    { label: 'Americano', value: 'americano' }\n    { label: 'Espresso', value: 'espresso' },\n]\n\ndescribe('IcSelect', () => {\n    it('renders', async () => {\n        const { container } = render(<Select options={options} />);\n        // Using 'container' to query the render and select 'ic-select'.\n        const select = container.querySelector('ic-select');\n\n        // Make sure component is hydrated before moving to the next action.\n        await waitFor(() => {\n            expect(select).toHaveClass('hydrated');\n        });\n\n        /**\n         * 'Shallow' sets the selector to go one <ShadowRoot> level deep.\n         * There are multiple instances where 'Title' is selected due to aria properties\n         * so one level deep is enough to select the label.\n         */\n        expect(screen.getByShadowLabelText('Title', { shallow: true })).toBeInTheDocument();\n    })\n\n    it(\"should render the correct number of options in the menu\", async () => {\n        const { container } = render(<Select options={options} />);\n        const select = container.querySelector('ic-select');\n\n        await waitFor(() => {\n            expect(select).toHaveClass('hydrated');\n        });\n\n        const allOptions = await screen.findAllByShadowRole('option');\n\n        expect(await (allOptions).length).toBe(2);\n    });\n\n    it('should change select value using userEvent', async () => {\n        // Using testing-library/user-events to select an option from ic-select.\n        const user = userEvent.setup();\n        const { container } = render(<Select options={options} />);\n        const select = container.querySelector('ic-select') as HTMLIcSelectElement;\n\n        await waitFor(() => {\n            expect(select).toHaveClass('hydrated');\n        });\n\n        // ic-select uses a button element to trigger the dropdown so using the button role as the selector.\n        const btn = await screen.findByShadowRole('button');\n        await user.click(btn);\n\n        // Selecting 'Espresso' from the option list.\n        const espressoOption = await screen.getByShadowLabelText('Espresso');\n        await user.click(espressoOption);\n\n        expect(select).toHaveValue('espresso');\n    })\n\n    it('should change select value using fireEvent', async () => {\n        const { container } = render(<Select options={options} />);\n        const select = container.querySelector('ic-select') as HTMLIcSelectElement;\n\n        await waitFor(() => {\n            expect(select).toHaveClass('hydrated');\n        });\n\n        // Invoking icChange method to select an item from the option list.\n        fireEvent(select, new CustomEvent('icChange', { detail: { value: 'americano' }}));\n\n        expect(select).toHaveValue('americano');\n    });\n})\n\n```\n\n### IcTextField\n\n```jsx\n// TextField.tsx\nimport { IcTextField } from \"@ukic/react\";\nimport { useState } from \"react\";\n\ninterface NameProps {\n  name: string;\n}\n\nconst TextField = ({ name }: NameProps) => {\n  const [value, setTextFieldValue] = useState < string > \"\";\n\n  const handleInput = (event: CustomEvent) => {\n    setTextFieldValue(event?.detail?.value);\n  };\n\n  return <IcTextField label={name} onIcInput={handleInput} value={value} />;\n};\n\nexport default TextField;\n```\n\n```jsx\n// TextField.test.tsx\nimport { render, waitFor } from '@testing-library/react';\nimport { screen } from 'shadow-dom-testing-library';\nimport TextField from '../components/TextField';\nimport userEvent from '@testing-library/user-event';\n\ndescribe('IcTextField', () => {\n    it('should change textField value while typing', async () => {\n        const user = userEvent.setup();\n        const { container } = render(<TextField name='Foo' />);\n        const textField = container.querySelector('ic-text-field') as HTMLIcTextFieldElement;\n\n        await waitFor(() => {\n            expect(textField).toHaveClass('hydrated');\n        });\n\n        const input = await findByShadowLabelText(textField, 'Foo');\n\n        // Using the userEvent 'type' method to input a value into IcTextField.\n        await user.type(input, 'Bar');\n\n        expect(textField).toHaveValue('Bar');\n    });\n})\n```\n",
      "path": "/get-started/test-components/testing-with-react-testing-library",
      "date": "2023-02-16",
      "title": "Testing with React Testing Library",
      "subTitle": "How to test components with React Testing Library.",
      "navPriority": 3,
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/get-started/testing-with-react-testing-library.mdx",
      "meta": {
        "relativePath": "get-started/testing-with-react-testing-library.mdx",
        "createdAt": "2023-04-14T11:24:28.681Z",
        "lastModified": "2023-04-14T11:24:28.681Z",
        "size": 7674,
        "formattedSize": "7.5 KB"
      }
    },
    {
      "id": "get-started__vuex",
      "contents": "\nThese instructions were used with Vue version 3.2.31.\n\n## Step one\n\nIn the root of your project:\n\n```shell\n// using npm\nnpm install @ukic/web-components @ukic/fonts\n\n// using yarn\nrm package-lock.json\nyarn add @ukic/web-components @ukic/fonts\n```\n\n## Step two\n\nAdd options into your relevant config.\n\n### In-Browser config\n\n```jsx\n// Only works if using in-browser compilation.\napp.config.compilerOptions.isCustomElement = (tag) => tag.includes(\"-\");\n```\n\n### Vite config\n\n```jsx\n// vite.config.js\nimport vue from \"@vitejs/plugin-vue\";\n\nexport default {\n  plugins: [\n    vue({\n      template: {\n        compilerOptions: {\n          // treat all tags with a dash as custom elements\n          isCustomElement: (tag) => tag.includes(\"-\"),\n        },\n      },\n    }),\n  ],\n};\n```\n\n### Vue CLI config\n\n```jsx\n// vue.config.js\nmodule.exports = {\n  chainWebpack: (config) => {\n    config.module\n      .rule(\"vue\")\n      .use(\"vue-loader\")\n      .tap((options) => ({\n        ...options,\n        compilerOptions: {\n          // treat any tag that starts with ic- as custom elements\n          isCustomElement: (tag) => tag.startsWith(\"ic-\"),\n        },\n      }));\n  },\n};\n```\n\n## Step three\n\nImport defineCustomElements in your `main.js` file.\n\n```jsx\nimport { defineCustomElements } from \"@ukic/web-components/loader\";\n```\n\n## Step four\n\nCall defineCustomElements at the bottom of `main.js`.\n\n```jsx\n//other configuration\n...\ndefineCustomElements();\n```\n\n## Step five\n\nDeclare and use components in your file.\n\n```html\n<ic-status-tag label=\"Neutral\"></ic-status-tag>\n```\n\n## Step six\n\nTo get the correct styling with the ICDS components, import the core CSS file.\n\nAdd the following into the top level CSS file for your project.\n\n```css\n@import \"@ukic/fonts/dist/fonts.css\";\n@import \"@ukic/web-components/dist/core/core.css\";\n```\n\n<br />\n\nIn order to be rendered consistently across browsers and in line with modern standards, each of the ICDS components uses styles from a global CSS file based on [Normalize.css](https://necolas.github.io/normalize.css/).\n\nIf you would like to import these styles to apply them to the rest of your project and slotted elements used within any of the ICDS components, add the following into the top level CSS file as well.\n\n```css\n@import \"@ukic/web-components/dist/core/normalize.css\";\n```\n",
      "path": "/get-started/install-components/vue",
      "navPriority": 4,
      "date": "2022-11-15",
      "title": "Vue",
      "subTitle": "To use the components follow the relevant framework instructions.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/get-started/vue.mdx",
      "meta": {
        "relativePath": "get-started/vue.mdx",
        "createdAt": "2023-04-14T11:24:28.681Z",
        "lastModified": "2023-04-14T11:24:28.681Z",
        "size": 2607,
        "formattedSize": "2.5 KB"
      }
    },
    {
      "id": "get-started__web-componentsx",
      "contents": "\n## Step one\n\nIn the root of your project:\n\n```shell\n// using npm\nnpm install @ukic/web-components @ukic/fonts\n\n// using yarn\nrm package-lock.json\nyarn add @ukic/web-components @ukic/fonts\n```\n\n## Step two\n\nImport `defineCustomElements` in your file. Where you do this will depend on your framework or build tool, but the format is as follows:\n\n```jsx\nimport { defineCustomElements } from \"@ukic/web-components/loader\";\n```\n\n## Step three\n\nCall `defineCustomElements` in your file. Again, the file you edit will depend on your framework or build tool, but the format is as follows:\n\n```jsx\n//other code\n...\ndefineCustomElements();\n```\n\n## Step four\n\nIn your HTML, you can now declare a component as follows:\n\n```jsx\n<ic-status-tag label=\"Neutral\"></ic-status-tag>\n```\n\n## Step five\n\nTo get the correct styling with the ICDS components, import the core CSS file. Depending on your framework or build tool, this can be included in either a CSS file or Javascript\\Typescript file.\n\nAdd the following into the top level CSS file for your project.\n\n```css\n@import \"@ukic/fonts/dist/fonts.css\";\n@import \"@ukic/web-components/dist/core/core.css\";\n```\n\n<br />\n\nIn order to be rendered consistently across browsers and in line with modern standards, each of the ICDS components uses styles from a global CSS file based on [Normalize.css](https://necolas.github.io/normalize.css/).\n\nIf you would like to import these styles to apply them to the rest of your project and slotted elements used within any of the ICDS components, add the following into the top level CSS file as well.\n\n```css\n@import \"@ukic/web-components/dist/core/normalize.css\";\n```\n\n## Webpack example\n\nWebpack is a tool for bundling web applications. This example assumes the following config in `webpack.config.js`. For more detailed information on Webpack configuration, please refer to the Webpack documentation.\n\n```jsx\nconst path = require(\"path\");\n\nmodule.exports = {\n  entry: \"./src/index.js\",\n  output: {\n    filename: \"main.js\",\n    path: path.resolve(__dirname, \"dist\"),\n  },\n  devServer: {\n    static: \"./dist\",\n  },\n  mode: \"development\",\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        use: [\"style-loader\", \"css-loader\"],\n      },\n    ],\n  },\n};\n```\n\n### Step one\n\n```shell\n// using npm\nnpm install @ukic/web-components @ukic/fonts\n\n// using yarn\nrm package-lock.json\nyarn add @ukic/web-components @ukic/fonts\n\n```\n\n### Step two\n\nIn the file defined as the `entry` in the `webpack.config.js`, add the following:\n\n```jsx\n//src/index.js\nimport \"@ukic/fonts/dist/fonts.css\";\nimport \"@ukic/web-components/dist/core/core.css\";\n\nimport { defineCustomElements } from \"@ukic/web-components/loader\";\ndefineCustomElements();\n```\n\n### Step three\n\nYou can now use any of the ICDS components so long as your HTML page includes the output file defined in your `webpack.config.js`. For example, including an [ic-status-tag](/components/status-tags) below:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Getting Started with ICDS</title>\n  </head>\n  <body>\n    <script src=\"dist/main.js\"></script>\n    <ic-status-tag label=\"Neutral\"></ic-status-tag>\n  </body>\n</html>\n```\n",
      "path": "/get-started/install-components/web-components",
      "navPriority": 5,
      "date": "2022-11-15",
      "title": "Web components",
      "subTitle": "To use the components follow the relevant framework instructions.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/get-started/web-components.mdx",
      "meta": {
        "relativePath": "get-started/web-components.mdx",
        "createdAt": "2023-04-14T11:24:28.681Z",
        "lastModified": "2023-04-14T11:24:28.681Z",
        "size": 3503,
        "formattedSize": "3.4 KB"
      }
    },
    {
      "id": "icds__accessibility-statementx",
      "contents": "\n## Our Accessibility Statement\n\nThis accessibility statement applies to the \"Intelligence Community Design System\" hosted at design.sis.gov.uk.\n\nThis app is managed by the [Secret Intelligence Service (SIS)](https://sis.gov.uk), which is also known as MI6.\n\nWe want as many people as possible to be able to use this app. That means we’ve built the app so that you can:\n\n- Zoom in up to 400% without the text spilling off the screen.\n- Navigate all of the app using just a keyboard.\n- Navigate all of the app using speech recognition software.\n- Use all of the app with a screen reader (including the most recent versions of JAWS and VoiceOver).\n- Change most colours, contrast levels and fonts (using your browser).\n\nWe've also made the text in the app as simple as possible to understand.\n\n[AbilityNet](https://mcmw.abilitynet.org.uk) has advice on making your device easier to use if you have different needs. Search your intranet or contact your IT Service Desk if you're using an offline system.\n\n## How accessible this app is\n\nWe are confident that this app is accessible.\n\n### Images and diagrams\n\nThe Design System relies on images and diagrams to describe how designs and UI components should look. Some users may find limited value in the 'alt' (or alternative) text that we've been able to provide for these images.\n\nThis is especially true if the alternative text is describing colour or layout.\n\nSome images and diagrams in the Design System purposefully show 'bad' or 'non-accessible' examples of designs or UI components.\n\n## Reporting accessibility problems with this app\n\nWe're always looking to improve the accessibility of the Design System. If you find any problems not listed in this Statement or think we're not meeting your needs or the needs of others, consider contacting us using the details below.\n\n## Enforcement procedure\n\nThe Equality and Human Rights Commission (EHRC) is responsible for enforcing the Public Sector Bodies (Websites and Mobile Applications) (No. 2) Accessibility Regulations 2018 (the 'accessibility regulations').\n\nThe responsible organisation for the Design System is the Secret Intelligence Service (SIS).\n\nIf you aren't satisfied with the accessibility of this app, consider contacting us using the details below.\n\nIf you’re not happy with how we respond to your complaint, contact the [Equality Advisory and Support Service (EASS)](https://www.equalityadvisoryservice.com/).\n\n## Contacting us by phone or visiting us in person\n\nUnfortunately, it can be hard to contact any one of the Intelligence Community organisations (SIS, GCHQ and MI5).\n\nThere are a few ways you can contact us, and we're trying to make it easier. You can contact us using:\n\n- [Raise an issue on GitHub](https://github.com/mi6/ic-design-system/issues).\n- Internal teams can use the service desk if they prefer and we'll add the issue to GitHub.\n- Write to P.O. Box 1300, London SE1 1BD, marking your envelope ‘ICDS Website Accessibility’.\n\nIt isn't possible to visit us in person.\n\n## Technical information about this app's accessibility\n\nSIS is committed to making this app accessible, in accordance with the [Public Sector Bodies (Websites and Mobile Applications) (No. 2) Accessibility Regulations 2018](https://www.legislation.gov.uk/uksi/2018/952/contents/made).\n\n### Compliance status\n\nThis app is fully compliant with the Web Content Accessibility Guidelines version 2.1 AA standard.\n\n### How we tested this app\n\nThis app was last tested on 12 October 2022. The test was carried out by Accessibility Specialists from SIS and [GCHQ](https://gchq.gov.uk).\n\nWe tested all types of pages within the app.\n\nWe tested a random selection of 20% of content pages to check that the app displays them in an accessible way. Each time we do this we will use a different selection.\n\nWe tested:\n\n- Our website at https://design.sis.gov.uk.\n\nYou can read the <a href=\"/icds-accessibility-conformance-report-12-10-22.docx\" target=\"_blank\">full accessibility test report</a>. This report is called an 'Accessibility Conformance Report'. It's created by filling in a 'Voluntary Product Accessibility Template ®' (VPAT). The VPAT tests if the app complies with WCAG 2.1 criteria.\n\n## Non-accessible content\n\nThe content listed below is non-accessible for the following reasons.\n\n### Content that's not within the scope of the accessibility regulations\n\nSome images and diagrams in the Design System purposefully show 'bad' or 'non-accessible' examples of designs or UI components. Because they are core to the service that the Design System is providing, they are exempt from the accessibility regulations.\n\n## Disproportionate burden\n\nWe aren't claiming a disproportionate burden to making any part of the Design System compliant to the accessibility regulations.\n\n## What we're doing to improve accessibility\n\nWe make sure any new features and content added to the Design System are compliant to the accessibility regulations. All new features are tested against WCAG 2.1 Level AA criteria.\n\nWe do this through a combination of manual browser tests, screen reader tests and automated build-time testing.\n\n## Preparation of this accessibility statement\n\nThis statement was prepared on 26 March 2021. It was last updated on 12 October 2022.\n\nThis app was last tested on 12 October 2022. The test was carried out by Accessibility Specialists from SIS and GCHQ.\n\nYou can read the <a href=\"/icds-accessibility-conformance-report-12-10-22.docx\" target=\"_blank\">full accessibility test report</a>.\n",
      "path": "/icds",
      "date": "2022-10-12",
      "title": "Accessibility Statement",
      "subTitle": "Accessibility Statement for the Intelligence Community Design System",
      "meta": {
        "relativePath": "icds/accessibility-statement.mdx",
        "createdAt": "2023-04-14T11:24:28.681Z",
        "lastModified": "2023-04-14T11:24:28.681Z",
        "size": 5672,
        "formattedSize": "5.5 KB"
      }
    },
    {
      "id": "icds__cookies-policyx",
      "contents": "\nimport InlineCookiesManager from \"../../static/components/InlineCookiesManager\";\nimport CookiesData from \"../../static/components/CookiesData\";\n\nexport const cookiesHeaders = [\"Provider\", \"Domain\", \"Description\", \"Cookies\"];\nexport const essentialCookies = [\n  {\n    provider: \"design.sis.gov.uk\",\n    domain: \"design.sis.gov.uk\",\n    desc: \"This cookie records whether or not the cookie notification pop-up has been acknowledged by the user, including whether or not you permit us to use GA.\",\n    cookies: \"ICDSPREF\",\n  },\n  {\n    provider: \"Google Analytics\",\n    domain: \"sis.gov.uk\",\n    desc: \"These cookies are generated from our parent site, sis.gov.uk. These cookies are used to collect essential performance data so that we can review performance of the website, including aspects such as number of visitors and which pages are most popular.\",\n    cookies: \"_ga, _gid, _gcl_au\",\n  },\n  {\n    provider: \"Google Doubleclick\",\n    domain: \"sis.gov.uk\",\n    desc: \"These cookies are used to help us to monitor which digital advertising channels are most effective. By recording which job adverts are generating the most interest, we are able to make better choices about where to advertise.\",\n    cookies: \"APISID, SSID, NID, PREF, drt, SID, SAPISID, id, HSID\",\n  },\n  {\n    provider: \"OneTrust\",\n    domain: \"sis.gov.uk\",\n    desc: \"These cookies are generated from our parent site, sis.gov.uk. These cookies record whether or not the cookie notification pop-up that appears on our parent site has been acknowledged by the user and records whether consent for the cookies have been given.\",\n    cookies: \"OptanonConsent, OptanonAlertBoxClosed\",\n  },\n  {\n    provider: \"Cloudflare\",\n    domain: \"sis.gov.uk\",\n    desc: \"This cookie is generated from our parent site, sis.gov.uk. It helps manage incoming traffic to our parent site and allows for better visibility on the origin of a particular request.\",\n    cookies: \"_cfruid\",\n  },\n];\nexport const optionalCookies = [\n  {\n    provider: \"Google Analytics\",\n    domain: \"design.sis.gov.uk\",\n    desc: \"These cookies are used to collect essential performance data so that we can review performance of the website, including aspects such as number of visitors and which pages are most popular.\",\n    cookies: \"_ga, _gat\",\n  },\n];\n\n## About cookies\n\nA cookie is a file stored on your device that contains an identifier (usually a string of letters and numbers) when you access a website. When you visit the same website again, the cookies stored on your device are accessed by code on the website. This means that the website can recognise the device being used, and provide useful features, such as remembering your preferences or keeping you logged in.\n\nCookies may be either \"persistent\" cookies or \"session\" cookies. A persistent cookie will be stored by a web browser and will remain valid until its set expiry date, unless deleted by the user before the expiry date. A session cookie, on the other hand, will expire at the end of the user session, when the web browser is closed.\n\nCookies that are set by the website owner are called ‘first party cookies’. Cookies that are set by another platform or service are called ‘third party’ cookies, these tend to be used for additional services, such as advertising or analytics.\n\nCookies do not typically contain any information that personally identifies a user, but personal information that we store about you may be linked to the information stored in and obtained from cookies.\n\nWe use cookies on this website to help improve the performance of our digital advertising and to collect basic data about how the website is used so that we can make decisions about how to improve it.\n\n## Summary of cookies used by this website\n\n### Essential cookies\n\nEssential cookies do things like remember the notifications you’ve seen so we don't show them to you again, and to adhere to your cookie preferences. They are always present and help us host the website.\n\n<CookiesData\n  headers={cookiesHeaders}\n  data={essentialCookies}\n  caption=\"Essential Cookies Table\"\n/>\n\n## Manage your cookie preferences\n\n<InlineCookiesManager />\n<br />\n<br />\n\nWe use optional cookies from Google Analytics (GA) to collect data that we use to improve your experience of our website. We do this to help make sure the site is meeting the needs of its users and to help us make improvements.\n\nFor more information, please read [Google's overview of privacy and safeguarding data](https://support.google.com/analytics/answer/6004245), and should you wish, you can [opt-out of Google Analytics cookies](https://tools.google.com/dlpage/gaoptout).\n\n<CookiesData\n  headers={cookiesHeaders}\n  data={optionalCookies}\n  caption=\"Optional Cookies Table\"\n/>\n\n## Limitations and amendments\n\nThis statement only covers the Design System website at design.sis.gov.uk. This statement does not cover third party websites to which we may link. It does not cover the main SIS website.\n\n## Changes to this notice\n\nWe may change this privacy notice. When we make changes to this notice, the 'last updated' date at the bottom of this page will also change. Any changes to this privacy notice will apply to you and your data immediately. If these changes affect how your personal data is processed, SIS will take reasonable steps to make sure you know.\n",
      "path": "/icds/cookies-policy",
      "date": "2022-11-20",
      "title": "Cookies Policy",
      "subTitle": "Cookies Policy for the Intelligence Community Design System",
      "meta": {
        "relativePath": "icds/cookies-policy.mdx",
        "createdAt": "2023-04-14T11:24:28.681Z",
        "lastModified": "2023-04-14T11:24:28.681Z",
        "size": 5477,
        "formattedSize": "5.3 KB"
      }
    },
    {
      "id": "icds__privacy-policyx",
      "contents": "\n## Our Privacy Policy\n\nThe [Intelligence Community Design System](/) brings together experts and users from across [SIS (also known as MI6)](https://sis.gov.uk), [MI5](https://www.mi5.gov.uk), [GCHQ](https://gchq.gov.uk), and a number of partners. We've open-sourced the Design System to give an insight into what we do, and work with experts across a number of topics.\n\nTo do this, we work with contributors who don't work for or with SIS, MI5, GCHQ, or our partners. That means we may need to collect some personal data from them.\n\nThe Design System is run by SIS, MI5 and GCHQ, but SIS is the responsible entity for the website.\n\n[Read SIS's entry in the Data Protection Public Register for accurate contact details](https://ico.org.uk/ESDWebPages/Entry/ZA455227).\n\n## What data we collect on the Design System\n\n### Contributing on GitHub\n\nIf you choose to contribute to the Design System using your GitHub account, you will associate your GitHub identity with us.\n\nWhen you contribute, the data we might therefore collect includes:\n\n- Your name.\n- User profile on GitHub and associated tools and platforms.\n\nIf you choose to submit a 'pull request' (code contribution) to the Design System using your GitHub account, you will be asked to sign our Contributor's License Agreement.\n\nWhere you provide consent, the data we collect includes:\n\n- Your name.\n- Your email address.\n- User profile on GitHub and associated tools and platforms.\n- Your consent to be contacted (or not) for career's opportunities.\n- Your consent to be contacted (or not) regarding a token of gratitude.\n\nFor more information, [please read GitHub's Privacy Statement](https://docs.github.com/en/site-policy/privacy-policies/github-privacy-statement).\n\n## How long we keep your data\n\nWe will only keep your personal data for as long as:\n\n- The law requires us to.\n- We need for the purposes listed above.\n\n## Providers we use\n\nSIS does not store your personal data we collect on our own services. We use data processors who provide us with:\n\n- Software collaboration platforms when you share research, feedback or make a contribution.\n- Web analytics services.\n\nWe take all reasonable steps to make sure your data on these platforms is secure. For more information, read GitHub and Google's privacy statements using the links above.\n\nWe will not:\n\n- Sell or rent your data to third parties.\n- Share your data with third parties for marketing purposes.\n\nWe will share your data if we’re required to do so by law — for example, by court order, or to prevent fraud or other crime.\n\n## Questions and complaints\n\nSIS, along with MI5 and GCHQ, is one of the UK Intelligence Agencies. SIS runs this Design System website.\n\nFor full information on the Privacy Policy of each Intelligence Agency, please see the respective page:\n\n- [SIS Privacy Policy](https://www.sis.gov.uk/privacy-policy.html)\n- [MI5 Privacy Policy](https://www.mi5.gov.uk/privacy-policy)\n- [GCHQ Privacy Policy](https://www.gchq.gov.uk/section/about-this-website/privacy)\n\n## Limitations and amendments\n\nThis statement only covers the Design System website at design.sis.gov.uk. This statement does not cover third party websites to which we may link. It does not cover the main SIS website.\n\n## Changes to this notice\n\nWe may change this privacy notice. When we make changes to this notice, the 'last updated' date at the bottom of this page will also change. Any changes to this privacy notice will apply to you and your data immediately. If these changes affect how your personal data is processed, SIS will take reasonable steps to make sure you know.\n",
      "path": "/icds/privacy-policy",
      "date": "2022-11-15",
      "title": "Privacy Policy",
      "subTitle": "Privacy Policy for the Intelligence Community Design System",
      "meta": {
        "relativePath": "icds/privacy-policy.mdx",
        "createdAt": "2023-04-14T11:24:28.681Z",
        "lastModified": "2023-04-14T11:24:28.681Z",
        "size": 3752,
        "formattedSize": "3.7 KB"
      }
    },
    {
      "id": "patterns__app-errorsx",
      "contents": "\nimport { IcAlert, IcTypography, IcLink } from \"@ukic/react\";\n\n## When to use\n\nDisplay an app error when:\n\n- When you need to make users aware that something’s not working as expected.\n- When a system is partially functioning.\n- When data sources are unavailable.\n- Where an incoming data source SLA has been breached.\n- When an app is unavailable for scheduled system maintenance.\n\n## When not to use\n\n- Don't use app errors for [form validation feedback](/patterns/form-validation).\n- Don't use a [toast](/components/toasts) for errors because a user might not notice the error message.\n\n## Usage\n\nApp errors should bring sufficient context to allow the user to understand whether they can still use the app and contain resolution information.\n\nIf possible, manage users expectations on how long something will take to fix and offer workarounds (if available).\n\nUse words that describe the cause of the error and, where possible, give the user a way to resolve it.\n\n### Alerts\n\nUse an alert if only part of an app (such as an asynchronous component) has a problem.\n\n<ComponentPreview icds>\n  <IcAlert\n    heading=\"Something went wrong\"\n    message=\"The app couldn't connect to the server to download the latest information. Please check your connection or contact your local IT Service Desk.\"\n    variant=\"error\"\n  />\n</ComponentPreview>\n\n### Dialogs and modals\n\nUse dialogs for critical problems where you need to preserve information on the page.\n\nFor example, for a network problem when trying to save information and to prevent interaction with the rest of the app.\n\n### Full page\n\nUse full-page errors for the most critical problems, especially those that can't be resolved.\n\nFor example, use a full-page error message when content is missing or when the app fails to load.\n\n<ComponentPreview noPadding left>\n  <div style={{ padding: \"36px\" }}>\n    <IcTypography variant=\"h1\" component=\"h3\" applyVerticalMargins>\n      LATTE STREET is unavailable\n    </IcTypography>\n    <IcTypography variant=\"body\" applyVerticalMargins>\n      This app is currently unavailable whilst we carry out an update.\n    </IcTypography>\n    <IcTypography variant=\"caption\">\n      Please check the <IcLink href=\"#\">downtime calendar</IcLink> and try again\n      later.\n    </IcTypography>\n  </div>\n</ComponentPreview>\n\n### Persistent banner\n\nUse a persistent banner at the top of an app experiencing a system or data problem. If multiple problems exist, group them into one banner.\n\nLink to available support pages and provide resolution information (if available) to provide assurance and transparency to your users.\n\nBe careful to keep persistent banners visually distinct when used alongside classification banners.\n\n### Email\n\nUse an email to notify users of a system being down, including for scheduled maintenance.\n\n### Tone of voice\n\nWrite your error message with short, jargon-free language to inform your users and consider that errors can increase anxiety for people. An error shouldn't blame the user.\n\nUse words that describe the cause of the error and, where possible, give the user a way to resolve it.\n\n## Accessibility considerations\n\nWhen building or using this pattern:\n\n- Make sure components for app errors are announced to screen readers and other assistive technology.\n- Don't use colour on its own to convey the app error. Always include text or iconography.\n- Consider that errors can increase anxiety for people. An error shouldn't blame the user.\n",
      "path": "/patterns/app-errors",
      "navPriority": 1,
      "date": "2022-11-15",
      "title": "App errors",
      "subTitle": "App errors are shown when a problem occurs that the user has no control over.",
      "status": "IN DEVELOPMENT",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/patterns/app-errors.mdx",
      "meta": {
        "relativePath": "patterns/app-errors.mdx",
        "createdAt": "2023-04-14T11:24:28.681Z",
        "lastModified": "2023-04-14T11:24:28.681Z",
        "size": 3780,
        "formattedSize": "3.7 KB"
      }
    },
    {
      "id": "patterns__form-layoutx",
      "contents": "\nimport basicFormGood from \"./images/basic-form-good.png\";\nimport basicFormBad from \"./images/basic-form-bad.png\";\nimport basicFormBad2 from \"./images/basic-form-bad-2.png\";\nimport stepper1 from \"./images/stepper1.png\";\nimport stepper2 from \"./images/stepper2.png\";\n\n## Basic form\n\nThis form layout involves displaying multiple form fields on one page.\n\nTry to limit the number of fields on a page to about five or six.\n\nAlways keep the layout of the form simple by preferring a single column of fields.\n\nForm fields should match the size of the answer you expect to each question - such as a short, single-line text field for a first name, or a long, multi-line text field for a paragraph.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={basicFormGood}\n    imageAlt=\"A good example of a form with fields that match the size of the expected input and are displayed in a single column.\"\n    state=\"good\"\n    caption=\"Use fields that reflect the size of the expected input to make it easier to understand what each question is asking for. The whole width of the page does not need to be filled.\"\n  />\n  <DoDontCaution\n    imageSrc={basicFormBad}\n    imageAlt=\"A bad example of a form with fields that take up the whole width of the screen instead of matching the size of the expected input. The form fields are also displayed in multiple columns.\"\n    state=\"bad\"\n    caption=\"Don't use multiple columns as this can affect readability and make it more likely that users will miss something.\"\n  />\n</DoubleDoDontCaution>\n\nAlign form fields to the left for a clean and consistent layout for your application.\n\n<DoDontCaution\n  imageSrc={basicFormBad2}\n  imageAlt=\"A bad example of a form that is centre-aligned, with a left-aligned page header.\"\n  state=\"bad\"\n  caption=\"Don't align your form to the centre of the page.\"\n/>\n\n## Multi-page form\n\nUse a stepper (which is built into the [page header](/components/page-header) component) to separate a long form out into multiple pages.\n\nUse multiple pages if your form is much longer than about five or six fields.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={stepper1}\n    imageAlt=\"A form, with four fields, and a stepper indicating the current step.\"\n    state=\"none\"\n    caption=\"A stepper can split up complex forms to let you add inline guidance and design simpler layouts.\"\n  />\n  <DoDontCaution\n    imageSrc={stepper2}\n    imageAlt=\"A form, with two fields, and a stepper indicating the current, completed, and invalid steps.\"\n    state=\"none\"\n    caption=\"A stepper can help you manage complex validation and intermediate (as-you-go) saving of forms.\"\n  />\n</DoubleDoDontCaution>\n",
      "path": "/patterns/form-layout",
      "navPriority": 2,
      "date": "2022-11-15",
      "title": "Form layout",
      "subTitle": "A simple layout for a form helps to make it easier to complete and allows users to focus on the content of the questions.",
      "status": "IN DEVELOPMENT",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/patterns/form-layout.mdx",
      "meta": {
        "relativePath": "patterns/form-layout.mdx",
        "createdAt": "2023-04-14T11:24:28.681Z",
        "lastModified": "2023-04-14T11:24:28.681Z",
        "size": 3017,
        "formattedSize": "2.9 KB"
      }
    },
    {
      "id": "patterns__form-validationx",
      "contents": "\nimport { IcTextField } from \"@ukic/react\";\nimport ErrorSummaryEx from \"./components/ErrorSummaryEx\";\n\n## When to use\n\nUse form validation for all forms where information is required or is required in a particular format.\n\nAlways show an error summary at the top of the form along with a message under invalid fields.\n\n## Usage\n\nIn some cases, you can present success validation on text fields. For example, if choosing a username.\n\nDon't display text field errors as the user is typing. Wait until typing is finished or the form is submitted.\n\n### Error summary\n\nUse a multiline error alert to display a summary list of the validation issues.\n\n<ComponentPreview noPadding>\n  <ErrorSummaryEx />\n</ComponentPreview>\n\nPut the alert at the top of the form. Set focus on the error summary when form validation has failed.\n\nEach issue in the list should link to the related input field. Set focus to the field when the summary list item is clicked.\n\n### Text fields\n\nDisplay an error message under each invalid text field. Don't hide any 'helper text' when showing an error message.\n\n<ComponentPreview icds>\n  <IcTextField\n    label=\"What's your favourite type of coffee?\"\n    required\n    helperText=\"Such as Arabica, Robusta or Liberica.\"\n    validationStatus=\"error\"\n    validationText=\"Please provide your subscription number.\"\n  />\n</ComponentPreview>\n\n## Accessibility considerations\n\nWhen building or using this pattern:\n\n- Set the focus of the keyboard and scroll to the error summary when it appears. Make sure the error summary is announced by a screen reader.\n- Consider that errors can increase anxiety for people. An error shouldn't blame the user.\n- Add ‘Error: ’ to the beginning of the page `<title>` to inform assistive technology users as soon as possible.\n",
      "path": "/patterns/form-validation",
      "navPriority": 3,
      "date": "2022-11-15",
      "title": "Form validation",
      "subTitle": "Form validation checks that the information provided is correct and helps the user to fix any problems.",
      "status": "IN DEVELOPMENT",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/patterns/form-validation.mdx",
      "meta": {
        "relativePath": "patterns/form-validation.mdx",
        "createdAt": "2023-04-14T11:24:28.681Z",
        "lastModified": "2023-04-14T11:24:28.681Z",
        "size": 2138,
        "formattedSize": "2.1 KB"
      }
    },
    {
      "id": "patterns__indexx",
      "contents": "\n## Introduction\n\nPatterns are best practice designs or implementations for common user needs.\n\nThey support consistent interactions across a wide range of apps. They make it easier for people to switch between app contexts, identify common tasks, and still know how to use your app.\n\nPatterns often use multiple [components](/components) and are always based on the [style tokens](/styles). All patterns have been tested to meet or exceed [accessibility requirements](/accessibility/requirement).\n\n## Contribute\n\nWe are expanding the Design System and UI Kit. You can check out the [roadmap](/community/roadmap) for what's coming. If you can help you can [read more on how to contribute](/community).\n",
      "path": "/patterns",
      "navPriority": 0,
      "date": "2022-11-15",
      "title": "Patterns",
      "subTitle": "This section introduces our common design patterns.",
      "status": "IN DEVELOPMENT",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/patterns/index.mdx",
      "meta": {
        "relativePath": "patterns/index.mdx",
        "createdAt": "2023-04-14T11:24:28.681Z",
        "lastModified": "2023-04-14T11:24:28.681Z",
        "size": 981,
        "formattedSize": "981 Bytes"
      }
    },
    {
      "id": "patterns__successx",
      "contents": "\nimport { IcAlert, IcButton, IcTextField } from \"@ukic/react\";\n\nexport const SnackbarBasic = () => {\n  const title = \"Your coffee order is being processed.\";\n  const [open, setOpen] = React.useState(false);\n  const toggle = () => setOpen(!open);\n  return (\n    <div>\n      <IcButton variant=\"primary\" onClick={toggle}>\n        Submit coffee order\n      </IcButton>{\" \"}\n      {open && (\n        <Snackbar\n          anchorOrigin={{ horizontal: \"left\", vertical: \"bottom\" }}\n          message={title}\n          open={open}\n        />\n      )}\n    </div>\n  );\n};\n\n## When to use\n\nUse a success message when you want to inform the user that a task has been successful.\n\nFor example, show a [success alert](/components/alerts) on a subsequent page after submitting a form.\n\n## When not to use\n\nDon't overuse success messages. Don't add success validation to every text field.\n\nDon't use full-page success messages. If a form is submitted successfully, consider a success alert component on the subsequent screen.\n\n## Usage\n\n### Toasts\n\nUse a [toasts](/components/toasts) to deliver a passive success message. Use a snackbar when you don't need to guarantee a user will notice the message.\n\n### Alerts\n\nUse alerts to give feedback after a significant task. Alerts are more likely to be noticed by users.\n\nFor example, use a success alert on a subsequent page after submitting a request to give the user a reference number.\n\n<ComponentPreview icds>\n  <IcAlert\n    heading=\"Application submitted\"\n    message=\"Your application for 'additional coffee allowance' was submitted successfully.\"\n    variant=\"success\"\n  />\n</ComponentPreview>\n\n### Summary and 'review' pages\n\nOnly use a summary page after submitting a form if you need the user to export the information.\n\nDon't use a full page for a success message; use a snackbar or alert on a list or homepage instead.\n\n### Text fields\n\nUse success messages on [text inputs](/components/text-input) if you need to validate information before submitting the form.\n\nUse them in situations where you need immediate feedback, such as choosing a username.\n\n<ComponentPreview icds>\n  <IcTextField\n    label=\"Username\"\n    value=\"coffeeninja005\"\n    validationStatus=\"success\"\n    validationText=\"This username is available.\"\n  />\n</ComponentPreview>\n\n## Accessibility considerations\n\nWhen building or using this pattern:\n\n- Make sure components such as alerts are announced to screen readers and other assistive technology.\n- Don't use colour on its own to convey that a problem has occurred; always include text.\n",
      "path": "/patterns/success",
      "navPriority": 4,
      "date": "2022-11-15",
      "title": "Success messages",
      "subTitle": "Success messages inform the user of a successful outcome.",
      "status": "IN DEVELOPMENT",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/patterns/success.mdx",
      "meta": {
        "relativePath": "patterns/success.mdx",
        "createdAt": "2023-04-14T11:24:28.681Z",
        "lastModified": "2023-04-14T11:24:28.681Z",
        "size": 2851,
        "formattedSize": "2.8 KB"
      }
    },
    {
      "id": "styles__colourx",
      "contents": "\nimport ColourTable from \"./components/ColourTable\";\nimport {\n  ColoursText,\n  ColoursAction,\n  ColoursActionBackgrounds,\n  ColoursLinks,\n  ColoursStatus,\n  ColoursClassification,\n  ColoursArchitecturalAll,\n  ColoursTheme,\n} from \"./components/ColourTable/colours.config\";\n\n## Using colours\n\nPeople can complete tasks faster with recognisable, accessible and consistent colours.\n\nAlways use the Design System colour styles. These colours meet or exceed all [accessibility requirements](/accessibility/requirement).\n\nThe colour styles are built into the [UI Kit](/get-started). You should use these to help maintain consistency for when you are building custom experiences.\n\n## Text\n\nPrimary text is an off-black colour that satisfies minimum and maximum contrast needs. Use this colour for the majority of text and elements.\n\nUse the secondary text colour for supporting content such as helper text or less important information in lists and tables.\n\nUse the tertiary text colour for even less important information. Use the tertiary text colour sparingly and always try to use the primary or secondary colours first.\n\nDon't use different colours for text, unless specified as part of a component.\n\n<ColourTable config={ColoursText} />\n\n## Action\n\nUse the action colour for interactive elements like buttons, form controls and important actions. This makes it easy for people to recognise elements and switch between contexts.\n\nThe single action colour creates consistency across a range of apps. Use the dark or light action colour variant if a background colour is used.\n\nUse the destructive action colour styles for actions that can't be reversed.\n\n<ColourTable config={ColoursAction} />\n\n### Action backgrounds\n\nInteractive elements sometimes require transparent backgrounds for their hover and pressed states. The action background colour styles use the action colour styles with transparency.\n\n<ColourTable config={ColoursActionBackgrounds} />\n\n## Links\n\nUse these colours for all links. These specific colours help to identify links from non-interactive text.\n\nUse the contrast colour variants to achieve good contrast for links that appear on dark backgrounds.\n\n<ColourTable config={ColoursLinks} />\n\n## Status\n\nUse these colours only for status updates, errors and warnings. Always include text describing the status even if you use an icon.\n\nUse the contrast colour variants to achieve good contrast when displaying status on dark backgrounds.\n\nUse the 'warning dark' colour for any 'warning' text.\n\n<ColourTable config={ColoursStatus} />\n\n## Classification\n\nUse these colour styles for components that indicate content's classification.\n\n<ColourTable config={ColoursClassification} />\n\n## Architectural\n\nUse these colours in lines, borders and backgrounds to logically separate distinct pieces of content.\n\n<ColourTable config={ColoursArchitecturalAll} />\n\n## Theme\n\nYou may choose a theme colour to give your app a distinct theme or 'brand'. Make sure it meets contrast requirements with either black or white foreground text.\n\nIf you use the [IC UI Kit](/components), the foreground colour will be automatically determined based on your theme colour.\n\nThe theme colour is used on the [top navigation](/components/top-nav), [side navigation](/components/side-nav), [hero](/components/hero) and [footer](/components/footer) components.\n\nDon't use theme colours on any other components.\n\n<ColourTable config={ColoursTheme} />\n\n## Accessibility considerations\n\nThese colours have been considered against a variety of accessibility and usability practices. This includes colour contrast, recognition, consistency and with various colour deficiencies.\n\nIf using a 'light' theme colour, any text in those components will need to be black instead of white. This is automatic if you're using the IC UI Kit. It's not possible to use 'inaccessible' colours in the IC UI Kit as they'll revert to the default theme colour. See the component documentation for more details.\n",
      "path": "/styles/colour",
      "navPriority": 1,
      "date": "2022-11-15",
      "title": "Colour",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/styles/colour.mdx",
      "meta": {
        "relativePath": "styles/colour.mdx",
        "createdAt": "2023-04-14T11:24:28.681Z",
        "lastModified": "2023-04-14T11:24:28.681Z",
        "size": 4163,
        "formattedSize": "4.1 KB"
      }
    },
    {
      "id": "styles__content-stylex",
      "contents": "\n## Introduction\n\nThe way we write, and [how we present it](/styles), can make or break an experience. Use this content style guide to support readability and engagement of your written content and apps.\n\nWe've created this guide with inspiration from [Mozilla](https://mozilla.design/firefox/personality/), the [UK Government Digital Service (GDS)](https://www.gov.uk/guidance/content-design/writing-for-gov-uk) and our own experiences.\n\nThis guide applies to content you write in apps (like error messages) through to user guides and corporate comms.\n\nOur goal is to create informative, helpful and clear content. This isn't about 'dumbing content down' - our job is to 'open it up'. We want as many people as possible to understand and engage with what we write.\n\nSpeaking in an 'active voice', we use short sentences, subheadings, simple vocabulary and always write in plain English.\n",
      "path": "/styles/content-style",
      "date": "2022-11-15",
      "title": "Content style",
      "subTitle": "People read, understand and consume content in different ways. What we write should be understandable by all, regardless of how they work, think or interact.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/styles/content-style.mdx",
      "meta": {
        "relativePath": "styles/content-style.mdx",
        "createdAt": "2023-04-14T11:24:28.681Z",
        "lastModified": "2023-04-14T11:24:28.681Z",
        "size": 1254,
        "formattedSize": "1.2 KB"
      }
    },
    {
      "id": "styles__elevationx",
      "contents": "\nimport elevationFig1 from \"./images/fig-1-an-example-of-an-application-showing-the-different-layers-of-interaction.png\";\n\n## Interaction layers\n\nAdding elevation with shadow helps to provide hierarchy to components.\n\nAn app can be considered to be a set of different interaction layers that hold different types of components that exhibit similar behaviour. Components on each of these layers cast differing levels of shadow to provide the appearance of different heights from the page.\n\nThere are three layers:\n\n1. The base layer contains most of the page content and scrolls within the viewport. Its contents are on the bottom layer of an app so cast little or no shadow.\n2. The overlay layer contains components that overlay the base layer. These overlaid components may stick to the viewport when scrolled and cast a small shadow.\n3. The modal layer sits above all other content and contains components that are important to display to the user and interrupt their current task. Components on this layer cast a large shadow.\n\n<DoDontCaution\n  imageSrc={elevationFig1}\n  imageAlt=\"A graphic of an application showing the different layers of interaction on the lef-hand side and a depth chart on the right. The chart is used to show the hierarchy of the interactions. Explained in the previous text.\"\n  state=\"none\"\n  caption=\"An example of an application showing the different layers of interaction. This includes the base layer with some raised content, the overlay layer and the modal layer.\"\n/>\n\nTokens are provided for the z-index values of components which sit above the base layer as well as the base z-index itself:\n\n| <span style={{width: '5vw', display: 'inline-block'}}>**Token**</span> | **Component**                                                                                              | **Calculated z-index** |\n| ---------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------- | ---------------------- |\n| <span class=\"css-token\">--ic-z-index-base-value</span>                 | Base z-index value. Used to calculate z-index of other ic components that sit above the base layer.        | 0 (Base)               |\n| <span class=\"css-token\">--ic-z-index-page-header</span>                | [Page header](/components/page-header)                                                                     | Base + 10              |\n| <span class=\"css-token\">--ic-z-index-back-to-top</span>                | [Back to top](/components/back-to-top)                                                                     | Base + 20              |\n| <span class=\"css-token\">--ic-z-index-menu</span>                       | Menu for [select](/components/select) and [search bar](/components/search-bar)                             | Base + 50              |\n| <span class=\"css-token\">--ic-z-index-popover</span>                    | Popover menu                                                                                               | Base + 50              |\n| <span class=\"css-token\">--ic-z-index-navigation-item</span>            | Navigation item used in [top navigation](/components/top-nav) and [side navigation](/components/side-nav). | Base + 50              |\n| <span class=\"css-token\">--ic-z-index-navigation-menu</span>            | Navigation menu used in [top navigation](/components/top-nav) at smaller breakpoints.                      | Base + 60              |\n| <span class=\"css-token\">--ic-z-index-side-navigation</span>            | [Side navigation](/components/side-nav)                                                                    | Base + 60              |\n| <span class=\"css-token\">--ic-z-index-tooltip</span>                    | [Tooltip](/components/tooltip)                                                                             | Base + 110             |\n| <span class=\"css-token\">--ic-z-index-toast</span>                      | [Toast](/components/toast)                                                                                 | Base + 110             |\n| <span class=\"css-token\">--ic-z-index-classification-banner</span>      | [Classification banner](/components/classification-banner)                                                 | Base + 200             |\n\nUsers can change the base value in their css:\n\n```css\n:root {\n  --ic-z-index-base-value: 1000;\n}\n```\n\nWhich will cause all other z-index tokens to be calculated from this new value.\n\nAdditionally, users can change the z-index value for a specific component, either globally:\n\n```css\n:root {\n  --ic-z-index-tooltip: 200;\n}\n```\n\nOr for a specific instance or instances of a component:\n\n<!-- prettier-ignore-start -->\n```html\n<ic-tooltip id=\"my-tooltip-id\">...</ic-tooltip>\n\n#my-tooltip-id {\n  --ic-z-index-tooltip: 300;\n}\n```\n\n```html\n<ic-tooltip class=\"my-tooltip-class\">...</ic-tooltip>\n\n.my-tooltip-class {\n  --ic-z-index-tooltip: 300;\n}\n```\n<!-- prettier-ignore-end -->\n\n## Shadows\n\nEach interaction layer has a defined shadow to provide the sense of depth.\n\n| <span style={{width: '5vw', display: 'inline-block'}}>**Token**</span> | **Description**                                                                  | **Perceived depth** |\n| ---------------------------------------------------------------------- | -------------------------------------------------------------------------------- | ------------------- |\n| none                                                                   | Components on the base layer cast no shadow.                                     | 0px                 |\n| <span class=\"css-token\">--ic-elevation-raised</span>                   | Raised components sit on the base layer and cast a slight shadow.                | 1px                 |\n| <span class=\"css-token\">--ic-elevation-overlay</span>                  | Components that sit in the overlay layer cast a small shadow.                    | 4px                 |\n| <span class=\"css-token\">--ic-elevation-modal</span>                    | The modal layer contains components that appear highest and cast a large shadow. | 8px                 |\n\n## Accessibility considerations\n\nThe shadows are purely decorative and don't provide any additional meaning that can't otherwise be understood from the page contents or code.\n\nShadows aren't used to distinguish a component from adjacent components or background layers. The components themselves provide enough contrast to ensure they stand out.\n",
      "path": "/styles/elevation",
      "navPriority": 6,
      "date": "2022-11-15",
      "title": "Elevation",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/styles/elevation.mdx",
      "meta": {
        "relativePath": "styles/elevation.mdx",
        "createdAt": "2023-04-14T11:24:28.685Z",
        "lastModified": "2023-04-14T11:24:28.685Z",
        "size": 6733,
        "formattedSize": "6.6 KB"
      }
    },
    {
      "id": "styles__focus-indicatorx",
      "contents": "\nimport focusIndicatorFig1 from \"./images/fig-1-focus-indicators-inherit-the-border-radius-of-the-components-they-enclose.png\";\nimport focusIndicatorFig2 from \"./images/fig-2-focus-on-links-is-indicated-by-an-underline.png\";\n\n## Enclosing components\n\nThe focus indicator shows users where they are on a page. It encloses most components and inherits their shapes. They are especially useful for keyboard-only and power users.\n\nWhen applied to squared components for example [buttons](/components/buttons), [text field](/components/text-input) and [checkboxes](/components/checkboxes), the focus indicator will fully enclose the component and therefore appear squared.\n\nSimilarly, when applied to rounded components for example [radio](/components/radio), [switch](/components/switch) and [back to top](/components/back-to-top), the focus indicator will appear rounded.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={focusIndicatorFig1}\n    imageAlt=\"An image of a button and back to top component, both with focus applied to them.\"\n    state=\"none\"\n    caption=\"Focus indicators inherit the border radius of the components they enclose.\"\n  />\n</DoubleDoDontCaution>\n\n## Links\n\nWhen links are focused, the indicator will appear as the hover state.\n\n<DoubleDoDontCaution>\n  <DoDontCaution\n    imageSrc={focusIndicatorFig2}\n    imageAlt=\"An image of a blue link labelled 'Coffee blog' with a thick underline of the same colour.\"\n    state=\"none\"\n    caption=\"Focus on links is indicated by a thick underline.\"\n  />\n</DoubleDoDontCaution>\n\n## Positioning and layout\n\n### Adjacent to components\n\nFor most components, the focus indicator will enclose the full component, appearing directly adjacent to its borders.\n\n### Internal to components\n\nFocus indicators are required to be fully visible. For components which are adjacent to other components, or the viewport edge, the focus indicator appears internal to the component to remain visible.\n\nEnough padding is provided within these components so that no content is obscured. Make sure to always confirm that no part of the focus indicator or the component's content is clipped or obscured.\n\n## Navigation\n\nKeyboard navigation controls vary between components. For specific information, refer to the 'Accessibility' tab in a component's page.\n\n## Accessibility considerations\n\nWe've designed this style token to meet the emerging [Web Content Accessibility Guidelines (WCAG) 2.2 Candidate Recommendation](https://www.w3.org/TR/WCAG22/) criteria for Level AA (and in some cases AAA) requirements.\n\nGiven the requirements are still a draft and may be subject to change, we will track these criteria to make sure this style token remains conformant.\n",
      "path": "/styles/focus-indicator",
      "navPriority": 7,
      "date": "2022-11-15",
      "title": "Focus indicator",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/styles/focus-indicator.mdx",
      "meta": {
        "relativePath": "styles/focus-indicator.mdx",
        "createdAt": "2023-04-14T11:24:28.685Z",
        "lastModified": "2023-04-14T11:24:28.685Z",
        "size": 2918,
        "formattedSize": "2.8 KB"
      }
    },
    {
      "id": "styles__grammarx",
      "contents": "\n## Abbreviations and acronyms\n\nWe regularly use abbreviations and acronyms, especially in technology. Write out the words the first time you mention it, then use the short version next time.\n\nFor example, write 'Intelligence Community Design System (ICDS)' the first time you mention it. Then 'ICDS' the second time.\n\n## Ampersands\n\nUse ampersands only if they are part of a logo or in a brand name.\n\n## Paragraphs\n\nA paragraph should be made up of 2 to 3 sentences if possible.\n\n## Capitalisation\n\nWe don't use block capitals as they're difficult for people to read.\n\nCapitalise proper nouns and write everything else in sentence case. A proper noun is often a specific place, person or thing.\n\n| **Like this...**       | **Not like this...**   |\n| ---------------------- | ---------------------- |\n| Date and time          | Date and Time          |\n| Text fields            | Text Fields            |\n| Intelligence Community | Intelligence community |\n\n## Full stops\n\nDon't use full stops in headings, buttons or action links.\n\n## Lists\n\nConsistent lists are easier to read and will be read properly by assistive technology.\n\n- List items should end with a full stop.\n- Begin list items with a capital letter.\n\n## Exceptions\n\nNot all scenarios will be covered by this guidance - do what makes sense. For example, writing the number in words in the example below.\n\n| **Like this...**                                  | **Not like this...**                           |\n| ------------------------------------------------- | ---------------------------------------------- |\n| This API is built by a third-party.               | This API is built by a 3rd party.              |\n| Children's toys are sold at the second-hand shop. | Children's toys are sold at the 2nd-hand shop. |\n",
      "path": "/styles/content-style/grammar",
      "navPriority": 3,
      "date": "2022-11-15",
      "title": "Grammar and punctuation",
      "subTitle": "Grammar and punctuation are the building blocks of good writing.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/styles/grammar.mdx",
      "meta": {
        "relativePath": "styles/grammar.mdx",
        "createdAt": "2023-04-14T11:24:28.685Z",
        "lastModified": "2023-04-14T11:24:28.685Z",
        "size": 2082,
        "formattedSize": "2.0 KB"
      }
    },
    {
      "id": "styles__iconsx",
      "contents": "\nimport IconFinder from \"./components/IconFinder\";\n\n## What icons we use\n\nThe Design System uses a reduced number of the [Material Design Icons](https://materialdesignicons.com/) library. You can use other Material Design Icons if you need to, but keep the common icons consistent.\n\nWe use the extended open source icon set because our apps often need to use uncommon icons.\n\n<IconFinder />\n\n## Usage\n\n### Use sparingly\n\nDon't rely on icons when your layout becomes complex as this can make it harder to understand.\n\nConsider alternatives such as dropdowns, merged buttons and splitting a layout across multiple pages.\n\n## Accessibility considerations\n\nProvide a text label when you use icons. Even if the text isn't visible on the screen, assistive technology needs to describe the icon.\n\nUse tooltips on icons or icon buttons so that the meaning of an icon is obvious.\n\n## Slotted SVGs\n\nAdding the `slot` attribute to SVGs within a Typescript file produces an error due to slot not being a SVG prop. `<SlottedSVG>` removes this error and can be used with [native SVGs](/get-started/install-components/react/#working-with-slotted-svgs) or [Material Design Icons (MDI)](/get-started/install-components/react/#using-material-design-icons-mdi-with-slottedsvg).\n\n- [Side navigation component](/components/side-nav/code/#with-material-design-icons-in-slottedsvg) using Material Design Icons with SlottedSVG\n",
      "path": "/styles/icons",
      "navPriority": 2,
      "date": "2022-11-15",
      "title": "Icons",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/styles/icons.mdx",
      "meta": {
        "relativePath": "styles/icons.mdx",
        "createdAt": "2023-04-14T11:24:28.685Z",
        "lastModified": "2023-04-14T11:24:28.685Z",
        "size": 1590,
        "formattedSize": "1.6 KB"
      }
    },
    {
      "id": "styles__inclusive-languagex",
      "contents": "\n## Introduction\n\nThe IC Design System firmly agree with \"Nothing about us without us\"<sup id=\"ref-1\"><a href=\"#fn-1\">1</a></sup>. Where possible, we have developed the Design System and its content style with input from across the communities. This includes disability advisory networks, affinity groups and expertise from the UKIC.\n\n## Addressing potentially sensitive topics\n\nSome friendly terms can unintentionally exclude big groups of people. For example, 'hi folks', 'you guys' or 'all of mankind' refer to gender identity<sup id=\"ref-2\"><a href=\"#fn-2\">2</a></sup>. People have different beliefs, identities or perceptions that can change how they feel about these words.\n\n### Social Model of Disability\n\nThis Design System is an exception to talking about disability, impairment and other situations that affect how people work. The Design System language and principles are designed around [The Social Model of Disability](https://en.wikipedia.org/wiki/Social_model_of_disability).\n\n\"The social model of disability is a way of viewing the world, developed by disabled people... The model says that people are disabled by barriers in society, not by their impairment or difference.\"<sup id=\"ref-3\"><a href=\"#fn-3\">3</a></sup>\n\n### Disability and difference\n\nWhile some words are inoffensive in certain contexts some words are offensive in any context and should always be avoided.\n\nIt's important to consider the context when using some terms. For example, \"falling on deaf ears\" can be interpreted as offensive.\n\n### Examples of Inclusive Language\n\nThis is not an 'Intelligence Community approved' list of terms but explains the reasoning for language you encounter within the Design System.\n\n| **This...**                  | **Instead of...**                                                                                                                                                                                               |\n| ---------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Impairment                   | Disability                                                                                                                                                                                                      |\n| Person with disability (PwD) | Handicapped, diffability                                                                                                                                                                                        |\n| People without disabilities  | Able-bodied                                                                                                                                                                                                     |\n| Cognitive difference         | Learning disability, learning defect, special needs                                                                                                                                                             |\n| Visually impaired            | Blind (when somebody has limited vision)                                                                                                                                                                        |\n| Blind                        | Visually impaired (when somebody is unable to see)                                                                                                                                                              |\n| d/Deaf                       | Deaf. The term Deaf with an uppercase 'D' often refers to those who identify as Deaf or are active in the Deaf community. Deaf with a lowercase 'd' often refers to those diagnosed with the medical condition. |\n| has [illness or disability]  | Suffers from, is a victim of, is afflicted with                                                                                                                                                                 |\n| Neurodiversity               | Neurodiverse, neurodivergent                                                                                                                                                                                    |\n\n1. <a\n     href=\"https://en.wikipedia.org/wiki/Nothing_About_Us_Without_Us\"\n     id=\"fn-1\"\n   >\n     Nothing about us without us\n   </a>\n   .<i> Wikipedia</i>. Retrieved 24 March 2021. <a href=\"#ref-1\">\n     Back to content\n   </a>\n2. <a\n     href=\"https://www.linkedin.com/pulse/inclusive-language-important-thriving-diverse-work-culture-singh\"\n     id=\"fn-2\"\n   >\n     Thriving diverse work culture\n   </a>\n   .<i> LinkedIn</i>. Retrieved 24 March 2021. <a href=\"#ref-2\">\n     Back to content\n   </a>\n3. <a\n     href=\"https://www.scope.org.uk/about-us/social-model-of-disability/\"\n     id=\"fn-3\"\n   >\n     Social model of disability\n   </a>\n   .<i> Scope</i>. Retrieved 24 March 2021. <a href=\"#ref-3\">Back to content</a>\n",
      "path": "/styles/content-style/inclusive-language",
      "navPriority": 2,
      "date": "2022-11-15",
      "title": "Inclusive language",
      "subTitle": "Consider that what you write can have side effects even with the best of intentions.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/styles/inclusive-language.mdx",
      "meta": {
        "relativePath": "styles/inclusive-language.mdx",
        "createdAt": "2023-04-14T11:24:28.701Z",
        "lastModified": "2023-04-14T11:24:28.701Z",
        "size": 5439,
        "formattedSize": "5.3 KB"
      }
    },
    {
      "id": "styles__indexx",
      "contents": "\n## Introduction\n\nStyle tokens are key in creating accessible, usable and consistent experiences. These tokens are used in all [components](/components) and [patterns](/patterns).\n\nWe've tested that these styles meet or exceed the [accessibility requirement](/accessibility/requirement).\n\n## Content style\n\nAn [inclusive content style](/styles/content-style) means anyone can understand the app or content, regardless of how they work or think.\n\n## Contribute\n\nWe are expanding the Design System and UI Kit. You can check out the [roadmap](/community/roadmap) for what's coming. If you can help you can [read more on how to contribute](/community).\n",
      "path": "/styles",
      "navPriority": 0,
      "date": "2022-11-15",
      "title": "Styles",
      "subTitle": "This section introduces our style tokens which describe how things look and feel.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/styles/index.mdx",
      "meta": {
        "relativePath": "styles/index.mdx",
        "createdAt": "2023-04-14T11:24:28.701Z",
        "lastModified": "2023-04-14T11:24:28.701Z",
        "size": 926,
        "formattedSize": "926 Bytes"
      }
    },
    {
      "id": "styles__layout-spacingx",
      "contents": "\nimport layoutSpacingFig1 from \"./images/fig-1-components-laid-out-on-8px-grid.png\";\nimport layoutSpacingFig2 from \"./images/fig-2-vertical-rhythm-example.png\";\nimport layoutSpacingFig3 from \"./images/fig-3-margins-columns-gutters.png\";\nimport layoutSpacingFig4 from \"./images/fig-4-max-width.png\";\nimport layoutSpacingFig5 from \"./images/fig-5-content-on-grid.png\";\nimport layoutSpacingFig6 from \"./images/fig-6-containers.png\";\nimport layoutSpacingFig7 from \"./images/fig-7-fixed-grid.png\";\nimport layoutSpacingFig8 from \"./images/fig-8-influencers.png\";\n\n## Using consistent layouts\n\nThe eight-pixel, fluid column grid provides the basis for every page. It enables consistent positioning and sizing of all UI components to build structure into the designs and speeds up the creation of new pages and components by following these rules.\n\nColumns enable pages to be defined responsively, so that they look great on any device or screen size. Every component can be positioned across a number of columns and spacing between components is maintained through the use of gutters.\n\nUsing the eight-pixel square provides visual rhythm throughout the UI components as it allows internal elements to be consistently placed, and creates a continuous vertical flow using spacing tokens.\n\n## The eight-pixel square\n\nEvery component is created upon a grid comprising of eight-pixel squares. Each internal element uses position, sizing, and padding values in multiples of eight pixels so that they align to this grid. Some smaller or more compact elements can use fractions of the eight-pixel square to achieve sizes such as four or two pixels.\n\n<DoDontCaution\n  imageSrc={layoutSpacingFig1}\n  imageAlt=\"Two short forms each with a select box, text area and secondary button. All components and their internal elements align to a visible eight-pixel grid.\"\n  state=\"none\"\n  caption=\"Components are based upon an eight-pixel grid to help drive visual consistency between them.\"\n/>\n\nSpacing tokens are used within the components to make sure they are consistent and to allow the quick update of spacing within the system by changing the token values. The spacing tokens are all multiples of the base eight-pixel grid square.\n\n| **Spacing token** | **Value** |\n| ----------------- | --------- |\n| --ic-space-xxxs   | 0.125rem  |\n| --ic-space-xxs    | 0.25rem   |\n| --ic-space-xs     | 0.5rem    |\n| --ic-space-sm     | 0.75rem   |\n| --ic-space-md     | 1rem      |\n| --ic-space-lg     | 1.5rem    |\n| --ic-space-xl     | 2rem      |\n| --ic-space-xxl    | 3rem      |\n\nElements are vertically laid out on a page also using these spacing tokens. This helps to provide vertical rhythm throughout a page’s contents and makes it easier to understand by organizing the content into repeatable spacing patterns.\n\n<DoDontCaution\n  imageSrc={layoutSpacingFig2}\n  imageAlt=\"Two examples of a text article with a heading, subtitle and some paragraphs of body copy. The first example has its elements aligned to the eight pixel grid creating vertical rhythm, whereas the second example’s elements don't align to the grid and seem uneven.\"\n  state=\"none\"\n  caption=\"Align all elements to the vertical eight-pixel grid to create vertical rhythm. The example on the right does not align to the grid and seems uneven.\"\n/>\n\n## The fluid column grid\n\nIt's important that page content is visible on any screen size. The fluid column grid helps us quickly define how content will display at different screen sizes by specifying the number of columns any given component will span horizontally.\n\nIt dictates the positioning of each individual component along with the horizontal spacing between them, as well as how they will contract and expand when the viewport is resized.\n\nThe fluid column grid is made up of three elements: margins, columns, and gutters. The values for each of them can differ across different breakpoints.\n\n<DoDontCaution\n  imageSrc={layoutSpacingFig3}\n  imageAlt=\"An example of a 12-column grid applied to a viewport showing margins on the left and right and gutters in between each column.\"\n  state=\"none\"\n  caption=\"An example of a 12-column grid applied to a viewport showing margins on the left and right and gutters in between each column.\"\n/>\n\n### Margins\n\nThe margins are the spaces between the left and right sides of the screen and the content itself. Margins can either be fixed, or set to scale depending on the implementation of the page at a given screen size.\n\n### Gutters\n\nThe gutters are the spaces between columns. These are always equal to one another, but can be changed to increase or reduce at different screen sizes.\n\n### Columns\n\nThe columns define the area that content can be placed. The number of columns can be set differently across different screen sizes and scale in width as the viewport scales.\n\n### Breakpoints\n\nBreakpoints are defined horizontal viewport sizes that can be used to trigger changes in the values for margins, gutters and columns. This is what enables us to change how content is laid out as a screen changes in size.\n\n| **Breakpoint**    | **Number of columns** | **Gutters** | **Margins** |\n| ----------------- | --------------------- | ----------- | ----------- |\n| xs (<=576px)      | 4(scaling)            | 8px         | 8px         |\n| sm (577-768px)    | 8(scaling)            | 16px        | 16px        |\n| md (769px-992px)  | 12(scaling)           | 16px        | 16px        |\n| lg (993px-1200px) | 12(scaling)           | 16px        | 16px        |\n| xl (>1200px)      | 12(scaling)           | 16px        | 24px        |\n\n### Max-width\n\nThe grid can be constrained to a max-width if you don’t want the grid to span the entire viewport. This can be useful for very large displays, or to maintain a good readable line length for your page’s copy.\n\nThe max-width will limit the width of your grid to the max-width value, and add scaling outer margins around the grid container.\n\n<DoDontCaution\n  imageSrc={layoutSpacingFig4}\n  imageAlt=\"An example of a viewport with a 12-column grid with a max-width set. Outer margins are applied on the left and right of the grid.\"\n  state=\"none\"\n  caption=\"Set a max-width so that the column grid is constrained and outer margins are applied on the left and right of the viewport.\"\n/>\n\n### Laying out content using the grid\n\nPage content can be defined as spanning a number of columns, and this number of columns can change across each breakpoint.\n\nFor example, a card component may span three columns on the extra large breakpoint, but span all four columns on the extra small breakpoint.\n\n<DoDontCaution\n  imageSrc={layoutSpacingFig5}\n  imageAlt=\"An example showing lots of different pieces of content laid onto a 12-column grid. Different content spans different numbers of columns.\"\n  state=\"none\"\n  caption=\"Lay out content by specifying how many columns it spans. Content can span different numbers of columns in order to achieve different layouts.\"\n/>\n\nNot all content has to span a number of columns, it can instead be defined as having a fixed width and simply positioned so that it is aligned with the columns.\n\nTake care when using fixed width elements so that they don't overflow the screen when it is reduced in size.\n\nContent can be added to containers so that only the container is set to span grid columns. This can be useful when trying to align content in an enclosed area.\n\n<DoDontCaution\n  imageSrc={layoutSpacingFig6}\n  imageAlt=\"An example form titled ‘Coffee survey’  laid out on a 12-column gird. It has some text elements spanning all 12 columns, a select input that spans six columns, a text area that spans 12 columns and a container that is aligned to the left column but is sized to hug three buttons that it contains.\"\n  state=\"none\"\n  caption=\"Group components into containers so that they can be positioned separately from the grid. Instead, the container is positioned to the grid, not the container’s contents.\"\n/>\n\n### Fixed column grid alternative\n\nA fixed grid can be used instead of using the fluid grid layout defined above. Instead of the number of columns being specified, specify the fixed width of each column, and the page will include more columns as it grows in width and space becomes available. This can be useful when you are laying out content that can’t resize as the columns resize.\n\n<DoDontCaution\n  imageSrc={layoutSpacingFig7}\n  imageAlt=\"Two examples of fixed column grids. One has a viewport width of 496px and displays six columns. The second has a viewport width of 336px and displays only four columns.\"\n  state=\"none\"\n  caption=\"A fixed column grid includes different numbers of columns dependent on the viewport size. This is useful when you don't want content to resize.\"\n/>\n\n### Zoom\n\nWhen a page is zoomed in upon using the browser controls, the page and breakpoints will behave as if the screen size were changed. A zoom of 400% on a starting viewport that is 1280px wide is equivalent a screen that is 320px wide. This is one reason why it is really important to always specify your apps responsively so that all your content can be viewed equally by all users.\n\n## Grid influencers\n\nSometimes other page elements exist outside of the grid and influence how it is sized. Including a fixed size side navigation forces the grid to occupy the remaining available horizontal width of the viewport.\n\n<DoDontCaution\n  imageSrc={layoutSpacingFig8}\n  imageAlt=\"An example of a viewport with a side navigation on the left-hand side and a 12-column grid filling the remaining space on the right.\"\n  state=\"none\"\n  caption=\"Grid influencers, such as a fixed width side navigation, cause the grid to compress into the remaining available space.\"\n/>\n",
      "path": "/styles/layout-spacing",
      "navPriority": 3,
      "date": "2022-11-15",
      "title": "Layout and spacing",
      "subTitle": "Common layout and spacing create consistency across pages and enable the rapid creation of new pages.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/styles/layout-spacing.mdx",
      "meta": {
        "relativePath": "styles/layout-spacing.mdx",
        "createdAt": "2023-04-14T11:24:28.701Z",
        "lastModified": "2023-04-14T11:24:28.701Z",
        "size": 10040,
        "formattedSize": "9.8 KB"
      }
    },
    {
      "id": "styles__linksx",
      "contents": "\n## Make links clear\n\nIt's important to make sure link text tells users where they are going and why. This is because link text should make sense without context (the words around the link).\n\nAvoid writing 'click here' or 'read more'.\n\n| **Like this...**                                                   | **Not like this...**                                                           |\n| ------------------------------------------------------------------ | ------------------------------------------------------------------------------ |\n| Find out about the <a href=\"#0\">changes to the expense policy.</a> | Find out about changes to the expense policy. <a href=\"#0\">Read more here.</a> |\n\nStart with a verb when telling people to do something.\n\n| **Like this...**                          | **Not like this...**                 |\n| ----------------------------------------- | ------------------------------------ |\n| <a href=\"#0\">Read new expense policy.</a> | <a href=\"#0\">New expense policy.</a> |\n",
      "path": "/styles/content-style/links",
      "navPriority": 5,
      "date": "2022-11-15",
      "title": "Links",
      "subTitle": "Links need to be understandable by all users.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/styles/links.mdx",
      "meta": {
        "relativePath": "styles/links.mdx",
        "createdAt": "2023-04-14T11:24:28.701Z",
        "lastModified": "2023-04-14T11:24:28.701Z",
        "size": 1264,
        "formattedSize": "1.2 KB"
      }
    },
    {
      "id": "styles__motionx",
      "contents": "\nimport motionVid1 from \"./images/slide-animation-between-steps.mp4\";\nimport motionVid2 from \"./images/expand-animation-on-cards.mp4\";\nimport motionVid3 from \"./images/entry-and-exit.mp4\";\nimport motionVid4 from \"./images/button-state-transitions.mp4\";\n\n## Using motion\n\nMotion is achieved by applying animations or transitions to interface elements.\n\nMotion can make your app feel more responsive. It can be especially useful for providing subtle feedback and affordance about functionality, as well as when loading data.\n\nHowever, use animation subtly and sparingly. Many people can experience side effects from excessive animation, such as headaches, eye strain and anxiety.\n\n## When to use\n\nUse motion to highlight relationships between interface elements to reinforce the flow of an app.\n\nSmall animations are valuable for providing feedback, such as showing that an action has been registered.\n\nTransitions between component states or animating how components enter or exit the page help an application to feel more fluid.\n\nHowever, most apps won't need animation or transitions other than the default ones from a component library.\n\nIf using custom motion in your app always provide a way to turn off animations.\n\n## When not to use\n\nDon't use motion or animation to add decorative or fun elements as these can be distracting and can cause people more severe side effects.\n\nDon't use motion as the only way to provide feedback, only use it to enhance information that can be understood without the motion.\n\nDon't create new animations where a standard one exists, such as a progress bar.\n\n## Motion behaviour\n\n### Transitions\n\nWhen navigating between pages, or in multi-step processes and other complex layouts, animating the transition can make it more obvious what has changed.\n\n<video\n  width=\"100%\"\n  muted\n  controls\n  loop\n  title=\"A slide and fade animation used to highlight navigation through a multi-stepped process.\"\n>\n  <source src={motionVid1} type=\"video/mp4\" />\n</video>\n\nIt can also help to hint towards where you've come from and where you might go based on your next navigation action.\n\n<video\n  width=\"50%\"\n  muted\n  controls\n  loop\n  title=\"An expand animation helps to link the overlay to the component that it's related to. It also provides an indication to where the close button would take the user.\"\n>\n  <source src={motionVid2} type=\"video/mp4\" />\n</video>\n\n#### Establish relationships\n\nWhen elements are displayed, they enter and exit the screen. Animating entry and exit behaviours can help to establish relationships between elements.\n\nDefining the order in which elements appear can help to afford hierarchy or importance. Grouping similar elements so that they animate in the same way can differentiate them from unrelated elements that animate differently.\n\nStarting entrance animations from specific positions can create parent/child relationships between elements.\n\n<video\n  width=\"50%\"\n  muted\n  controls\n  loop\n  title=\"Entry and exit transitions can establish relationships between content before a user even reads the content.\"\n>\n  <source src={motionVid3} type=\"video/mp4\" />\n</video>\n\n### Feedback\n\nMicro-interactions provide subtle feedback about a user interaction. Motion can be used as micro-interactions that immediately indicate that an action was recognised.\n\nThis type of motion should be quick so not to distract or delay the completion of a task, but instead aid the understanding of it.\n\nWhen elements change state, animation can help to emphasize the transformation by grabbing the user's attention.\n\n<video\n  width=\"50%\"\n  muted\n  controls\n  loop\n  title=\"Animating the transitions between component states emphasise the transition.\"\n>\n  <source src={motionVid4} type=\"video/mp4\" />\n</video>\n\n### Loading placeholders\n\nMotion can be used to indicate that something is loading. Loading indicators use motion to provide a sense of progress. Animated placeholders such as the skeleton loading pattern prevent layouts from moving as elements are loaded and creates a smoother experience.\n\n## Animation tokens\n\nThe UI Kit uses a set of animation tokens to consistently apply motion across its components. These tokens use a consistent set of values to achieve continuity across the site.\n\n### Duration\n\nThese tokens define how quickly an animation takes place. The 'fast' duration is often used for animations between component states. The ‘slow' duration is most often used for content changes.\n\n- Fast (100ms)\n- Slow (300ms)\n\n### Easing\n\nEasing helps to make motion feel natural. Using the easing token consistently helps to achieve continuity throughout an app. Use the easing tokens `--ic-easing-transition-fast` or `--ic-easing-transition-slow`.\n\n## Animation styles\n\nThese are the common animation styles that are used on component UI Kit.\n\n### Fade in and out\n\nFade animations change the opacity of an element and are used for quick transition between states as well as in entry and exit transitions.\n\n### Slide up, down, left and right\n\nSlide animations change the position of an element and are often used for entry and exit transitions or navigation.\n\n### Zoom in and out\n\nZoom animations change the size of an element and are often used for entry and exit transitions or micro-interactions.\n\n### Expand and shrink\n\nExpand and shrink animations change the shape of a component and are often used for entry and exit transitions.\n\n## Accessibility considerations\n\nNever use a full-page or parallax animation. Where possible, avoid decorative animation altogether.\n\nDon't animate the scrolling of a page other than the default browser behaviour.\n\nSome people indicate they prefer reduced motion through the prefers-reduced-motion browser setting. Your app must respect this setting.\n",
      "path": "/styles/motion",
      "navPriority": 5,
      "date": "2022-11-15",
      "title": "Motion",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/styles/motion.mdx",
      "meta": {
        "relativePath": "styles/motion.mdx",
        "createdAt": "2023-04-14T11:24:28.701Z",
        "lastModified": "2023-04-14T11:24:28.701Z",
        "size": 5938,
        "formattedSize": "5.8 KB"
      }
    },
    {
      "id": "styles__numbers-dates-timex",
      "contents": "\n## Numbers\n\nWrite out the number in words if it starts a sentence.\n\n| **Like this...**                                     | **Not like this...**                             |\n| ---------------------------------------------------- | ------------------------------------------------ |\n| Eleven herbs and spices in our fried chicken recipe. | 11 herbs and spices in our fried chicken recipe. |\n\nWhen the number is below 10, write the word.\n\n| **Like this...**                               | **Not like this...**                               |\n| ---------------------------------------------- | -------------------------------------------------- |\n| There was only one pizza left on the shelf.    | There was only 1 pizza left on the shelf.          |\n| I saw someone with 12 pizzas in their trolley. | I saw someone with twelve pizzas in their trolley. |\n\n## Dates\n\nUse the 24-hour clock with a colon between the hour and minutes.\n\n| **Like this...**             | **Not like this...**       |\n| ---------------------------- | -------------------------- |\n| At 14:00 the crow will call. | At 2pm the crow will call. |\n\nWrite out dates in words, rather than suffixes or slashes in dates, unless space doesn't allow you to do so.\n\n| **Like this...** | **Be careful with...** |\n| ---------------- | ---------------------- |\n| 3 September 2021 | 3/9/21                 |\n| 3 Sep 2021       | 03/09/2021             |\n\n## Times\n\nFor approximate times, round to the nearest whole number. Remember to write numbers below 10 as words.\n\n| **Like this...**                     | **Not like this...**                |\n| ------------------------------------ | ----------------------------------- |\n| You last logged in two minutes ago.  | You last logged in 2 minutes ago.   |\n| You last logged in five minutes ago. | You last logged in 4.5 minutes ago. |\n| You last logged in 10 minutes ago.   | You last logged in ten minutes ago. |\n\nZulu time should be used when writing for times that involve other countries.\n\n| **Like this...**                                 | **Not like this...**                |\n| ------------------------------------------------ | ----------------------------------- |\n| The food will be delivered at 1400z (07:00 EST). | The food will be delivered at 0700. |\n",
      "path": "/styles/content-style/numbers-dates-and-time",
      "navPriority": 4,
      "date": "2022-11-15",
      "title": "Numbers, dates and times",
      "subTitle": "How to to write numbers dates and time consistently.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/styles/numbers-dates-time.mdx",
      "meta": {
        "relativePath": "styles/numbers-dates-time.mdx",
        "createdAt": "2023-04-14T11:24:28.701Z",
        "lastModified": "2023-04-14T11:24:28.701Z",
        "size": 2593,
        "formattedSize": "2.5 KB"
      }
    },
    {
      "id": "styles__principlesx",
      "contents": "\n## Inclusive\n\nWe write for everyone. We realise people can interpret our words in different ways.\n\nWe assume no existing knowledge or technical skill.\n\nWe write non-gendered.\n\n## Human\n\nWe write for real people and speak to them as if we're in a conversation.\n\nWe use contractions: it's, you'll, you're, we're, let's.\n\nRead out your writing and check that it sounds natural.\n\n## Useful\n\nWe tell people only what they need to know.\n\nWe keep content to the point.\n\nShorter sentences are easier for people to scan. They’re more accessible for people who struggle with reading or have a cognitive impairment.\n\n## Simple\n\nUse simple words to make it easier to read.\n\nWe write only what we need to and strip excess words from what we write.\n\nWe aim for a reading age of 9 to 11 years old. Adults still prefer and recognise the words they learned as a child.\n",
      "path": "/styles/content-style/principles",
      "navPriority": 0,
      "date": "2022-11-15",
      "title": "Principles",
      "subTitle": "Use the four writing principles to help create engaging and consistent content.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/styles/principles.mdx",
      "meta": {
        "relativePath": "styles/principles.mdx",
        "createdAt": "2023-04-14T11:24:28.701Z",
        "lastModified": "2023-04-14T11:24:28.701Z",
        "size": 1164,
        "formattedSize": "1.1 KB"
      }
    },
    {
      "id": "styles__templatesx",
      "contents": "\nimport templatesFig1 from \"./images/fig-1-side-navigation.png\";\nimport templatesFig2 from \"./images/fig-2-top-navigation.png\";\nimport templatesFig3 from \"./images/fig-3-side-nav-with-page-header.png\";\nimport templatesFig4 from \"./images/fig-4-hero.png\";\n\n## Using layout templates\n\nUse different combinations of navigation components and page content to create different layouts.\n\nSome combinations work better for particular use cases. Side navigation takes up less room on data-heavy apps, but top navigation offers simpler navigation for content-based apps. Use the following templates to quickly create new pages.\n\nSide navigation is preferred for most apps as it provides more screen space for main content.\n\n## Side navigation\n\nUse the [side navigation](/components/side-nav) layout for data-heavy apps. This template prioritises the main content area giving it the full height and width of the viewport. The navigation items in the side navigation give access to your app’s main functions from every page.\n\n<DoDontCaution\n  imageSrc={templatesFig1}\n  imageAlt=\"An example of an app with a side navigation and some example content laid out using a 12-column grid.\"\n  state=\"none\"\n  caption=\"The side navigation template is useful for data-heavy apps.\"\n/>\n\n## Top navigation\n\n[Top navigation](/components/top-nav) works well for content-based apps, such as an intranet, blog, or this Design System. The main navigation items can always be accessed at the top of the page. This layout often uses large margins to achieve a readable line-length for the page’s main content section.\n\n<DoDontCaution\n  imageSrc={templatesFig2}\n  imageAlt=\"An example app titled ‘Java nice day’ that uses a top navigation and has some example content laid out on a 12-column grid.\"\n  state=\"none\"\n  caption=\"The top navigation template is useful for content-based apps.\"\n/>\n\n## Secondary navigation\n\nUse secondary navigation components within these templates to provide additional navigation within each main section of an app.\n\n### Page header\n\nA [page header](/components/page-header) can be added to any page in an app, giving it a title as well as offering secondary-navigation options through tabs or a stepper.\n\nUse [tabs](/components/tabs) to provide access to related pages where the content is mutually exclusive from one another.\n\nUse a [stepper](/components/stepper) to signpost a user through a linear series of steps to complete a process or view information in a particular order.\n\n<DoDontCaution\n  imageSrc={templatesFig3}\n  imageAlt=\"Two examples of a side-navigation layout each with a page header. One uses a page header with tabs to provide secondary navigation. The other uses a page header with a stepper.\"\n  state=\"none\"\n  caption=\"Two examples of a side-navigation layout each with a page header. One uses a page header with tabs to provide secondary navigation. The other uses a page header with a stepper.\"\n/>\n\n### Hero\n\nA [hero](/components/hero) can be included on homepages to signpost key links or actions in an emphasised position. Don’t use hero banners on every page though.\n\n<DoDontCaution\n  imageSrc={templatesFig4}\n  imageAlt=\"An example app using a top navigation layout with a hero banner that provides a key link titled ‘Get started’.\"\n  state=\"none\"\n  caption=\"Use top navigation and hero on a homepage to introduce the app or provide direction to a key action (such as search or get started).\"\n/>\n\n## Accessibility considerations\n\nWhen using these layout templates use appropriate HTML regions such as `<main>` and `<nav>`.\n\n## Related components\n\n- [Top navigation](/components/top-nav)\n- [Side navigation](/components/side-nav)\n- [Page header](/components/page-header)\n- [Hero](/components/hero)\n",
      "path": "/styles/templates",
      "navPriority": 4,
      "date": "2022-11-15",
      "title": "Templates",
      "subTitle": "Follow these common layout templates to apply frequently used navigation patterns to your app designs.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/styles/templates.mdx",
      "meta": {
        "relativePath": "styles/templates.mdx",
        "createdAt": "2023-04-14T11:24:28.701Z",
        "lastModified": "2023-04-14T11:24:28.701Z",
        "size": 4051,
        "formattedSize": "4.0 KB"
      }
    },
    {
      "id": "styles__typographyx",
      "contents": "\nimport TypographicScale from \"./components/TypographicScale\";\n\n## Using consistent typography\n\nWell defined typography creates obvious hierarchy and helps to organise information.\n\nThe Design System uses the [Open Sans](https://fonts.google.com/specimen/Open+Sans) font for most text and [Nunito Sans](https://fonts.google.com/specimen/Nunito+Sans) for large headings. These are flexible and readable fonts that works well across digital and print.\n\n## Headings\n\nWrite all headings in sentence case.\n\nUse the logical order of `h#` tags in code. For example, a `h3` heading needs to come after a `h2` heading but can be styled as any variant. It's important that [heading tags are used properly](/accessibility/coding/headings).\n\n<TypographicScale variants=\"h1, h2, h3, h4\" />\n\n## Subtitles\n\nWrite all subtitles in sentence case.\n\nUse subtitles for sub-section headings and table headings.\n\n<TypographicScale variants=\"subtitle-large, subtitle-small\" />\n\n## Text\n\nWrite all body text in sentence case.\n\nUse a minimum of 16pt for body text. 18pt should be used for apps with a lot of text (like intranets or reports).\n\n<TypographicScale variants=\"body, caption, caption-uppercase\" />\n\n## Labels\n\n<TypographicScale variants=\"label, label-uppercase\" />\n\n## Links\n\nIf your link is at the end of a sentence or paragraph, make sure that the linked text does not include the full stop.\n\n<TypographicScale variants=\"link\" />\n",
      "path": "/styles/typography",
      "navPriority": 6,
      "date": "2022-11-15",
      "title": "Typography",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/styles/typography.mdx",
      "meta": {
        "relativePath": "styles/typography.mdx",
        "createdAt": "2023-04-14T11:24:28.701Z",
        "lastModified": "2023-04-14T11:24:28.701Z",
        "size": 1619,
        "formattedSize": "1.6 KB"
      }
    },
    {
      "id": "styles__voice-and-tonex",
      "contents": "\n## Voice\n\nWhen we write, we want to appear that the 'user interface is talking to the user' and remember that everyone needs to understand what we're trying to say.\n\nTherefore our voice is personal, inclusive and plain-spoken.\n\nWe:\n\n- Address the user as 'you'.\n- Avoid using 'should' as it can sound patronising.\n- Use the language our users want us to use.\n- Open and inclusive to all.\n\n## Tone\n\nWe adapt our tone depending on the context.\n\nFor example, we may use a direct, serious and reassuring tone when writing about a new government legislation or data handling policy.\n\n## Tips\n\n### Active not passive voice\n\nActive voice is easier to read because it identifies the 'thing' that's doing the action.\n\nWords like 'was' or 'by' may indicate that you're writing in a passive voice.\n\n| **Like this...**                               | **Not like this...**                                  |\n| ---------------------------------------------- | ----------------------------------------------------- |\n| Matt checked out the 'Content Style' document. | The 'Content Style' document was checked out by Matt. |\n| The app encountered a problem.                 | A problem was encountered by the app.                 |\n\n### Be direct\n\nWriting 'to the point' will help you write simple content.\n\nThe simple principle is about getting readers the information they want as quickly as possible.\n\n| **Like this...**                                  | **Not like this...**                                                      |\n| ------------------------------------------------- | ------------------------------------------------------------------------- |\n| Read the instructions that came with your laptop. | Consult the guidance that came with your laptop for further instructions. |\n\n### Swap formal words for normal ones\n\nUse language you would use if you were talking with the person you’re writing to.\n\n| **This...**      | **Instead of...** |\n| ---------------- | ----------------- |\n| Person           | User              |\n| About            | Approximate       |\n| App              | Application       |\n| Ask              | Request           |\n| Buy              | Purchase          |\n| Cancel           | Discard, Abort    |\n| Complete         | Successful        |\n| Confirm          | Validate          |\n| Divide           | Allocate          |\n| Fix              | Resolve           |\n| Get              | Obtain            |\n| Give             | Provide           |\n| Go with          | Accompany         |\n| Help             | Assistance        |\n| Maintain         | Support, Keep     |\n| Make sure        | Ensure            |\n| More information | More guidance     |\n| Never            | Not               |\n| Next             | Adjacent          |\n| Own              | Possess           |\n| Question         | Query             |\n| Remove           | Delete, Trash     |\n| Send             | Forward           |\n| Stay             | Remain            |\n| Stop             | Discontinue       |\n| Take part        | Participate       |\n| Tell             | Notify, Recommend |\n| Try              | Attempt           |\n| Use              | Utilise           |\n| A or b or both   | A and/or b        |\n| For example      | e.g.              |\n",
      "path": "/styles/content-style/voice-and-tone",
      "navPriority": 1,
      "date": "2022-11-15",
      "title": "Voice and tone",
      "subTitle": "Learn how to apply our familiar tongue and when to chose the right tone.",
      "contribute": "https://github.com/mi6/ic-design-system/tree/main/src/content/structured/styles/voice-and-tone.mdx",
      "meta": {
        "relativePath": "styles/voice-and-tone.mdx",
        "createdAt": "2023-04-14T11:24:28.701Z",
        "lastModified": "2023-04-14T11:24:28.701Z",
        "size": 3572,
        "formattedSize": "3.5 KB"
      }
    }
  ]
}
